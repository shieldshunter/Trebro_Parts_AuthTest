var An=Object.defineProperty;var is=Object.getOwnPropertySymbols;var gn=Object.prototype.hasOwnProperty,In=Object.prototype.propertyIsEnumerable;var ri=(t,A,g)=>A in t?An(t,A,{enumerable:!0,configurable:!0,writable:!0,value:g}):t[A]=g,ci=(t,A)=>{for(var g in A||(A={}))gn.call(A,g)&&ri(t,g,A[g]);if(is)for(var g of is(A))In.call(A,g)&&ri(t,g,A[g]);return t};var Cn=(t,A)=>()=>(A||t((A={exports:{}}).exports,A),A.exports);var tI=(t,A,g)=>(ri(t,typeof A!="symbol"?A+"":A,g),g);var Z0=Cn((V0,Xt)=>{const en=function(){const A=document.createElement("link").relList;if(A&&A.supports&&A.supports("modulepreload"))return;for(const C of document.querySelectorAll('link[rel="modulepreload"]'))I(C);new MutationObserver(C=>{for(const e of C)if(e.type==="childList")for(const i of e.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&I(i)}).observe(document,{childList:!0,subtree:!0});function g(C){const e={};return C.integrity&&(e.integrity=C.integrity),C.referrerpolicy&&(e.referrerPolicy=C.referrerpolicy),C.crossorigin==="use-credentials"?e.credentials="include":C.crossorigin==="anonymous"?e.credentials="omit":e.credentials="same-origin",e}function I(C){if(C.ep)return;C.ep=!0;const e=g(C);fetch(C.href,e)}};en();function Ro(t,A,g,I){var C;t.onmousedown=e;function e(s){C={e:s,offsetLeft:t.offsetLeft,offsetTop:t.offsetTop,leftPanelWidth:A.offsetWidth,mainPanelWidth:g.offsetWidth,leftPanelHeight:A.offsetHeight,mainPanelHeight:g.offsetHeight},document.onmousemove=i,document.onmouseup=()=>{document.onmousemove=document.onmouseup=null}}function i(s){const o={x:s.clientX-C.e.clientX,y:s.clientY-C.e.clientY};I==="H"?(o.x=Math.min(Math.max(o.x,-C.leftPanelWidth),C.mainPanelWidth),t.style.left=C.offsetLeft+o.x+"px",A.style.width=C.leftPanelWidth+o.x+"px"):I==="V"&&(g.style.height=C.mainPanelHeight-o.y+"px")}}const xi=document.getElementById("separatorV"),lC=document.getElementById("leftPanel"),tn=document.getElementById("mainPanel");Ro(xi,lC,tn,"H");const ts=document.getElementById("separatorH"),ss=document.getElementById("topPanel"),os=document.getElementById("bottomPanel");ts&&ss&&os&&Ro(ts,ss,os,"V");let hi=!1;const fo=()=>{hi?(lC.classList.add("invisible"),lC.style.width="0px",xi.style.left="0px",hi=!1):(lC.classList.remove("invisible"),lC.style.width="300px",xi.style.left="300px",hi=!0)};document.getElementById("logo").addEventListener("click",fo);const sn=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);sn||fo();var wo="4.4.0";class on{constructor(A){this.version=A,this.registry={}}registerLib(A){const g=A.name,I=A.version;this.registry[g]&&console.warn("Library already registered:"+g),this.registry[g]=I,console.log(`Registered lib '${g}' v${I}`)}listLibs(){return this.registry}}function an(){return(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i))!=null}function nn(){return(navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Pixel/i)||navigator.userAgent.match(/Windows Phone/i))!=null}function Bn(){const t=navigator.userAgent;let A=navigator.appName,g=""+parseFloat(navigator.appVersion),I=parseInt(navigator.appVersion,10),C,e,i;return navigator.brave?(A="Brave",e=t.indexOf("Chrome"),g=t.substring(e+7,t.indexOf(" ",e+7))):(e=t.indexOf("Opera"))!=-1?(A="Opera",g=t.substring(e+6),(e=t.indexOf("Version"))!=-1&&(g=t.substring(e+8))):(e=t.indexOf("MSIE"))!=-1?(A="Microsoft Internet Explorer",g=t.substring(e+5)):(e=t.indexOf("Edge"))!=-1?(A="Edge",g=t.substring(e+4)):(e=t.indexOf("Chrome"))!=-1?(A="Chrome",g=t.substring(e+7,t.indexOf(" ",e+7))):(e=t.indexOf("Safari"))!=-1?(A="Safari",g=t.substring(e+7),(e=t.indexOf("Version"))!=-1&&(g=t.substring(e+8))):(e=t.indexOf("Firefox"))!=-1?(A="Firefox",g=t.substring(e+8)):(C=t.lastIndexOf(" ")+1)<(e=t.lastIndexOf("/"))&&(A=t.substring(C,e),g=t.substring(e+1),A.toLowerCase()==A.toUpperCase()&&(A=navigator.appName)),(i=g.indexOf(";"))!=-1&&(g=g.substring(0,i)),(i=g.indexOf(" "))!=-1&&(g=g.substring(0,i)),I=parseInt(""+g,10),isNaN(I)&&(g=""+parseFloat(navigator.appVersion),I=parseInt(navigator.appVersion,10)),{browserName:A,fullVersion:g,majorVersion:I,appName:navigator.appName,userAgent:navigator.userAgent}}function ln(){let t;try{t=document.createElement("canvas").getContext("webgl")}catch{}if(!t)return{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:!1,supportsWebGL2:!1};let A;try{A=document.createElement("canvas").getContext("webgl2")}catch{}const g=t.getExtension("WEBGL_debug_renderer_info");if(!g)return console.warn("Unable to determine GPU Info:"),{vendor:"Unknown",renderer:"Unknown",gpuVendor:"Unknown",maxTextureSize:0,supportsWebGL:t!=null,supportsWebGL2:A!=null};const I=t.getParameter(g.UNMASKED_VENDOR_WEBGL),C=t.getParameter(g.UNMASKED_RENDERER_WEBGL),e=t.getParameter(t.MAX_TEXTURE_SIZE);let i;return C.match(/NVIDIA/i)?i="NVidia":C.match(/AMD/i)||C.match(/Radeon/i)?i="AMD":C.match(/Intel/i)?i="Intel":C.match(/Mali/i)?i="ARM":C.match(/Apple/i)?i="Apple":C.match(/Adreno/i)?i="Adreno":C.match(/Swiftshader/i)?(i="Google",console.warn("Hardware rendering is disabled or not working on your system. Falling back to the Swiftshader. Expect poor performance:",C)):console.warn("Unable to determine GPU vendor:",C),{vendor:I,renderer:C,gpuVendor:i,maxTextureSize:e,supportsWebGL:!0,supportsWebGL2:A!=null}}const dn=()=>{const t=window.navigator.userAgent;let A=null;return/macintosh/i.test(t)?A="macOS":/ios/i.test(t)?A="iOS":/win/i.test(t)?A="Windows":/android/i.test(t)?A="Android":/linux/i.test(t)&&(A="Linux"),A},vA=function(){if(!globalThis.navigator)return{OS:"Node",isMobileDevice:!1,isIOSDevice:!1,browserName:"Node",webGLSupported:!1,deviceCategory:"High",hardwareConcurrency:4};const t=nn(),A=Bn(),g=ln();let I="Low";if(g.supportsWebGL)if(t)I="Low";else{const e=g.renderer.replace(/[()]/g,"").split(" ");if(g.gpuVendor=="NVidia"){const i=e.indexOf("GTX");if(i!=-1){const s=e[i+1];s.endsWith("M")?parseInt(s.substring(0,s.length-2))>=900?I="Medium":I="Low":parseInt(s)>=1030?I="High":I="Medium"}else e.includes("RTX")||e.includes("TITAN")||e.includes("Quadro")?I="High":I="Low"}else if(g.gpuVendor=="AMD"){const i=e.indexOf("Radeon");if(i!=-1){const s=e.indexOf("RX");if(s!=-1)if(e[s+1]=="Vega")I="High";else{const o=e[s+1];let a;o.endsWith("X")?(a=parseInt(o.substring(0,o.length-2)),I="High"):a=parseInt(o),a>=480?I="High":I="Medium"}else e[i+1]=="Pro"?parseInt(e[s+1])>=450?I="Medium":I="Low":e[i+1]=="Sky"&&parseInt(e[s+1])>=700?I="Medium":I="Low"}else e.includes("FirePro")||e.includes("Quadro")?I="High":I="Low"}else(g.gpuVendor=="Adreno"||g.gpuVendor=="Intel"||g.gpuVendor=="Google")&&(I="Low")}let C=globalThis.navigator.hardwareConcurrency;return C||(t?C=4:C=6),{OS:dn(),isMobileDevice:t,isIOSDevice:an(),browserName:A.browserName,fullVersion:A.fullVersion,majorVersion:A.majorVersion,appName:A.appName,userAgent:A.userAgent,webGLSupported:g.supportsWebGL,gpuDesc:g,deviceCategory:I,hardwareConcurrency:C}}();globalThis.ZeaSystemDesc||(globalThis.ZeaSystemDesc=vA);let XI={},ee={},HI=[];class p{static register(A,g){if(A in XI){console.warn(`There's a class registered with '${A}' name. Second registration failed.`);return}const I=HI.length;HI.push(g),ee[I]=A,XI[A]=I}static getClassDefinition(A){if(!(A in XI))throw new Error(`${A} class is not registered`);return HI[XI[A]]}static getClassName(A){const g=HI.indexOf(A);if(g>=0&&ee[g])return ee[g];throw new Error("class is not registered")}static constructClass(A){const g=HI[XI[A]];if(!g)throw new Error(`${A} class is not registered`);return new g}static flush(){XI={},ee={},HI=[]}}class Ig{static replaceAll(A,g,I){return A.replace(new RegExp(g,"g"),I)}static stringifyJSONWithFixedPrecision(A,g=0,I=5){return JSON.stringify(A,(C,e)=>e&&(e.toFixed?Number(e.toFixed(I)):e),g)}static hashStr(A){let g=0,I,C,e;if(A.length===0)return g;for(I=0,e=A.length;I<e;I++)C=A.charCodeAt(I),g=(g<<5)-g+C,g|=0;return Math.abs(g)}}class K{constructor(A=0,g=0){A instanceof Float32Array||A instanceof Uint32Array||A instanceof Int32Array?this.__data=A:typeof A=="number"&&typeof g=="number"?(this.__data=new Float32Array(2),this.__data[0]=A,this.__data[1]=g):typeof A=="object"?(this.__data=new Float32Array(2),this.fromJSON(A)):this.__data=new Float32Array(2)}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}set(A,g){this.__data[0]=A,this.__data[1]=g}setFromOther(A){this.x=A.x,this.y=A.y}isEqual(A){return this.x==A.x&&this.y==A.y}notEqual(A){return this.x!=A.x&&this.y!=A.y}approxEqual(A,g=Number.EPSILON){return Math.abs(this.x-A.x)<g&&Math.abs(this.y-A.y)<g}add(A){return new K(this.x+A.x,this.y+A.y)}addInPlace(A){this.x+=A.x,this.y+=A.y}subtract(A){return new K(this.x-A.x,this.y-A.y)}subtractInPlace(A){return this.x-=A.x,this.y-=A.y,this}scale(A){return new K(this.x*A,this.y*A)}scaleInPlace(A){this.x*=A,this.y*=A}invert(){return new K(1/this.x,1/this.y)}invertInPlace(){return this.x=1/this.x,this.y=1/this.y,this}multiply(A){return new K(this.x*A.x,this.y*A.y)}multiplyInPlace(A){this.x*=A.x,this.y*=A.y}lengthSquared(){const A=this.__data[0],g=this.__data[1];return A*A+g*g}length(){return Math.sqrt(this.lengthSquared())}distanceTo(A){const g=this.__data[0]-A.x,I=this.__data[1]-A.y;return Math.sqrt(g*g+I*I)}normalize(){const A=this.__data[0],g=this.__data[1];let I=A*A+g*g;return I<Number.EPSILON?new K:(I=1/Math.sqrt(I),new K(A*I,g*I))}normalizeInPlace(){const A=this.__data[0],g=this.__data[1];let I=A*A+g*g;I<Number.EPSILON||(I=1/Math.sqrt(I),this.set(A*I,g*I))}dot(A){return this.x*A.x+this.y*A.y}cross(A){return this.x*A.y-this.y*A.x}angleTo(A){const g=this.normalize().dot(A.normalize());return g>1?0:g<-1?Math.PI:Math.acos(g)}signedAngleTo(A){const g=this.angleTo(A);return this.cross(A)<0?-g:g}rotate(A){const g=Math.cos(A),I=Math.sin(A);return new K(this.x*g-this.y*I,this.x*I+this.y*g)}lerp(A,g){const I=this.x,C=this.y;return new K(I+g*(A.x-I),C+g*(A.y-C))}setRandomDir(A=1){const g=Math.random()*2*Math.PI;return this.__data[0]=Math.cos(g)*A,this.__data[1]=Math.sin(g)*A,this}setRandom(A=1){return this.__data[0]=Math.random()*A,this.__data[1]=Math.random()*A,this}clone(){return new K(this.__data[0],this.__data[1])}asArray(){return this.__data}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y}}fromJSON(A){this.x=A.x,this.y=A.y}readBinary(A){this.x=A.loadFloat32(),this.y=A.loadFloat32()}static intersectionOfLines(A,g,I,C){const e=(A.x-g.x)*(I.y-C.y),i=(A.y-g.y)*(I.x-C.x),s=e-i;if(s==0)return null;const o=A.x*g.y-A.y*g.x,a=I.x*C.y-I.y*C.x,n=I.x-C.x,B=A.x-g.x,d=I.y-C.y,l=A.y-g.y,r=(o*n-B*a)/s,c=(o*d-l*a)/s;return new K(r,c)}isValid(){for(const A of this.__data)if(A==1/0||isNaN(A))return!1;return!0}}class f{constructor(A=0,g=0,I=0){if(A instanceof Float32Array||A instanceof Uint32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 3))");const C=A,e=g;this.__data=new Float32Array(C,e,3)}else typeof A=="number"&&typeof g=="number"&&typeof I=="number"?(this.__data=new Float32Array(3),this.__data[0]=A,this.__data[1]=g,this.__data[2]=I):A!=null&&typeof A=="object"?(this.__data=new Float32Array(3),this.fromJSON(A)):this.__data=new Float32Array(3)}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}get z(){return this.__data[2]}set z(A){this.__data[2]=A}get xy(){return new K(this.__data[0],this.__data[1])}get yz(){return new K(this.__data[1],this.__data[2])}set(A,g,I){this.x=A,this.y=g!==void 0?g:A,this.z=I!==void 0?I:A}setDataArray(A){this.__data=A}setFromOther(A){this.x=A.x,this.y=A.y,this.z=A.z}isNull(){return Math.abs(this.x)<Number.EPSILON&&Math.abs(this.y)<Number.EPSILON&&Math.abs(this.z)<Number.EPSILON}is111(){return Math.abs(1-this.x)<Number.EPSILON&&Math.abs(1-this.y)<Number.EPSILON&&Math.abs(1-this.z)<Number.EPSILON}isEqual(A){return this.x==A.x&&this.y==A.y&&this.z==A.z}notEqual(A){return this.x!=A.x&&this.y!=A.y&&this.z!=A.z}approxEqual(A,g=Number.EPSILON){return Math.abs(this.x-A.x)<g&&Math.abs(this.y-A.y)<g&&Math.abs(this.z-A.z)<g}add(A){return new f(this.x+A.x,this.y+A.y,this.z+A.z)}addInPlace(A){this.x+=A.x,this.y+=A.y,this.z+=A.z}subtract(A){return new f(this.x-A.x,this.y-A.y,this.z-A.z)}subtractInPlace(A){this.x-=A.x,this.y-=A.y,this.z-=A.z}multiply(A){return new f(this.x*A.x,this.y*A.y,this.z*A.z)}multiplyInPlace(A){this.x*=A.x,this.y*=A.y,this.z*=A.z}divide(A){return new f(this.x/A.x,this.y/A.y,this.z/A.z)}divideInPlace(A){this.x/=A.x,this.y/=A.y,this.z/=A.z}scale(A){return new f(this.x*A,this.y*A,this.z*A)}scaleInPlace(A){this.x*=A,this.y*=A,this.z*=A}negate(){return new f(-this.x,-this.y,-this.z)}inverse(){return new f(1/this.x,1/this.y,1/this.z)}lengthSquared(){const A=this.__data[0],g=this.__data[1],I=this.__data[2];return A*A+g*g+I*I}length(){return Math.sqrt(this.lengthSquared())}distanceTo(A){const g=this.__data[0]-A.x,I=this.__data[1]-A.y,C=this.__data[2]-A.z;return Math.sqrt(g*g+I*I+C*C)}normalize(){let A=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];return A<Number.EPSILON?new f:(A=1/Math.sqrt(A),new f(this.__data[0]*A,this.__data[1]*A,this.__data[2]*A))}normalizeInPlace(){let A=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(A<Number.EPSILON)return;A=Math.sqrt(A);const g=1/A;return this.__data[0]*=g,this.__data[1]*=g,this.__data[2]*=g,A}resize(A){const g=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(g<Number.EPSILON)return;const I=A/Math.sqrt(g);return new f(this.__data[0]*I,this.__data[1]*I,this.__data[2]*I)}resizeInPlace(A){const g=this.__data[0]*this.__data[0]+this.__data[1]*this.__data[1]+this.__data[2]*this.__data[2];if(g<Number.EPSILON)return;const I=A/Math.sqrt(g);this.__data[0]*=I,this.__data[1]*=I,this.__data[2]*=I}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z}cross(A){const g=this.x,I=this.y,C=this.z,e=A.x,i=A.y,s=A.z;return new f(I*s-C*i,C*e-g*s,g*i-I*e)}angleTo(A){const g=this.dot(A);return g>1?0:Math.acos(g)}lerp(A,g){const I=this.x,C=this.y,e=this.z;return new f(I+g*(A.x-I),C+g*(A.y-C),e+g*(A.z-e))}abs(){return new f(Math.abs(this.x),Math.abs(this.y),Math.abs(this.z))}setRandomDir(A=1){const g=Math.random()*2*Math.PI,I=Math.random()*2-1,C=Math.sqrt(1-I*I)*A;return this.__data[0]=Math.cos(g)*C,this.__data[1]=Math.sin(g)*C,this.__data[2]=I*A,this}setRandom(A=1){return this.__data[0]=(Math.random()-.5)*A,this.__data[1]=(Math.random()-.5)*A,this.__data[2]=(Math.random()-.5)*A,this}clone(){return new f(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z}}fromJSON(A){this.x=A.x,this.y=A.y,this.z=A.z}readBinary(A){this.x=A.loadFloat32(),this.y=A.loadFloat32(),this.z=A.loadFloat32()}isValid(){for(const A of this.__data)if(A==1/0||isNaN(A))return!1;return!0}}class cA{constructor(A=0,g=0,I=0,C=0){if(A instanceof Float32Array||A instanceof Uint32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const e=A,i=g;this.__data=new Float32Array(e,i,4)}else typeof A=="number"&&typeof g=="number"&&typeof I=="number"&&typeof C=="number"?(this.__data=new Float32Array(4),this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C):A!=null&&typeof A=="object"?(this.__data=new Float32Array(4),this.fromJSON(A)):this.__data=new Float32Array(4)}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}get z(){return this.__data[2]}set z(A){this.__data[2]=A}get t(){return this.__data[3]}set t(A){this.__data[3]=A}get w(){return this.__data[3]}set w(A){this.__data[3]=A}get xyz(){return new f(this.__data[0],this.__data[1],this.__data[2])}set(A,g,I,C){this.x=A,this.y=g,this.z=I,this.t=C}setFromOther(A){this.x=A.x,this.y=A.y,this.z=A.z,this.t=A.t}isEqual(A){return this.x==A.x&&this.y==A.y&&this.z==A.z&&this.t==A.t}notEqual(A){return this.x!=A.x&&this.y!=A.y&&this.z!=A.z&&this.t!=A.t}approxEqual(A,g=Number.EPSILON){return Math.abs(this.x-A.x)<g&&Math.abs(this.y-A.y)<g&&Math.abs(this.z-A.z)<g&&Math.abs(this.t-A.t)<g}add(A){return new cA(this.x+A.x,this.y+A.y,this.z+A.z,this.t+A.t)}addInPlace(A){this.x+=A.x,this.y+=A.y,this.z+=A.z,this.t+=A.t}subtract(A){return new cA(this.x-A.x,this.y-A.y,this.z-A.z,this.t-A.t)}subtractInPlace(A){this.x-=A.x,this.y-=A.y,this.z-=A.z,this.t-=A.t}multiply(A){return new cA(this.x*A.x,this.y*A.y,this.z*A.z,this.t*A.t)}multiplyInPlace(A){this.x*=A.x,this.y*=A.y,this.z*=A.z,this.t*=A.t}divide(A){return new cA(this.x/A.x,this.y/A.y,this.z/A.z,this.t/A.t)}divideInPlace(A){this.x/=A.x,this.y/=A.y,this.z/=A.z,this.t/=A.t}scale(A){return new cA(this.x*A,this.y*A,this.z*A,this.t*A)}scaleInPlace(A){this.set(this.x*A,this.y*A,this.z*A,this.t*A)}length(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[2];return Math.sqrt(A*A+g*g+I*I+C*C)}lengthSquared(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];return A*A+g*g+I*I+C*C}normalize(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];let e=A*A+g*g+I*I+C*C;return e<Number.EPSILON?new cA:(e=1/Math.sqrt(e),new cA(A*e,g*e,I*e))}normalizeInPlace(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];let e=A*A+g*g+I*I+C*C;e<Number.EPSILON||(e=1/Math.sqrt(e),this.set(A*e,g*e,I*e,C*e))}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z+this.t*A.t}cross(A){const g=this.x,I=this.y,C=this.z,e=this.t,i=A.x,s=A.y,o=A.z,a=A.t;return new cA(I*o-C*s,C*a-e*o,e*i-g*a,g*s-I*i)}angleTo(A){const g=this.normalize(),I=A.normalize(),C=g.dot(I);return C>1?0:Math.acos(C)}lerp(A,g){const I=this.x,C=this.y,e=this.z,i=this.t;return new cA(I+g*(A.x-I),C+g*(A.y-C),e+g*(A.z-e),i+g*(A.t-i))}clone(){return new cA(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}toVec3(){return new f(this.__data[0],this.__data[1],this.__data[2])}asArray(){return this.__data}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,t:this.t}}fromJSON(A){this.x=A.x,this.y=A.y,this.z=A.z,this.t=A.t}readBinary(A){this.x=A.loadFloat32(),this.y=A.loadFloat32(),this.z=A.loadFloat32(),this.t=A.loadFloat32()}isValid(){for(const A of this.__data)if(A==1/0||isNaN(A))return!1;return!0}}class W{constructor(A=0,g=0,I=0,C=1){if(A instanceof Float32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const e=A,i=g;this.__data=new Float32Array(e,i,4)}else this.__data=new Float32Array(4),typeof A=="string"?A.startsWith("#")?this.setFromHex(A):this.setFromCSSColorName(A):(this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C)}get r(){return this.__data[0]}set r(A){this.__data[0]=A}get g(){return this.__data[1]}set g(A){this.__data[1]=A}get b(){return this.__data[2]}set b(A){this.__data[2]=A}get a(){return this.__data[3]}set a(A){this.__data[3]=A}set(A,g,I,C=1){this.r=A,this.g=g,this.b=I,this.a=C}setFromOther(A){this.r=A.r,this.g=A.g,this.b=A.b,this.a=A.a}setFromScalarArray(A){this.r=A[0],this.g=A[1],this.b=A[2],this.a=A.length==4?A[3]:1}getAsRGBArray(){return[this.r*255,this.g*255,this.b*255]}getAsRGBDict(){return{r:this.r*255,g:this.g*255,b:this.b*255}}setFromRGB(A,g,I,C){this.r=A/255,this.g=g/255,this.b=I/255,this.a=C?C/255:1}setFromRGBArray(A){this.r=A[0]/255,this.g=A[1]/255,this.b=A[2]/255,this.a=A.length==4?A[3]/255:1}setFromRGBDict(A){this.r=A.r/255,this.g=A.g/255,this.b=A.b/255,this.a=A.a==4?A.a/255:1}setFromHex(A){function g(C){const e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(C);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}const I=g(A);if(!I){console.warn("Invalid hex code:"+A);return}this.setFromRGB(I.r,I.g,I.b)}setFromCSSColorName(A){const g=I=>({aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",honeydew:"#f0fff0",hotpink:"#ff69b4","indianred ":"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgrey:"#d3d3d3",lightgreen:"#90ee90",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370d8",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#d87093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"})[I.toLowerCase()];if(A.startsWith("#"))this.setFromHex(A);else{const I=g(A);I&&this.setFromHex(I)}}toHex(){function A(g){const C=Math.round(g*255).toString(16);return C.length==1?"0"+C:C}return"#"+A(this.r)+A(this.g)+A(this.b)}isEqual(A){return this.r==A.r&&this.g==A.g&&this.b==A.b&&this.a==A.a}notEquals(A){return this.r!=A.r&&this.g!=A.g&&this.b!=A.b&&this.a!=A.a}approxEqual(A,g=Number.EPSILON){return Math.abs(this.r-A.r)<g&&Math.abs(this.g-A.g)<g&&Math.abs(this.b-A.b)<g&&Math.abs(this.a-A.a)<g}add(A){return new W(this.r+A.r,this.g+A.g,this.b+A.b,this.a+A.a)}addInPlace(A){this.r+=A.r,this.g+=A.g,this.b+=A.b,this.a+=A.a}subtract(A){return new W(this.r-A.r,this.g-A.g,this.b-A.b,this.a-A.a)}scale(A){return new W(this.r*A,this.g*A,this.b*A,this.a*A)}scaleInPlace(A){this.r*=A,this.g*=A,this.b*=A,this.a*=A}applyGamma(A){this.set(Math.pow(this.r,A),Math.pow(this.g,A),Math.pow(this.b,A),this.a)}toLinear(A=2.2){return new W(Math.pow(this.r,A),Math.pow(this.g,A),Math.pow(this.b,A),this.a)}toGamma(A=2.2){return new W(Math.pow(this.r,1/A),Math.pow(this.g,1/A),Math.pow(this.b,1/A),this.a)}luminance(){return .2126*this.r+.7152*this.g+.0722*this.b}lerp(A,g){const I=this.r,C=this.g,e=this.b,i=this.a;return new W(I+g*(A.r-I),C+g*(A.g-C),e+g*(A.b-e),i+g*(A.a-i))}static random(A=0,g=!1){return A>0?new W(A+Math.random()*(1-A),A+Math.random()*(1-A),A+Math.random()*(1-A),g?A+Math.random()*(1-A):1):A<0?new W(Math.random()*(1+A),Math.random()*(1+A),Math.random()*(1+A),g?Math.random()*(1+A):1):new W(Math.random(),Math.random(),Math.random(),g?Math.random():1)}clone(){return new W(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}as3ComponentArray(){return[this.__data[0],this.__data[1],this.__data[2]]}toJSON(){return{r:this.r,g:this.g,b:this.b,a:this.a}}fromJSON(A){this.r=A.r,this.g=A.g,this.b=A.b,this.a=A.a}readBinary(A){this.r=A.loadFloat32(),this.g=A.loadFloat32(),this.b=A.loadFloat32(),this.a=A.loadFloat32()}toCSSString(){return"rgba("+Math.round(this.r*255)+", "+Math.round(this.g*255)+", "+Math.round(this.b*255)+", "+this.a+")"}}class oI{constructor(A=0,g=0,I=0,C=0){if(typeof C=="number"&&!isNaN(C))this.order=C;else switch(C){case"XYZ":this.order=0;break;case"YZX":this.order=1;break;case"ZXY":this.order=2;break;case"XZY":this.order=3;break;case"ZYX":this.order=4;break;case"YXZ":this.order=5;break;default:throw new Error("Invalid Euler Angles Order:"+C)}if(A instanceof ArrayBuffer){const e=A,i=g;this.__data=new Float32Array(e,i,4)}else this.__data=new Float32Array(3),this.__data[0]=A,this.__data[1]=g,this.__data[2]=I}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}get z(){return this.__data[2]}set z(A){this.__data[2]=A}set(A,g,I){this.__data[0]=A,this.__data[1]=g,this.__data[2]=I}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.__data[0],y:this.__data[1],z:this.__data[2],order:this.order}}fromJSON(A){this.__data[0]=A.x,this.__data[1]=A.y,this.__data[2]=A.z,this.order=A.order}}class sg{constructor(A=1,g=0,I=0,C=0,e=1,i=0,s=0,o=0,a=1){if(A instanceof f&&g instanceof f&&I instanceof f)this.__data=new Float32Array(9),this.set(A.x,A.y,A.z,g.x,g.y,g.z,I.x,I.y,I.z);else if(A instanceof Float32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("Deprecated, please use new Vec3(new Float32Array(buffer, byteOffset, 9))");const n=A,B=g;this.__data=new Float32Array(n,B,9)}else this.__data=new Float32Array(9),this.set(A,g,I,C,e,i,s,o,a)}get m00(){return this.__data[0]}set m00(A){this.__data[0]=A}get m01(){return this.__data[1]}set m01(A){this.__data[1]=A}get m02(){return this.__data[2]}set m02(A){this.__data[2]=A}get m10(){return this.__data[3]}set m10(A){this.__data[3]=A}get m11(){return this.__data[4]}set m11(A){this.__data[4]=A}get m12(){return this.__data[5]}set m12(A){this.__data[5]=A}get m20(){return this.__data[6]}set m20(A){this.__data[6]=A}get m21(){return this.__data[7]}set m21(A){this.__data[7]=A}get m22(){return this.__data[8]}set m22(A){this.__data[8]=A}get xAxis(){return new f(new Float32Array(this.__data.buffer,0,3))}set xAxis(A){this.xAxis.set(A.x,A.y,A.z)}get yAxis(){return new f(new Float32Array(this.__data.buffer,3*4,3))}set yAxis(A){this.yAxis.set(A.x,A.y,A.z)}get zAxis(){return new f(new Float32Array(this.__data.buffer,6*4,3))}set zAxis(A){this.zAxis.set(A.x,A.y,A.z)}set(A=1,g=0,I=0,C=0,e=1,i=0,s=0,o=0,a=1){this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C,this.__data[4]=e,this.__data[5]=i,this.__data[6]=s,this.__data[7]=o,this.__data[8]=a}setIdentity(){this.set()}setFromMat(A){this.__data[0]=A.m00,this.__data[1]=A.m01,this.__data[2]=A.m02,this.__data[3]=A.m10,this.__data[4]=A.m11,this.__data[5]=A.m12,this.__data[6]=A.m20,this.__data[7]=A.m21,this.__data[8]=A.m22}setFromDirectionAndUpvector(A,g){const I=A,C=I.length();if(C<Number.EPSILON){this.setIdentity();return}I.scaleInPlace(1/C);const e=g.cross(I),i=e.length();i>Number.EPSILON&&e.scaleInPlace(1/i);const s=I.cross(e),o=s.length();o>Number.EPSILON&&s.scaleInPlace(1/o),this.set(e.x,e.y,e.z,s.x,s.y,s.z,I.x,I.y,I.z)}inverse(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3],e=this.__data[4],i=this.__data[5],s=this.__data[6],o=this.__data[7],a=this.__data[8],n=a*e-i*o,B=-a*C+i*s,d=o*C-e*s;let l=A*n+g*B+I*d;return l?(l=1/l,new sg(n*l,(-a*g+I*o)*l,(i*g-I*e)*l,B*l,(a*A-I*s)*l,(-i*A+I*C)*l,d*l,(-o*A+g*s)*l,(e*A-g*C)*l)):(console.warn("Unable to invert Mat3"),new sg)}invertInPlace(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3],e=this.__data[4],i=this.__data[5],s=this.__data[6],o=this.__data[7],a=this.__data[8],n=a*e-i*o,B=-a*C+i*s,d=o*C-e*s;let l=A*n+g*B+I*d;return l?(l=1/l,this.set(n*l,(-a*g+I*o)*l,(i*g-I*e)*l,B*l,(a*A-I*s)*l,(-i*A+I*C)*l,d*l,(-o*A+g*s)*l,(e*A-g*C)*l),!0):(console.warn("Unable to invert Mat3"),!1)}transpose(){return new sg(this.__data[0],this.__data[3],this.__data[6],this.__data[1],this.__data[4],this.__data[7],this.__data[2],this.__data[5],this.__data[8])}transposeInPlace(){const A=this.__data[1],g=this.__data[2],I=this.__data[5];this.__data[1]=this.__data[3],this.__data[2]=this.__data[6],this.__data[3]=A,this.__data[5]=this.__data[7],this.__data[6]=g,this.__data[7]=I}transformVec3(A){return new f(this.__data[0]*A.x+this.__data[1]*A.y+this.__data[2]*A.z,this.__data[3]*A.x+this.__data[4]*A.y+this.__data[5]*A.z,this.__data[6]*A.x+this.__data[7]*A.y+this.__data[8]*A.z)}clone(){return new sg(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8])}readBinary(A){this.__data=A.loadFloat32Array(9)}toJSON(){return this.__data}fromJSON(A){this.__data=new Float32Array(A)}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}asArray(){return this.__data}}class NA{constructor(A=1,g=0,I=0,C=0,e=0,i=1,s=0,o=0,a=0,n=0,B=1,d=0,l=0,r=0,c=0,h=1){if(A instanceof Float32Array)this.__data=A;else if(A instanceof ArrayBuffer){const E=A,b=g;this.__data=new Float32Array(E,b,16)}else this.__data=new Float32Array(16),this.set(A,g,I,C,e,i,s,o,a,n,B,d,l,r,c,h)}get m00(){return this.__data[0]}set m00(A){this.__data[0]=A}get m01(){return this.__data[1]}set m01(A){this.__data[1]=A}get m02(){return this.__data[2]}set m02(A){this.__data[2]=A}get m03(){return this.__data[3]}set m03(A){this.__data[3]=A}get m10(){return this.__data[4]}set m10(A){this.__data[4]=A}get m11(){return this.__data[5]}set m11(A){this.__data[5]=A}get m12(){return this.__data[6]}set m12(A){this.__data[6]=A}get m13(){return this.__data[7]}set m13(A){this.__data[7]=A}get m20(){return this.__data[8]}set m20(A){this.__data[8]=A}get m21(){return this.__data[9]}set m21(A){this.__data[9]=A}get m22(){return this.__data[10]}set m22(A){this.__data[10]=A}get m23(){return this.__data[11]}set m23(A){this.__data[11]=A}get m30(){return this.__data[12]}set m30(A){this.__data[12]=A}get m31(){return this.__data[13]}set m31(A){this.__data[13]=A}get m32(){return this.__data[14]}set m32(A){this.__data[14]=A}get m33(){return this.__data[15]}set m33(A){this.__data[15]=A}get xAxis(){return new f(new Float32Array(this.__data.buffer,0,3))}set xAxis(A){this.xAxis.set(A.x,A.y,A.z)}get yAxis(){return new f(new Float32Array(this.__data.buffer,4*4,3))}set yAxis(A){this.yAxis.set(A.x,A.y,A.z)}get zAxis(){return new f(new Float32Array(this.__data.buffer,8*4,3))}set zAxis(A){this.zAxis.set(A.x,A.y,A.z)}get translation(){return new f(new Float32Array(this.__data.buffer,12*4,3))}set translation(A){this.translation.set(A.x,A.y,A.z)}set(A=1,g=0,I=0,C=0,e=0,i=1,s=0,o=0,a=0,n=0,B=1,d=0,l=0,r=0,c=0,h=1){this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C,this.__data[4]=e,this.__data[5]=i,this.__data[6]=s,this.__data[7]=o,this.__data[8]=a,this.__data[9]=n,this.__data[10]=B,this.__data[11]=d,this.__data[12]=l,this.__data[13]=r,this.__data[14]=c,this.__data[15]=h}setIdentity(){this.set()}setDataArray(A){this.__data=A}setFromMat4(A){this.__data[0]=A.m00,this.__data[1]=A.m01,this.__data[2]=A.m02,this.__data[3]=A.m03,this.__data[4]=A.m10,this.__data[5]=A.m11,this.__data[6]=A.m12,this.__data[7]=A.m13,this.__data[8]=A.m20,this.__data[9]=A.m21,this.__data[10]=A.m22,this.__data[11]=A.m23,this.__data[12]=A.m30,this.__data[13]=A.m31,this.__data[14]=A.m32,this.__data[15]=A.m33}toMat3(){return new sg(this.__data[0],this.__data[1],this.__data[2],this.__data[4],this.__data[5],this.__data[6],this.__data[8],this.__data[9],this.__data[10])}transposeInPlace(){const A=this.__data[1],g=this.__data[2],I=this.__data[3],C=this.__data[6],e=this.__data[7],i=this.__data[11];this.__data[1]=this.__data[4],this.__data[2]=this.__data[8],this.__data[3]=this.__data[12],this.__data[4]=A,this.__data[6]=this.__data[9],this.__data[7]=this.__data[13],this.__data[8]=g,this.__data[9]=C,this.__data[11]=this.__data[14],this.__data[12]=I,this.__data[13]=e,this.__data[14]=i}transpose(){return new NA(this.__data[0],this.__data[4],this.__data[8],this.__data[12],this.__data[1],this.__data[5],this.__data[9],this.__data[13],this.__data[2],this.__data[6],this.__data[10],this.__data[14],this.__data[3],this.__data[7],this.__data[11],this.__data[15])}inverse(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3],e=this.__data[4],i=this.__data[5],s=this.__data[6],o=this.__data[7],a=this.__data[8],n=this.__data[9],B=this.__data[10],d=this.__data[11],l=this.__data[12],r=this.__data[13],c=this.__data[14],h=this.__data[15],E=A*i-g*e,b=A*s-I*e,m=A*o-C*e,G=g*s-I*i,y=g*o-C*i,Q=I*o-C*s,u=a*r-n*l,Z=a*c-B*l,w=a*h-d*l,R=n*c-B*r,S=n*h-d*r,H=B*h-d*c;let X=E*H-b*S+m*R+G*w-y*Z+Q*u;return X?(X=1/X,new NA((i*H-s*S+o*R)*X,(I*S-g*H-C*R)*X,(r*Q-c*y+h*G)*X,(B*y-n*Q-d*G)*X,(s*w-e*H-o*Z)*X,(A*H-I*w+C*Z)*X,(c*m-l*Q-h*b)*X,(a*Q-B*m+d*b)*X,(e*S-i*w+o*u)*X,(g*w-A*S-C*u)*X,(l*y-r*m+h*E)*X,(n*m-a*y-d*E)*X,(i*Z-e*R-s*u)*X,(A*R-g*Z+I*u)*X,(r*b-l*G-c*E)*X,(a*G-n*b+B*E)*X)):(console.warn("Unable to invert Mat4"),this)}invertInPlace(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3],e=this.__data[4],i=this.__data[5],s=this.__data[6],o=this.__data[7],a=this.__data[8],n=this.__data[9],B=this.__data[10],d=this.__data[11],l=this.__data[12],r=this.__data[13],c=this.__data[14],h=this.__data[15],E=A*i-g*e,b=A*s-I*e,m=A*o-C*e,G=g*s-I*i,y=g*o-C*i,Q=I*o-C*s,u=a*r-n*l,Z=a*c-B*l,w=a*h-d*l,R=n*c-B*r,S=n*h-d*r,H=B*h-d*c;let X=E*H-b*S+m*R+G*w-y*Z+Q*u;return X?(X=1/X,this.set((i*H-s*S+o*R)*X,(I*S-g*H-C*R)*X,(r*Q-c*y+h*G)*X,(B*y-n*Q-d*G)*X,(s*w-e*H-o*Z)*X,(A*H-I*w+C*Z)*X,(c*m-l*Q-h*b)*X,(a*Q-B*m+d*b)*X,(e*S-i*w+o*u)*X,(g*w-A*S-C*u)*X,(l*y-r*m+h*E)*X,(n*m-a*y-d*E)*X,(i*Z-e*R-s*u)*X,(A*R-g*Z+I*u)*X,(r*b-l*G-c*E)*X,(a*G-n*b+B*E)*X),!0):(console.warn("Unable to invert Mat4"),!1)}setInverse(A){const g=A.__data[0],I=A.__data[1],C=A.__data[2],e=A.__data[3],i=A.__data[4],s=A.__data[5],o=A.__data[6],a=A.__data[7],n=A.__data[8],B=A.__data[9],d=A.__data[10],l=A.__data[11],r=A.__data[12],c=A.__data[13],h=A.__data[14],E=A.__data[15],b=g*s-I*i,m=g*o-C*i,G=g*a-e*i,y=I*o-C*s,Q=I*a-e*s,u=C*a-e*o,Z=n*c-B*r,w=n*h-d*r,R=n*E-l*r,S=B*h-d*c,H=B*E-l*c,X=d*E-l*h;let F=b*X-m*H+G*S+y*R-Q*w+u*Z;if(!F)throw new Error("Unable to invert Mat4");F=1/F,this.set((s*X-o*H+a*S)*F,(C*H-I*X-e*S)*F,(c*u-h*Q+E*y)*F,(d*Q-B*u-l*y)*F,(o*R-i*X-a*w)*F,(g*X-C*R+e*w)*F,(h*G-r*u-E*m)*F,(n*u-d*G+l*m)*F,(i*H-s*R+a*Z)*F,(I*R-g*H-e*Z)*F,(r*Q-c*G+E*b)*F,(B*G-n*Q-l*b)*F,(s*w-i*S-o*Z)*F,(g*S-I*w+C*Z)*F,(c*m-r*y-h*b)*F,(n*y-B*m+d*b)*F)}multiply(A){const g=this.__data[0],I=this.__data[1],C=this.__data[2],e=this.__data[3],i=this.__data[4],s=this.__data[5],o=this.__data[6],a=this.__data[7],n=this.__data[8],B=this.__data[9],d=this.__data[10],l=this.__data[11],r=this.__data[12],c=this.__data[13],h=this.__data[14],E=this.__data[15],b=A.asArray();let m=b[0],G=b[1],y=b[2],Q=b[3];const u=new NA;return u.m00=m*g+G*i+y*n+Q*r,u.m01=m*I+G*s+y*B+Q*c,u.m02=m*C+G*o+y*d+Q*h,u.m03=m*e+G*a+y*l+Q*E,m=b[4],G=b[5],y=b[6],Q=b[7],u.m10=m*g+G*i+y*n+Q*r,u.m11=m*I+G*s+y*B+Q*c,u.m12=m*C+G*o+y*d+Q*h,u.m13=m*e+G*a+y*l+Q*E,m=b[8],G=b[9],y=b[10],Q=b[11],u.m20=m*g+G*i+y*n+Q*r,u.m21=m*I+G*s+y*B+Q*c,u.m22=m*C+G*o+y*d+Q*h,u.m23=m*e+G*a+y*l+Q*E,m=b[12],G=b[13],y=b[14],Q=b[15],u.m30=m*g+G*i+y*n+Q*r,u.m31=m*I+G*s+y*B+Q*c,u.m32=m*C+G*o+y*d+Q*h,u.m33=m*e+G*a+y*l+Q*E,u}multiplyInPlace(A){const g=this.asArray(),I=g[0],C=g[1],e=g[2],i=g[3],s=g[4],o=g[5],a=g[6],n=g[7],B=g[8],d=g[9],l=g[10],r=g[11],c=g[12],h=g[13],E=g[14],b=g[15],m=A.asArray();let G=m[0],y=m[1],Q=m[2],u=m[3];return this.m00=G*I+y*s+Q*B+u*c,this.m01=G*C+y*o+Q*d+u*h,this.m02=G*e+y*a+Q*l+u*E,this.m03=G*i+y*n+Q*r+u*b,G=m[4],y=m[5],Q=m[6],u=m[7],this.m10=G*I+y*s+Q*B+u*c,this.m11=G*C+y*o+Q*d+u*h,this.m12=G*e+y*a+Q*l+u*E,this.m13=G*i+y*n+Q*r+u*b,G=m[8],y=m[9],Q=m[10],u=m[11],this.m20=G*I+y*s+Q*B+u*c,this.m21=G*C+y*o+Q*d+u*h,this.m22=G*e+y*a+Q*l+u*E,this.m23=G*i+y*n+Q*r+u*b,G=m[12],y=m[13],Q=m[14],u=m[15],this.m30=G*I+y*s+Q*B+u*c,this.m31=G*C+y*o+Q*d+u*h,this.m32=G*e+y*a+Q*l+u*E,this.m33=G*i+y*n+Q*r+u*b,this}postMultiplyInPlace(A){const g=A.asArray(),I=g[0],C=g[1],e=g[2],i=g[3],s=g[4],o=g[5],a=g[6],n=g[7],B=g[8],d=g[9],l=g[10],r=g[11],c=g[12],h=g[13],E=g[14],b=g[15],m=this.asArray();let G=m[0],y=m[1],Q=m[2],u=m[3];return this.m00=G*I+y*s+Q*B+u*c,this.m01=G*C+y*o+Q*d+u*h,this.m02=G*e+y*a+Q*l+u*E,this.m03=G*i+y*n+Q*r+u*b,G=m[4],y=m[5],Q=m[6],u=m[7],this.m10=G*I+y*s+Q*B+u*c,this.m11=G*C+y*o+Q*d+u*h,this.m12=G*e+y*a+Q*l+u*E,this.m13=G*i+y*n+Q*r+u*b,G=m[8],y=m[9],Q=m[10],u=m[11],this.m20=G*I+y*s+Q*B+u*c,this.m21=G*C+y*o+Q*d+u*h,this.m22=G*e+y*a+Q*l+u*E,this.m23=G*i+y*n+Q*r+u*b,G=m[12],y=m[13],Q=m[14],u=m[15],this.m30=G*I+y*s+Q*B+u*c,this.m31=G*C+y*o+Q*d+u*h,this.m32=G*e+y*a+Q*l+u*E,this.m33=G*i+y*n+Q*r+u*b,this}translateInPlace(A){const g=this.__data,I=A.x,C=A.y,e=A.z;return g[12]=g[0]*I+g[4]*C+g[8]*e+g[12],g[13]=g[1]*I+g[5]*C+g[9]*e+g[13],g[14]=g[2]*I+g[6]*C+g[10]*e+g[14],g[15]=g[3]*I+g[7]*C+g[11]*e+g[15],this}setLookAt(A,g,I){const C=A.subtract(g),e=C.length();if(e<Number.EPSILON){this.setIdentity();return}C.scaleInPlace(1/e);const i=I.cross(C),s=i.length();s>Number.EPSILON&&i.scaleInPlace(1/s);const o=C.cross(i),a=o.length();a>Number.EPSILON&&o.scaleInPlace(1/a),this.set(i.x,i.y,i.z,0,o.x,o.y,o.z,0,C.x,C.y,C.z,0,A.x,A.y,A.z,1)}setRotation(A,g){const I=A.length();if(Math.abs(I)<Number.EPSILON)return null;const C=A.x/I,e=A.y/I,i=A.z/I,s=Math.sin(g),o=Math.cos(g),a=1-o,n=this.__data;return n[0]=C*C*a+o,n[1]=e*C*a+i*s,n[2]=i*C*a-e*s,n[3]=0,n[4]=C*e*a-i*s,n[5]=e*e*a+o,n[6]=i*e*a+C*s,n[7]=0,n[8]=C*i*a+e*s,n[9]=e*i*a-C*s,n[10]=i*i*a+o,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,this}setXRotation(A){const g=Math.sin(A),I=Math.cos(A),C=this.__data;return C[0]=1,C[1]=0,C[2]=0,C[3]=0,C[4]=0,C[5]=I,C[6]=g,C[7]=0,C[8]=0,C[9]=-g,C[10]=I,C[11]=0,C[12]=0,C[13]=0,C[14]=0,C[15]=1,this}setYRotation(A){const g=Math.sin(A),I=Math.cos(A),C=this.__data;return C[0]=I,C[1]=0,C[2]=-g,C[3]=0,C[4]=0,C[5]=1,C[6]=0,C[7]=0,C[8]=g,C[9]=0,C[10]=I,C[11]=0,C[12]=0,C[13]=0,C[14]=0,C[15]=1,this}setZRotation(A){const g=Math.sin(A),I=Math.cos(A),C=this.__data;return C[0]=I,C[1]=g,C[2]=0,C[3]=0,C[4]=-g,C[5]=I,C[6]=0,C[7]=0,C[8]=0,C[9]=0,C[10]=1,C[11]=0,C[12]=0,C[13]=0,C[14]=0,C[15]=1,this}transformVec4(A){const g=this.__data,I=A.x,C=A.y,e=A.z,i=A.t;return new cA(g[0]*I+g[4]*C+g[8]*e+g[12]*i,g[1]*I+g[5]*C+g[9]*e+g[13]*i,g[2]*I+g[6]*C+g[10]*e+g[14]*i,g[3]*I+g[7]*C+g[11]*e+g[15]*i)}transformVec3(A){const g=this.__data,I=A.x,C=A.y,e=A.z;return new f(g[0]*I+g[4]*C+g[8]*e+g[12],g[1]*I+g[5]*C+g[9]*e+g[13],g[2]*I+g[6]*C+g[10]*e+g[14])}rotateVec3(A){const g=this.__data,I=A.x,C=A.y,e=A.z;return new f(g[0]*I+g[4]*C+g[8]*e,g[1]*I+g[5]*C+g[9]*e,g[2]*I+g[6]*C+g[10]*e)}setPerspectiveMatrix(A,g,I,C){const e=Math.tan(Math.PI*.5-.5*A),i=1/(I-C);this.set(e/g,0,0,0,0,e,0,0,0,0,(I+C)*i,-1,0,0,I*C*i*2,0)}setOrthographicMatrix(A,g,I,C,e,i){const s=1/(A-g),o=1/(I-C),a=1/(e-i);this.set(-2*s,0,0,0,0,-2*o,0,0,0,0,2*a,0,(A+g)*s,(C+I)*o,(i+e)*a,1)}setScale(A,g,I){A instanceof f?this.set(A.x,0,0,0,0,A.y,0,0,0,0,A.z,0,0,0,0,1):this.set(A,0,0,0,0,g,0,0,0,0,I,0,0,0,0,1)}setFromMat3x4Array(A){this.set(A[0],A[1],A[2],0,A[3],A[4],A[5],0,A[6],A[7],A[8],0,A[9],A[10],A[11],1)}clone(){return new NA(this.__data[0],this.__data[1],this.__data[2],this.__data[3],this.__data[4],this.__data[5],this.__data[6],this.__data[7],this.__data[8],this.__data[9],this.__data[10],this.__data[11],this.__data[12],this.__data[13],this.__data[14],this.__data[15])}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return this.__data}fromJSON(A){this.__data=new Float32Array(A)}readBinary(A){this.__data=A.loadFloat32Array(16)}asArray(){return this.__data}}class BA{constructor(A=0,g=0,I=0,C=1){if(A instanceof Float32Array)this.__data=A;else if(A instanceof ArrayBuffer){console.warn("deprecated, please use new Vec4(new Float32Array(buffer, byteOffset, 4))");const e=A,i=g;this.__data=new Float32Array(e,i,4)}else this.__data=new Float32Array(4),typeof A=="object"?(this.__data[0]=0,this.__data[1]=0,this.__data[2]=0,this.__data[3]=1,this.fromJSON(A)):(this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C)}get x(){return this.__data[0]}set x(A){this.__data[0]=A}get y(){return this.__data[1]}set y(A){this.__data[1]=A}get z(){return this.__data[2]}set z(A){this.__data[2]=A}get w(){return this.__data[3]}set w(A){this.__data[3]=A}set(A,g,I,C){this.__data[0]=A,this.__data[1]=g,this.__data[2]=I,this.__data[3]=C}setDataArray(A){this.__data=A}setFromOther(A){this.__data[0]=A.x,this.__data[1]=A.y,this.__data[2]=A.z,this.__data[3]=A.w}setFromEulerAngles(A){const g=new f;switch(A.order){case 0:g.set(A.x,-A.y,A.z);break;case 1:g.set(A.y,-A.z,A.x);break;case 2:g.set(A.z,-A.x,A.y);break;case 3:g.set(A.x,A.z,A.y);break;case 4:g.set(A.z,A.y,A.x);break;case 5:g.set(A.y,A.x,A.z);break;default:throw new Error(`Invalid EulerAngles order: ${A.order}`)}const I=g.x*.5,C=g.y*.5,e=g.z*.5,i=Math.cos(I),s=Math.cos(C),o=Math.cos(e),a=Math.sin(I),n=Math.sin(C),B=Math.sin(e),d=i*o,l=i*B,r=a*o,c=a*B,h=s*r-n*l,E=s*c+n*d,b=s*l-n*r;switch(this.w=s*d+n*c,A.order){case 0:this.x=h,this.y=-E,this.z=b;break;case 1:this.x=b,this.y=h,this.z=-E;break;case 2:this.x=-E,this.y=b,this.z=h;break;case 3:this.x=h,this.y=b,this.z=E;break;case 4:this.x=b,this.y=E,this.z=h;break;case 5:this.x=E,this.y=h,this.z=b;break;default:throw new Error(`Invalid EulerAngles order: ${A.order}`)}}toEulerAngles(A){const g=new f;switch(A){case 0:g.set(this.z,this.x,this.y);break;case 1:g.set(this.x,this.y,this.z);break;case 2:g.set(this.y,this.z,this.x);break;case 3:g.set(this.y,-this.x,this.z);break;case 4:g.set(this.x,-this.z,this.y);break;case 5:g.set(this.z,-this.y,this.x);break;default:throw new Error("Invalid rotation order:"+A)}const I=new f,C=g.x*g.y+g.z*this.w;if(C>.49999)I.y=2*Math.atan2(g.x,this.w),I.z=Math.PI*.5,I.x=0;else if(C<-.49999)I.y=-2*Math.atan2(g.x,this.w),I.z=Math.PI*-.5,I.x=0;else{const e=g.x*g.x,i=g.y*g.y,s=g.z*g.z;I.y=Math.atan2(2*g.y*this.w-2*g.x*g.z,1-2*i-2*s),I.z=Math.asin(2*C),I.x=Math.atan2(2*g.x*this.w-2*g.y*g.z,1-2*e-2*s)}switch(A){case 0:return new oI(I.y,I.z,I.x,A);case 1:return new oI(I.x,I.y,I.z,A);case 2:return new oI(I.z,I.x,I.y,A);case 3:return new oI(-I.y,I.x,I.z,A);case 4:return new oI(I.x,I.z,-I.y,A);case 5:return new oI(I.z,-I.y,I.x,A)}}setFromAxisAndAngle(A,g){const I=g/2,C=A.normalize().scale(Math.sin(I));this.set(C.x,C.y,C.z,Math.cos(I))}setFromDirectionAndUpvector(A,g){const I=new sg;I.setFromDirectionAndUpvector(A,g),this.setFromMat3(I)}setFrom2Vectors(A,g){const I=A.cross(g),C=A.dot(g),e=Math.sqrt((1+C)*2);this.set(I.x/e,I.y/e,I.z/e,e/2),this.normalizeInPlace()}setFromMat3(A){const g=A.asArray(),I=g[0]+g[4]+g[8];let C;if(I>0)C=Math.sqrt(I+1),this.__data[3]=.5*C,C=.5/C,this.__data[0]=(g[5]-g[7])*C,this.__data[1]=(g[6]-g[2])*C,this.__data[2]=(g[1]-g[3])*C;else{let e=0;g[4]>g[0]&&(e=1),g[8]>g[e*3+e]&&(e=2);const i=(e+1)%3,s=(e+2)%3;C=Math.sqrt(g[e*3+e]-g[i*3+i]-g[s*3+s]+1),this.__data[e]=.5*C,C=.5/C,this.__data[3]=(g[i*3+s]-g[s*3+i])*C,this.__data[i]=(g[i*3+e]+g[e*3+i])*C,this.__data[s]=(g[s*3+e]+g[e*3+s])*C}this.normalizeInPlace()}setFromMat4(A){const g=A.asArray(),I=g[0]+g[5]+g[10];let C;if(I>0)C=Math.sqrt(I+1),this.__data[3]=.5*C,C=.5/C,this.__data[0]=(g[6]-g[9])*C,this.__data[1]=(g[8]-g[2])*C,this.__data[2]=(g[1]-g[4])*C;else{let e=0;g[5]>g[0]&&(e=1),g[10]>g[e*4+e]&&(e=2);const i=(e+1)%3,s=(e+2)%3;C=Math.sqrt(g[e*4+e]-g[i*4+i]-g[s*4+s]+1),this.__data[e]=.5*C,C=.5/C,this.__data[3]=(g[i*4+s]-g[s*4+i])*C,this.__data[i]=(g[i*4+e]+g[e*4+i])*C,this.__data[s]=(g[s*4+e]+g[e*4+s])*C}this.normalizeInPlace()}isIdentity(){return this.getAngle()<Number.EPSILON}getAngle(){return Math.acos(this.w)*2}isEqual(A){return this.x==A.x&&this.y==A.y&&this.z==A.z&&this.w==A.w}notEquals(A){return this.x!=A.x&&this.y!=A.y&&this.z!=A.z&&this.w!=A.w}approxEqual(A,g=Number.EPSILON){return Math.abs(this.x-A.x)<g&&Math.abs(this.y-A.y)<g&&Math.abs(this.z-A.z)<g&&Math.abs(this.w-A.w)<g}add(A){return new BA(this.x+A.x,this.y+A.y,this.z+A.z,this.w+A.w)}addInPlace(A){this.x+=A.x,this.y+=A.y,this.z+=A.z,this.w+=A.w}subtract(A){return new BA(this.x-A.x,this.y-A.y,this.z-A.z,this.w-A.w)}scale(A){return new BA(this.x*A,this.y*A,this.z*A,this.w*A)}scaleInPlace(A){this.x*=A,this.y*=A,this.z*=A,this.w*=A}length(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];return Math.sqrt(A*A+g*g+I*I+C*C)}lengthSquared(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];return A*A+g*g+I*I+C*C}normalize(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];let e=A*A+g*g+I*I+C*C;return e<Number.EPSILON?new BA:(e=1/Math.sqrt(e),new BA(A*e,g*e,I*e,C*e))}normalizeInPlace(){const A=this.__data[0],g=this.__data[1],I=this.__data[2],C=this.__data[3];let e=A*A+g*g+I*I+C*C;e<Number.EPSILON||(e=1/Math.sqrt(e),this.set(A*e,g*e,I*e,C*e))}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z+this.w*A.w}cross(A){const g=this.x,I=this.y,C=this.z,e=this.w,i=A.x,s=A.y,o=A.z,a=A.w;return new BA(I*o-C*s,C*a-e*o,e*i-g*a,g*s-I*i)}conjugate(){return new BA(-this.x,-this.y,-this.z,this.w)}inverse(){return this.conjugate()}alignWith(A){this.dot(A)<0&&this.set(-this.x,-this.y,-this.z,-this.w)}multiply(A){const g=this.__data[0],I=this.__data[1],C=this.__data[2],e=this.__data[3],i=A.__data[0],s=A.__data[1],o=A.__data[2],a=A.__data[3];return new BA(g*a+e*i+I*o-C*s,I*a+e*s+C*i-g*o,C*a+e*o+g*s-I*i,e*a-g*i-I*s-C*o)}multiplyInPlace(A){const g=this.__data[0],I=this.__data[1],C=this.__data[2],e=this.__data[3],i=A.__data[0],s=A.__data[1],o=A.__data[2],a=A.__data[3];this.set(g*a+e*i+I*o-C*s,I*a+e*s+C*i-g*o,C*a+e*o+g*s-I*i,e*a-g*i-I*s-C*o)}rotateVec3(A){const g=new BA(A.x,A.y,A.z,0),I=this.multiply(g).multiply(this.conjugate());return new f(I.x,I.y,I.z)}rotateX(A){A*=.5;const g=this.x,I=this.y,C=this.z,e=this.w,i=Math.sin(A),s=Math.cos(A);this.x=g*s+e*i,this.y=I*s+C*i,this.z=C*s-I*i,this.w=e*s-g*i}rotateY(A){A*=.5;const g=this.x,I=this.y,C=this.z,e=this.w,i=Math.sin(A),s=Math.cos(A);this.x=g*s-C*i,this.y=I*s+e*i,this.z=C*s+g*i,this.w=e*s-I*i}rotateZ(A){A*=.5;const g=this.x,I=this.y,C=this.z,e=this.w,i=Math.sin(A),s=Math.cos(A);this.x=g*s+I*i,this.y=I*s-g*i,this.z=C*s+e*i,this.w=e*s-C*i}toMat3(){const A=this.x,g=this.y,I=this.z,C=this.w,e=A+A,i=g+g,s=I+I,o=A*e,a=g*e,n=g*i,B=I*e,d=I*i,l=I*s,r=C*e,c=C*i,h=C*s,E=new sg;return E.m00=1-n-l,E.m10=a-h,E.m20=B+c,E.m01=a+h,E.m11=1-o-l,E.m21=d-r,E.m02=B-c,E.m12=d+r,E.m22=1-o-n,E}getXaxis(){const A=this.x*this.y,g=this.x*this.z,I=this.y*this.y,C=this.y*this.w,e=this.z*this.z,i=this.z*this.w;return new f(1-2*(e+I),2*(A+i),2*(g-C))}getYaxis(){const A=this.x*this.x,g=this.x*this.y,I=this.x*this.w,C=this.y*this.z,e=this.z*this.z,i=this.z*this.w;return new f(2*(g-i),1-2*(e+A),2*(C+I))}getZaxis(){const A=this.x*this.x,g=this.x*this.z,I=this.x*this.w,C=this.y*this.y,e=this.y*this.z,i=this.y*this.w;return new f(2*(i+g),2*(e-I),1-2*(C+A))}mirror(A){switch(A){case 0:return new BA(this.z,this.w,this.x,this.y);case 1:return new BA(-this.w,this.z,this.y,-this.x);case 2:return new BA(this.x,this.y,this.z,-this.w);case 0:default:return new BA(this.z,this.w,this.x,this.y)}}toMat4(){const A=this.x,g=this.y,I=this.z,C=this.w,e=A+A,i=g+g,s=I+I,o=A*e,a=g*e,n=g*i,B=I*e,d=I*i,l=I*s,r=C*e,c=C*i,h=C*s,E=new NA;return E.m00=1-n-l,E.m10=a-h,E.m20=B+c,E.m01=a+h,E.m11=1-o-l,E.m21=d-r,E.m02=B-c,E.m12=d+r,E.m22=1-o-n,E}lerp(A,g){const I=new BA(this.x+g*(A.x-this.x),this.y+g*(A.y-this.y),this.z+g*(A.z-this.z),this.w+g*(A.w-this.w));return I.normalizeInPlace(),I}slerp(A,g){const I=this.dot(A);if(I>.999)return this;const C=Math.acos(I),e=Math.sin(C),i=Math.sin(g*C),o=Math.sin((1-g)*C)/e,a=i/e,n=new BA(o*this.x+a*A.x,o*this.y+a*A.y,o*this.z+a*A.z,o*this.w+a*A.w);return n.normalizeInPlace(),n}clone(){return new BA(this.__data[0],this.__data[1],this.__data[2],this.__data[3])}asArray(){return this.__data}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}toJSON(){return{x:this.x,y:this.y,z:this.z,w:this.w}}fromJSON(A){this.__data[0]=A.x,this.__data[1]=A.y,this.__data[2]=A.z,this.__data[3]=A.w,this.normalizeInPlace()}readBinary(A){this.x=A.loadFloat32(),this.y=A.loadFloat32(),this.z=A.loadFloat32(),this.w=A.loadFloat32()}}class P{static radToDeg(A){return A/(Math.PI/180)}static degToRad(A){return A*(Math.PI/180)}static isNumeric(A){return!isNaN(parseFloat(A))&&isFinite(A)}static randomInt(A,g){return A=Math.ceil(A),g=Math.floor(g),Math.floor(Math.random()*(g-A))+A}static lerp(A,g,I){return A+I*(g-A)}static clamp(A,g,I){return Math.min(Math.max(A,g),I)}static nearestPow2(A){return Math.pow(2,Math.round(Math.log(A)/Math.log(2)))}static nearestPow10(A){return Math.pow(10,Math.round(Math.log10(A)/Math.log10(10)))}static nextPow2(A){if(this.fract(Math.log2(A))==0)return A;let g=0;for(;A>0;)g++,A=A>>1;return 1<<g}static fract(A){return A==0?0:A<0?A>-1?-A:-A%Math.floor(-A):A<1?A:A%Math.floor(A)}static remap(A,g,I,C,e){return C+(e-C)*((A-g)/(I-g))}static smoothStep(A,g,I){const C=this.clamp((I-A)/(g-A),0,1);return C*C*(3-2*C)}static linStep(A,g,I){return this.clamp((I-A)/(g-A),0,1)}static decode16BitFloatFrom2xUInt8(A){const g=A[0],I=A[1],C=g&128?1:-1,e=(g&120)>>3,i=g&7;let s=e==0?0:2048;const o=s+(i<<8)+I;s=e==0?1:0;const a=Math.pow(2,e+s-16);return C*o*a}static encode16BitFloatInto2xUInt8(A){const g=new Uint8Array(2),I=A>=0?128:0;A=Math.abs(A);let C=15,e=1024;for(let n=15;n>0;n--)A<e&&(e/=2,C--);let i;C==0?i=A/e/2:i=(A-e)/e;const s=Math.round(i*2048),o=s/256,a=s-o*256;return g[0]=I+C*8+o,g[1]=a,A>=2048&&(g[0]=255),g}static encode16BitFloat(A){const g=new Float32Array(1);g[0]=A;const I=new Int32Array(g.buffer);return(e=>{let i=e>>16&32768,s=e>>12&2047;const o=e>>23&255;return o<103?i:o>142?(i|=31744,i|=(o==255?0:1)&&e&8388607,i):o<113?(s|=2048,i|=(s>>114-o)+(s>>113-o&1),i):(i|=o-112<<10|s>>1,i+=s&1,i)})(I[0])}static decode16BitFloat(A){const g=(A&32768)>>15,I=(A&31744)>>10,C=A&1023;return I==0?(g?-1:1)*Math.pow(2,-14)*(C/Math.pow(2,10)):I==31?C?NaN:(g?-1:1)*(1/0):(g?-1:1)*Math.pow(2,I-15)*(1+C/Math.pow(2,10))}static convertFloat32ArrayToUInt16Array(A){const g=new Uint16Array(A.length),I=new Int32Array(A.buffer),C=e=>{let i=e>>16&32768,s=e>>12&2047;const o=e>>23&255;return o<103?i:o>142?(i|=31744,i|=(o==255?0:1)&&e&8388607,i):o<113?(s|=2048,i|=(s>>114-o)+(s>>113-o&1),i):(i|=o-112<<10|s>>1,i+=s&1,i)};for(let e=0;e<A.length;e++)g[e]=C(I[e]);return g}}class rg{constructor(A,g){A instanceof f?this.start=A:this.start=new f,g instanceof f?this.dir=g:this.dir=new f}closestPoint(A){const I=A.subtract(this.start).dot(this.dir);if(I<Number.EPSILON)return 0;const C=this.dir.dot(this.dir);return C<Number.EPSILON?0:I/C}closestPointOnLineSegment(A,g){const I=this.dir,C=g.subtract(A),e=C.length();C.normalizeInPlace();const i=this.start.subtract(A),s=I.dot(I),o=I.dot(C),a=C.dot(C),n=I.dot(i),B=C.dot(i);if(s==0&&a==0)return[this.start.distanceTo(A),0];if(s==0)return[0,0];if(a==0)return[this.closestPoint(A),0];const d=s*a-o*o;let l,r;return d<.001?(l=0,o>a?r=n/o:r=B/a):(l=(o*B-a*n)/d,r=(s*B-o*n)/d),[l,P.clamp(r/e,0,1)]}pointAtDist(A){return this.start.add(this.dir.scale(A))}intersectRayVector(A){const g=this.dir,I=A.dir,C=this.start.subtract(A.start),e=g.dot(g),i=g.dot(I),s=I.dot(I),o=g.dot(C),a=I.dot(C);if(e==0&&s==0)return this.start.distanceTo(A.start);if(e==0)return A.closestPoint(this.start);if(s==0)return this.closestPoint(A.start);const n=e*s-i*i;let B,d;return n<.001?(B=0,i>s?d=o/i:d=a/s):(B=(i*a-s*o)/n,d=(e*a-i*o)/n),[B,d]}intersectRayPlane(A){const g=this.start.subtract(A.start),I=A.dir.dot(this.dir),C=-A.dir.dot(g);if(Math.abs(I)<Number.PRECISION)return C==0,-1;const e=C/I;return e<-Number.PRECISION?-1:e}intersectRayBox3(A,g=0){const I=new f(1/this.dir.x,1/this.dir.y,1/this.dir.z),C=[];C[0]=I.x<0?1:0,C[1]=I.y<0?1:0,C[2]=I.z<0?1:0;const e=[];if(g>0){const d=A.diagonal();d.normalizeInPlace(),d.scaleInPlace(g),e[0]=A.p0.subtract(d),e[1]=A.p1.add(d)}else e[0]=A.p0,e[1]=A.p1;let i=(e[C[0]].x-this.start.x)*I.x,s=(e[1-C[0]].x-this.start.x)*I.x;const o=(e[C[1]].y-this.start.y)*I.y,a=(e[1-C[1]].y-this.start.y)*I.y;if(i>a||o>s)return!1;o>i&&(i=o),a<s&&(s=a);const n=(e[C[2]].z-this.start.z)*I.z,B=(e[1-C[2]].z-this.start.z)*I.z;return i>B||n>s?!1:(n>i&&(i=n),B<s&&(s=B),!0)}clone(){return new rg(this.start.clone(),this.dir.clone())}toJSON(){return{start:this.start.toJSON(),dir:this.dir.toJSON()}}fromJSON(A){this.start.fromJSON(A.start),this.dir.fromJSON(A.dir)}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}}class D{constructor(A,g,I){if(A instanceof Float32Array){this.setFromFloat32Array(A);return}if(A instanceof f)this.tr=A;else if(A instanceof BA&&g==null&&I==null){this.tr=new f,this.ori=A,this.sc=new f(1,1,1);return}else this.tr=new f;g instanceof BA?this.ori=g:this.ori=new BA,I instanceof f?this.sc=I:this.sc=new f(1,1,1)}set(A,g,I){this.tr=A,this.ori=g,I instanceof f&&(this.sc=I)}setFromOther(A){this.tr=A.tr,this.ori=A.ori,this.sc=A.sc}isIdentity(){return this.tr.isNull()&&this.ori.isIdentity()&&this.sc.is111()}isEqual(A){return this.tr.isEqual(A.tr)&&this.ori.isEqual(A.ori)&&this.sc.isEqual(A.sc)}approxEqual(A,g=Number.EPSILON){return(A.tr?this.tr.approxEqual(A.tr,g):!0)&&(A.ori?this.ori.approxEqual(A.ori,g):!0)&&(A.sc?this.sc.approxEqual(A.sc,g):!0)}setLookAt(A,g,I){const C=A.subtract(g);if(C.length()<Number.EPSILON)throw new Error("Invalid dir");this.ori.setFromDirectionAndUpvector(C,I),this.tr=A}multiply(A){let g=this.sc;if(Math.abs(this.sc.y-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.y)>.001){const C=this.ori.toMat4(),i=new NA(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1).multiply(C);g=new f(i.xAxis.length(),i.yAxis.length(),i.zAxis.length())}return new D(this.tr.add(this.ori.rotateVec3(this.sc.multiply(A.tr))),this.ori.multiply(A.ori),g.multiply(A.sc))}inverse(){const A=new D;if(A.ori=this.ori.inverse(),Math.abs(this.sc.y-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.x)>.001||Math.abs(this.sc.z-this.sc.y)>.001){const g=A.ori.toMat4(),C=new NA(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1).multiply(g);A.sc=new f(1/C.xAxis.length(),1/C.yAxis.length(),1/C.zAxis.length())}else A.sc=this.sc.inverse();return A.tr=A.ori.rotateVec3(this.tr.negate().multiply(A.sc)),A}transformVec3(A){return this.tr.add(this.ori.rotateVec3(this.sc.multiply(A)))}toMat4(){const A=new NA(this.sc.x,0,0,0,0,this.sc.y,0,0,0,0,this.sc.z,0,0,0,0,1),g=this.ori.toMat4(),I=new NA;return I.translation=this.tr,I.multiply(g).multiply(A)}setFromMat4(A){this.tr=A.translation,this.ori.setFromMat4(A)}setFromFloat32Array(A){if(A.length==7){this.tr=new f(new Float32Array(A.buffer,A.byteOffset,3)),this.ori=new BA(new Float32Array(A.buffer,A.byteOffset+12,4)),this.sc=new f(1,1,1);return}else if(A.length==8){this.tr=new f(new Float32Array(A.buffer,A.byteOffset,3)),this.ori=new BA(new Float32Array(A.buffer,A.byteOffset+12,4));const g=A[7];this.sc=new f(g,g,g);return}else if(A.length==10){this.tr=new f(new Float32Array(A.buffer,A.byteOffset,3)),this.ori=new BA(new Float32Array(A.buffer,A.byteOffset+12,4)),this.sc=new f(new Float32Array(A.buffer,A.byteOffset+21,3));return}else console.warn("unitialized: float32array.length == ",A.length)}clone(){return new D(this.tr.clone(),this.ori.clone(),this.sc.clone())}toJSON(){return{tr:this.tr.toJSON(),ori:this.ori.toJSON(),sc:this.sc.toJSON()}}fromJSON(A){this.tr.fromJSON(A.tr),this.ori.fromJSON(A.ori),A.sc&&this.sc.fromJSON(A.sc)}readBinary(A){this.tr.readBinary(A),this.ori.readBinary(A),this.sc.readBinary(A)}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}}class LI{constructor(A,g){A instanceof K?this.p0=A:this.p0=new K(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),g instanceof K?this.p1=g:this.p1=new K(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY)}set(A,g){this.p0=A,this.p1=g}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY}addPoint(A){(this.p0.x==Number.POSITIVE_INFINITY||A.x<this.p0.x)&&(this.p0.x=A.x),(this.p0.y==Number.POSITIVE_INFINITY||A.y<this.p0.y)&&(this.p0.y=A.y),(this.p1.y==Number.NEGATIVE_INFINITY||A.x>this.p1.x)&&(this.p1.x=A.x),(this.p1.y==Number.NEGATIVE_INFINITY||A.y>this.p1.y)&&(this.p1.y=A.y)}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const A=this.p1.subtract(this.p0);return A.scaleInPlace(.5),A.addInPlace(this.p0),A}clone(){return new LI(this.p0.clone(),this.p1.clone())}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}}class It{constructor(A=new f,g=0){A instanceof f?this.pos=A:this.pos=new f,this.radius=g}clone(){return new It(this.pos.clone(),this.radius)}intersectsBox(A){return A.intersectsSphere(this)}toJSON(){return{pos:this.pos.toJSON(),radius:this.radius}}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}}class gg{constructor(A,g){A instanceof Float32Array?(this.p0=new f(new Float32Array(A.buffer,A.byteOffset,3)),this.p1=new f(new Float32Array(A.buffer,A.byteOffset+12,3))):(A instanceof f?this.p0=A:this.p0=new f(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY),g instanceof f?this.p1=g:this.p1=new f(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY))}get min(){return this.p0}get max(){return this.p1}set(A,g){this.p0=A,this.p1=g}reset(){this.p0.x=Number.POSITIVE_INFINITY,this.p0.y=Number.POSITIVE_INFINITY,this.p0.z=Number.POSITIVE_INFINITY,this.p1.x=Number.NEGATIVE_INFINITY,this.p1.y=Number.NEGATIVE_INFINITY,this.p1.z=Number.NEGATIVE_INFINITY}isValid(){return this.p0.x!=Number.POSITIVE_INFINITY&&this.p1.x!=Number.NEGATIVE_INFINITY&&this.p0.y!=Number.POSITIVE_INFINITY&&this.p1.y!=Number.NEGATIVE_INFINITY&&this.p0.z!=Number.POSITIVE_INFINITY&&this.p1.z!=Number.NEGATIVE_INFINITY}addPoint(A){A.x!=Number.POSITIVE_INFINITY&&A.x!=Number.NEGATIVE_INFINITY&&(A.x<this.p0.x&&(this.p0.x=A.x),A.x>this.p1.x&&(this.p1.x=A.x)),A.y!=Number.POSITIVE_INFINITY&&A.y!=Number.NEGATIVE_INFINITY&&(A.y<this.p0.y&&(this.p0.y=A.y),A.y>this.p1.y&&(this.p1.y=A.y)),A.z!=Number.POSITIVE_INFINITY&&A.z!=Number.NEGATIVE_INFINITY&&(A.z<this.p0.z&&(this.p0.z=A.z),A.z>this.p1.z&&(this.p1.z=A.z))}addBox3(A,g){g?(this.addPoint(g.transformVec3(A.p0)),this.addPoint(g.transformVec3(new f(A.p0.x,A.p0.y,A.p1.z))),this.addPoint(g.transformVec3(new f(A.p0.x,A.p1.y,A.p0.z))),this.addPoint(g.transformVec3(new f(A.p1.x,A.p0.y,A.p0.z))),this.addPoint(g.transformVec3(new f(A.p0.x,A.p1.y,A.p1.z))),this.addPoint(g.transformVec3(new f(A.p1.x,A.p0.y,A.p1.z))),this.addPoint(g.transformVec3(new f(A.p1.x,A.p1.y,A.p0.z))),this.addPoint(g.transformVec3(A.p1))):(this.addPoint(A.p0),this.addPoint(A.p1))}size(){return this.p1.distanceTo(this.p0)}diagonal(){return this.p1.subtract(this.p0)}center(){const A=this.p1.subtract(this.p0);return A.scaleInPlace(.5),A.addInPlace(this.p0),A}toMat4(){const A=this.p1.x-this.p0.x,g=this.p1.y-this.p0.y,I=this.p1.z-this.p0.z;return new NA(A,0,0,0,0,g,0,0,0,0,I,0,this.p0.x,this.p0.y,this.p0.z,1)}getBoundingSphere(){return new It(this.center(),this.diagonal().length()*.5)}intersectsBox(A){return!(A.max.x<this.min.x||A.min.x>this.max.x||A.max.y<this.min.y||A.min.y>this.max.y||A.max.z<this.min.z||A.min.z>this.max.z)}intersectsSphere(A){return new f().distanceTo(A.pos)<=A.radius*A.radius}intersectsPlane(A){let g,I;return A.normal.x>0?(g=A.normal.x*this.min.x,I=A.normal.x*this.max.x):(g=A.normal.x*this.max.x,I=A.normal.x*this.min.x),A.normal.y>0?(g+=A.normal.y*this.min.y,I+=A.normal.y*this.max.y):(g+=A.normal.y*this.max.y,I+=A.normal.y*this.min.y),A.normal.z>0?(g+=A.normal.z*this.min.z,I+=A.normal.z*this.max.z):(g+=A.normal.z*this.max.z,I+=A.normal.z*this.min.z),g<=-A.w&&I>=-A.w}clone(){return new gg(this.p0.clone(),this.p1.clone())}toJSON(){return{p0:this.p0.toJSON(),p1:this.p1.toJSON()}}fromJSON(A){const g={x:P.isNumeric(A.p0.x)?A.p0.x:Number.POSITIVE_INFINITY,y:P.isNumeric(A.p0.y)?A.p0.y:Number.POSITIVE_INFINITY,z:P.isNumeric(A.p0.z)?A.p0.z:Number.POSITIVE_INFINITY},I={x:P.isNumeric(A.p1.x)?A.p1.x:Number.NEGATIVE_INFINITY,y:P.isNumeric(A.p1.y)?A.p1.y:Number.NEGATIVE_INFINITY,z:P.isNumeric(A.p1.z)?A.p1.z:Number.NEGATIVE_INFINITY};this.p0.fromJSON(g),this.p1.fromJSON(I)}setFromFloat32Array(A){this.p0=new f(A.buffer,A.byteOffset),this.p1=new f(A.buffer,A.byteOffset+12)}toString(){return Ig.stringifyJSONWithFixedPrecision(this.toJSON())}}let rn=0;class Ct{constructor(){this.__id=++rn}getId(){return this.__id}getClassName(){return p.getClassName(Object.getPrototypeOf(this).constructor)}}class TA{constructor(){}}class FA extends Ct{constructor(){super();this.listeners={}}on(A,g){if(!g)throw new Error("Missing listener.");this.listeners[A]||(this.listeners[A]=[]);const I=this.listeners[A];if(I.includes(g))throw new Error(`Listener "${g.name}" already connected to event "${A}".`);const C=I.length;return I[C]=g,C}once(A,g){const I=C=>{g(C),this.off(A,I)};return this.on(A,I)}off(A,g){if(!g)throw new Error("Missing callback function (listener).");if(typeof g=="number"){console.warn("Deprecated. Un-register using the original listener instead."),this.removeListenerById(A,g);return}const I=this.listeners[A]||[],C=[];if(I.forEach((e,i)=>{e===g&&C.push(i)}),C.length==0)throw new Error(`Listener "${g.name}" is not connected to "${A}" event`);for(const e of C)I[e]=null}removeListenerById(A,g){const I=this.listeners[A];if(!I){console.warn("callback :"+g+" was not connected to this event:"+A);return}if(!I[g])throw new Error("Invalid ID");I[g]=null}emit(A,g=new TA){(this.listeners[A]||[]).forEach(C=>{C&&C(g)})}}class Ug extends TA{constructor(A,g){super();this.width=A,this.height=g}}class cn extends FA{constructor(A=0,g=0){super();this.root={x:0,y:0,w:A,h:g}}fit(A){if(A.length==0)return;let I=!1;if(this.root.w<A[0].w&&(this.root.w=A[0].w,I=!0),this.root.h<A[0].h&&(this.root.h=A[0].h,I=!0),I){const e=new Ug(this.root.w,this.root.h);this.emit("resized",e)}const C=e=>{e.fit=this.__addBlock(e)};A.forEach(C)}__addBlock(A){const g=this.findNode(this.root,A.w,A.h);return g?this.splitNode(g,A.w,A.h):this.growNode(A.w,A.h)}addBlock(A){let g=!1;if(this.root.w<A.w&&(this.root.w=A.w,g=!0),this.root.h<A.h&&(this.root.h=A.h,g=!0),g){const C=new Ug(this.root.w,this.root.h);this.emit("resized",C)}const I=this.findNode(this.root,A.w,A.h);return I?this.splitNode(I,A.w,A.h):this.growNode(A.w,A.h)}findNode(A,g,I){return A.used?this.findNode(A.right,g,I)||this.findNode(A.down,g,I):g<=A.w&&I<=A.h?A:null}splitNode(A,g,I){return A.used=!0,A.down={x:A.x,y:A.y+I,w:A.w,h:A.h-I},A.right={x:A.x+g,y:A.y,w:A.w-g,h:I},A}growNode(A,g){const I=A<=this.root.w,C=g<=this.root.h,e=C&&this.root.h>=this.root.w+A,i=I&&this.root.w>=this.root.h+g;return e?this.growRight(A,g):i?this.growDown(A,g):C?this.growRight(A,g):I?this.growDown(A,g):null}growRight(A,g){this.root={used:!0,x:0,y:0,w:this.root.w+A,h:this.root.h,down:this.root,right:{x:this.root.w,y:0,w:A,h:this.root.h}};const I=this.findNode(this.root,A,g);let C;I&&(C=this.splitNode(I,A,g));const e=new Ug(this.root.w,this.root.h);return this.emit("resized",e),C}growDown(A,g){this.root={used:!0,x:0,y:0,w:this.root.w,h:this.root.h+g,down:{x:0,y:this.root.h,w:this.root.w,h:g},right:this.root};const I=this.findNode(this.root,A,g);let C;I&&(C=this.splitNode(I,A,g));const e=new Ug(this.root.w,this.root.h);return this.emit("resized",e),C}}class mi{constructor(A=0,g=0){this.start=A,this.size=g}}class QC extends FA{constructor(){super();this.freeList=[],this.allocations=[],this.allocationsMap={},this.allocatedSpace=0,this.reservedSpace=0,this.freeSpace=0}getAllocation(A){return this.allocations[this.allocationsMap[A]]}allocate(A,g){if(this.allocationsMap[A]!=null){const C=this.allocationsMap[A],e=this.allocations[C];if(g==e.size)return e;if(g<e.size){const i=e.size-g;return this.addBlock(C+1,new mi(e.start+g,i)),this.freeBlock(C+1),e.size=g,e}else{const i=C+1;if(this.freeList.includes(i)&&e.size+this.allocations[i].size>=g){const s=this.allocations[i];if(e.size+s.size==g)return e.size+=s.size,this.freeSpace-=s.size,this.freeList.splice(this.freeList.indexOf(i),1),this.removeBlock(i),e;{const o=g-e.size;return e.size+=o,this.freeSpace-=o,s.start+=o,s.size-=o,e}}else delete this.allocationsMap[A],e.start+e.size==this.allocatedSpace?(this.removeBlock(C),this.allocatedSpace-=e.size):this.freeBlock(C)}}let I=-1;for(let C=0;C<this.freeList.length;C++){const e=this.freeList[C],i=this.allocations[e];if(i.size==g){I=e;break}else i.size>g&&(I=e)}if(I!=-1){const C=this.allocations[I];if(this.freeSpace-=C.size,this.freeList.splice(this.freeList.indexOf(I),1),C.size>g){const e=C.size-g;this.addBlock(I+1,new mi(C.start+g,e)),this.freeBlock(I+1),this.freeList.sort((i,s)=>this.allocations[s].size-this.allocations[i].size),this.allocations[I].size=g}this.allocationsMap[A]=I}else{const C=this.allocatedSpace,e=this.allocations.length;this.allocatedSpace+=g;const i=P.nextPow2(this.allocatedSpace);i>this.reservedSpace&&(this.reservedSpace=i,this.emit("resized",{reservedSpace:this.reservedSpace})),this.allocations.push(new mi(C,g)),this.allocationsMap[A]=e}return this.allocations[this.allocationsMap[A]]}addBlock(A,g){this.allocations.splice(A,0,g);for(const I in this.allocationsMap)this.allocationsMap[I]>=A&&this.allocationsMap[I]++;for(let I=0;I<this.freeList.length;I++)this.freeList[I]>=A&&this.freeList[I]++}removeBlock(A){this.allocations.splice(A,1);for(const g in this.allocationsMap)this.allocationsMap[g]>A&&this.allocationsMap[g]--;for(let g=0;g<this.freeList.length;g++)this.freeList[g]>A&&this.freeList[g]--}freeBlock(A){const g=this.allocations[A];this.freeSpace+=g.size;const I=A-1;if(this.freeList.includes(I)){const e=this.allocations[I];e.size+=g.size,this.removeBlock(A);return}const C=A+1;if(this.freeList.includes(C)){const e=this.allocations[C];e.start-=g.size,e.size+=g.size,this.removeBlock(A);return}this.freeList.push(A)}deallocate(A){const g=this.allocationsMap[A];if(g==null)throw new Error(`allocation ${A} does not exist.`);this.freeBlock(g),delete this.allocationsMap[A]}getFragmentation(){return this.freeSpace/this.allocatedSpace}defragment(){}verifyConsistency(){if(Object.keys(this.allocationsMap).length+this.freeList.length!=this.allocations.length)throw new Error("number of blocks does not match the number of allocations");for(const g in this.allocationsMap){const I=this.allocationsMap[g];if(this.freeList.includes(I))throw new Error("block of used memory is also on the free list")}let A=0;for(let g=0;g<this.allocations.length;g++){const I=this.allocations[g];if(I.start!=A)throw"blocks of memory are not sequential";A+=I.size}if(A!=this.allocatedSpace)throw`allocated size: ${this.allocatedSpace}  does not match allocated blocks: ${A}`;if(this.reservedSpace<this.allocatedSpace)throw`reserved space: ${this.reservedSpace} is less than allocated space: ${this.allocatedSpace}`}}class hn{constructor(A,g,I,C,e){this.screenPos=A,this.pointerRay=g,this.intersectionPos=I,this.geomData=C,this.geomItem=e.geomItem,this.componentId=e.componentId,this.dist=e.dist}}class mn extends TA{constructor(A){super();this.controller=A}}class sI extends TA{constructor(A,g){super();this.change=A,this.count=g}}class Gn extends TA{constructor(A){super();this.envMap=A}}class as extends TA{constructor(A){super();this.index=A}}class Vo extends TA{constructor(){super();this.propagating=!0}}class ns extends Vo{constructor(A){super();this.propagating=!0,this.sourceEvent=A,this.altKey=A.altKey,this.code=A.code,this.ctrlKey=A.ctrlKey,this.isComposing=A.isComposing,this.key=A.key,this.location=A.location,this.metaKey=A.metaKey,this.repeat=A.repeat,this.shiftKey=A.shiftKey,this.which=A.which}stopPropagation(){this.propagating=!1,this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class En extends TA{constructor(A){super();this.name=A}}class Qn extends TA{constructor(A){super();this.name=A}}class un extends TA{constructor(A){super();this.range=A}}class bn extends TA{constructor(A){super();this.scene=A}}class yn extends TA{constructor(A){super();this.value=A}}class Zn extends TA{constructor(A){super();this.selected=A}}class Rn extends TA{constructor(A){super();this.shaderName=A}}class Ti extends TA{constructor(A){super();this.state=A}}class Bs extends TA{constructor(A,g){super();this.geomFileID=A,this.geomCount=g}}class fn extends TA{constructor(A,g){super();this.isTextured=A,this.param=g}}class So extends TA{constructor(A,g){super();this.isOpaque=A,this.isOpaqueStateChanged=g}}class et extends TA{constructor(A,g){super();this.interfaceType=A,this.viewXfo=g}}class zi extends TA{constructor(A){super();this.visible=A}}class wn extends et{constructor(A){super("VR",A);this.hmd="",this.controllers=[]}}const DA={mouse:"mouse",touch:"touch",xr:"xr"};let Gi=null;class De extends Vo{constructor(A){super();this.pointerType=A}stopPropagation(){this.propagating=!1}setCapture(A){Gi=A}getCapture(){return Gi}releaseCapture(){Gi=null}}class nI extends De{constructor(A,g,I,C){super(DA.xr);this.buttonPressed=0,this.viewport=A,this.controller=g,this.button=I,this.buttonPressed=C}stopPropagation(){this.propagating=!1}setCapture(A){this.controller.capturedItem=A}getCapture(){return this.controller.capturedItem}releaseCapture(){this.controller.capturedItem=null}}class Vn extends De{constructor(A,g,I){super(DA.xr);this.controllers=[],this.viewport=A,this.viewXfo=g,I.forEach(C=>{this.controllers.push(C)})}}class Sn extends TA{constructor(A){super();this.xrViewport=A}}class wg extends De{constructor(A,g){super(DA.mouse);this.sourceEvent=A,this.button=A.button,this.clientX=A.clientX,this.clientY=A.clientY;const I=1;this.rendererX=(this.clientX-g.left)*I,this.rendererY=(this.clientY-g.top)*I,this.altKey=A.altKey,this.metaKey=A.metaKey,this.ctrlKey=A.ctrlKey,this.shiftKey=A.shiftKey}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){this.sourceEvent&&this.sourceEvent.preventDefault()}}class Ei{constructor(A,g){this.clientX=0,this.clientY=0,this.screenX=0,this.screenY=0,this.pageX=0,this.pageY=0,this.radiusX=0,this.radiusY=0,this.rotationAngle=0,this.force=0,this.altitudeAngle=0,this.azimuthAngle=0,this.touchType="direct",this.identifier=A.identifier,this.clientX=A.clientX,this.clientY=A.clientY,this.screenX=A.screenX,this.screenY=A.screenY,this.pageX=A.pageX,this.pageY=A.pageY,this.radiusX=A.radiusX,this.radiusY=A.radiusY,this.rotationAngle=A.rotationAngle,this.force=A.force;const I=1;this.rendererX=(this.clientX-g.left)*I,this.rendererY=(this.clientY-g.top)*I,this.touchPos=new K,this.touchRay=new rg}}class kg extends De{constructor(A,g){super(DA.touch);this.touches=[],this.changedTouches=[],this.targetTouches=[],this.altKey=!1,this.metaKey=!1,this.ctrlKey=!1,this.shiftKey=!1,this.sourceEvent=A,this.sourceEvent.stopPropagation(),this.altKey=A.altKey,this.metaKey=A.metaKey,this.ctrlKey=A.ctrlKey,this.shiftKey=A.shiftKey;for(let I=0;I<A.touches.length;I++)this.touches.push(new Ei(A.touches[I],g));if(A.changedTouches)for(let I=0;I<A.changedTouches.length;I++)this.changedTouches.push(new Ei(A.changedTouches[I],g));if(A.targetTouches)for(let I=0;I<A.targetTouches.length;I++)this.targetTouches.push(new Ei(A.targetTouches[I],g))}stopPropagation(){super.stopPropagation(),this.sourceEvent&&this.sourceEvent.stopPropagation()}preventDefault(){}}class pn extends wg{constructor(A,g){super(A,g);this.wheelDelta=A.wheelDelta,this.deltaMode=A.deltaMode,this.deltaX=A.deltaX,this.deltaY=A.deltaY,this.deltaZ=A.deltaZ}}class Fn extends TA{constructor(A,g){super();this.index=A,this.childItem=g}}class Xn extends TA{constructor(A,g){super();this.oldName=A,this.newName=g}}let Hn=0;class po extends FA{constructor(){super();if(this.constructor.name=="RefCounted")throw new Error("RefCounted should not be instantiated directly.");this.__id=++Hn,this.__refs=[],this.__destroyed=!1}getId(){return this.__id}numRefs(){return this.__refs.length}addRef(A){if(!A)throw new Error("Error in RefCounted.addRef: Must provide a referer");return this.__refs.push(A),!0}removeRef(A){if(!A)throw new Error("Error in RefCounted.removeRef: Must provide a referer");const g=this.__refs.indexOf(A);if(g==-1)throw new Error("Error in RefCounted.removeRef: referer not found in refs list.");this.__refs.splice(g,1),this.__refs.length==0&&this.destroy()}getRefer(A){return this.__refs[A]}getRefIndex(A){return this.__refs.indexOf(A)}isDestroyed(){return this.__destroyed}destroy(){this.__destroyed=!0,this.emit("destructing")}}class xI extends FA{constructor(){super();this.paramEventListenerIDs={},this.paramMapping={},this.params=[],this.deprecatedParamMapping={}}getNumParameters(){return this.params.length}getParameters(){return this.params}getParameterIndex(A){return this.paramMapping[A]}getParameterByIndex(A){return this.params[A]}hasParameter(A){return A in this.paramMapping}addParameterDeprecationMapping(A,g){this.deprecatedParamMapping[A]=g}getParameter(A){let g=this.paramMapping[A];if(g==null){const I=this.deprecatedParamMapping[A];if(I)console.warn(`Parameter name ${A} is now deprecated. Please use ${I} instead.`),g=this.paramMapping[I];else return null}return this.params[g]}parameterValueChanged(A){this.emit("parameterValueChanged",A)}addParameter(A){return this.insertParameter(A,this.params.length)}insertParameter(A,g){const I=A.getName();this.paramMapping[I]!=null&&(console.warn("Replacing Parameter:"+I),this.removeParameter(I)),A.setOwner(this),this.paramEventListenerIDs[I]=A.on("valueChanged",e=>{const i={param:A};for(const s in e)i[s]=e[s];this.parameterValueChanged(i)}),this.params.splice(g,0,A);for(let e=g;e<this.params.length;e++)this.paramMapping[this.params[e].getName()]=e;const C=new En(I);return this.emit("parameterAdded",C),A}removeParameter(A){if(this.paramMapping[A]==null)throw new Error("Unable to remove Parameter:"+A);const g=this.paramMapping[A];this.params[this.paramMapping[A]].removeListenerById("valueChanged",this.paramEventListenerIDs[A]),this.params.splice(g,1),delete this.paramMapping[A];for(let e=g;e<this.params.length;e++)this.paramMapping[this.params[e].getName()]=e;const C=new Qn(A);this.emit("parameterRemoved",C)}replaceParameter(A){const g=A.getName();if(this.paramMapping[g]==null)throw new Error("Unable to replace Parameter:"+g);const I=this.paramMapping[g];return this.removeParameter(g),this.insertParameter(A,I),A}toJSON(A){const g={type:this.getClassName()},I={};let C=0;for(const e of this.params){const i=e.toJSON(A);i&&(I[e.getName()]=i,C++)}return C>0&&(g.params=I),g}fromJSON(A,g){if(A.params)for(const I in A.params){const C=A.params[I],e=this.getParameter(I);e?C.paramPath?g==null||g.resolvePath(C.paramPath,i=>{this.replaceParameter(i)},()=>{console.warn("Unable to resolve shared parameter:"+C.paramPath)}):e.fromJSON(C,g):console.warn("Param not found:"+I)}}readBinary(A,g){if((g==null?void 0:g.versions["zea-engine"].compare([0,0,3]))>=0){const I=A.loadUInt32();for(let C=0;C<I;C++){const e=A.loadStr(),i=A.loadStr();let s=this.getParameter(i);if(!s){if(s=p.constructClass(e),!s){console.error("Unable to construct prop:"+i+" of type:"+e);continue}s.setName(i),this.addParameter(s)}s.readBinary(A,g)}}}toString(A){return JSON.stringify(this.toJSON(),null,2)}copyFrom(A,g){let I=A.getNumParameters();for(;I--;){const C=A.getParameterByIndex(I),e=this.getParameter(C.getName());e?e.copyFrom(C):this.addParameter(C.clone())}}}let ls=0;class gI extends xI{constructor(A=""){super();this.__ownerItem=void 0,this.__selectable=!0,this.__selected=!1,this.__metaData={},this.__name=A,this.__path=[this.__name],ls++}static getNumBaseItems(){return ls}getName(){return this.__name}setName(A){if(this.__name!=A){const g=this.__name;this.__name=A,this.updatePath();const I=new Xn(g,A);this.emit("nameChanged",I)}}get name(){return this.getName()}set name(A){this.setName(A)}updatePath(){this.__ownerItem==null?this.__path=[this.__name]:(this.__path=this.__ownerItem.getPath().slice(),this.__path.push(this.__name))}getPath(){return this.__path}resolvePath(A,g=0){if(g==0&&(A[0]=="."||A[0]==this.__name)&&g++,g==A.length)return this;if(A[g]==">"&&g==A.length-1)return this.getParameter(A[g+1]);const I=this.getParameter(A[g]);if(I)return I;throw new Error("Invalid path:"+A+"["+g+"] member not found")}getOwner(){return this.__ownerItem}setOwner(A){this.__ownerItem!==A?this.__ownerItem=A:A||(this.__ownerItem=void 0),this.updatePath()}isSelectable(){return this.__selectable}setSelectable(A){if(this.__selectable!=A){this.__selectable=A;let g=new yn(this.__selectable);return this.emit("selectabilityChanged",g),!0}return!1}isSelected(){return this.__selected}setSelected(A){this.__selected=A;let g=new Zn(this.__selected);this.emit("selectedChanged",g)}getMetadata(A){return this.__metaData[A]}hasMetadata(A){return A in this.__metaData}setMetadata(A,g){this.__metaData[A]=g}deleteMetadata(A){delete this.__metaData[A]}toJSON(A){const g=super.toJSON(A);return g.name=this.__name,g}fromJSON(A,g){A.name&&(this.__name=A.name),super.fromJSON(A,g)}readBinary(A,g){A.loadStr(),this.setName(A.loadStr()),super.readBinary(A,g)}clone(A){throw new Error(this.constructor.name+" does not implement its clone method")}copyFrom(A,g){super.copyFrom(A,g),this.setName(A.getName()),this.setSelectable(A.isSelectable())}}const Fo=function(t,A,g,I,C=void 0){try{const e=new XMLHttpRequest;e.responseType=A,e.addEventListener("timeout",i=>{throw new Error("The request for "+t+" timed out.")}),e.addEventListener("error",i=>{throw new Error("The request for "+t+": xhr.readyState:"+e.readyState)}),e.addEventListener("abort",i=>{throw new Error("The request for "+t+": xhr.readyState:"+e.readyState)}),e.addEventListener("progress",i=>{C&&C(i.total,i.loaded)}),e.addEventListener("loadend",i=>{e.status==200?g(e):I(e.statusText)}),e.open("GET",t,!0),e.send()}catch(e){I(e)}},_i=function(t,A,g=void 0,I=void 0){Fo(t,"text",C=>{A(C.responseText)},C=>{if(g!=null)g(C);else throw new Error("Unable to XHR File:"+t)},I)},Xo=function(t,A,g=void 0,I=void 0){Fo(t,"arraybuffer",C=>{A(C.response)},C=>{if(g!=null)g(C);else throw new Error("Unable to XHR File:"+t)},I)};var Wn="";/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function uC(t,A,g,I){function C(e){return e instanceof g?e:new g(function(i){i(e)})}return new(g||(g=Promise))(function(e,i){function s(n){try{a(I.next(n))}catch(B){i(B)}}function o(n){try{a(I.throw(n))}catch(B){i(B)}}function a(n){n.done?e(n.value):C(n.value).then(s,o)}a((I=I.apply(t,A||[])).next())})}let ie=0;class Ho extends FA{constructor(A){super();this.poolSize=Math.max(1,vA.hardwareConcurrency-1),this.workers=[],this.workerTaskCount=[],this.taskPromiseResolves={},this.taskQueue=[],this.availableWorkers=[],this.terminationTimeouts=[],this.terminateWorkersWhenFree=!0,this.terminationLatency=2e3,this.terminateWorkersWhenFree=A}addTask(A,g){return this.addTaskCallback(()=>({taskData:A,transferables:g}))}addTaskCallback(A){ie++;const g=ie;return new Promise(I=>uC(this,void 0,void 0,function*(){this.taskPromiseResolves[g]=I,this.taskQueue.push({taskId:g,dataFactory:A}),this.availableWorkers.length>0?this.consumeTask():this.workers.length<this.poolSize&&(yield this.addWorker(),this.consumeTask())}))}consumeTask(){return uC(this,void 0,void 0,function*(){const A=this.availableWorkers.pop();if(this.workerTaskCount[A]>0)return;if(this.taskQueue.length==0){this.terminateWorkersWhenFree&&this.scheduleWorkerTermination(A);return}if(this.terminationTimeouts[A]!=-1?(clearTimeout(this.terminationTimeouts[A]),this.terminationTimeouts[A]=-1):this.workers[A]||(yield this.allocWorker(A)),this.taskQueue.length==0){this.terminateWorkersWhenFree&&this.scheduleWorkerTermination(A);return}const g=this.taskQueue.pop(),{taskData:I,transferables:C}=g.dataFactory(A);I.taskId=g.taskId,this.workerTaskCount[A]++,this.workers[A].postMessage(I,C)})}addWorker(){const A=this.workers.length;return this.workers.push(null),this.allocWorker(A)}allocWorker(A){return new Promise(g=>{this.constructWorker().then(I=>{I.onmessage=C=>{if(C.data.taskId in this.taskPromiseResolves){const e=C.data.taskId;if(delete C.data.taskId,this.taskPromiseResolves[e](C.data),delete this.taskPromiseResolves[e],this.workerTaskCount[A]--,this.workerTaskCount[A]>0)return;this.availableWorkers.indexOf(A)==-1&&this.availableWorkers.push(A),this.taskQueue.length>0?this.consumeTask():this.terminateWorkersWhenFree&&this.scheduleWorkerTermination(A)}else C.data.eventName&&(C.data.workerId=A,this.emit(C.data.eventName,C.data))},this.workers[A]=I,this.terminationTimeouts[A]=-1,this.workerTaskCount[A]=0,this.availableWorkers.push(A),g()})})}scheduleWorkerTermination(A){this.terminationTimeouts[A]=setTimeout(()=>{this.terminateWorker(A),this.terminationTimeouts[A]=-1},this.terminationLatency)}terminateWorker(A){this.workers[A].terminate(),this.workers[A]=null}messageWorker(A,g){ie++;const I=ie;return new Promise(C=>{this.taskPromiseResolves[I]=C,g.taskId=I,this.workers[A].postMessage(g)})}}function Yn(t,A){var g=atob(t);if(A){for(var I=new Uint8Array(g.length),C=0,e=g.length;C<e;++C)I[C]=g.charCodeAt(C);return String.fromCharCode.apply(null,new Uint16Array(I.buffer))}return g}function Kn(t,A,g){var I=A===void 0?null:A,C=g===void 0?!1:g,e=Yn(t,C),i=e.indexOf(`
`,10)+1,s=e.substring(i)+(I?"//# sourceMappingURL="+I:""),o=new Blob([s],{type:"application/javascript"});return URL.createObjectURL(o)}function it(t,A,g){var I;return function(e){return I=I||Kn(t,A,g),new Worker(I,e)}}var Nn=it("",null,!1);const Jn=Uint8Array.from(atob(Wn),t=>t.charCodeAt(0));class Dn extends Ho{constructor(){super(!0)}constructWorker(){return new Promise(A=>{const g=new Nn;g.onmessage=I=>{I.data.type=="WASM_LOADED"&&A(g)},g.postMessage({type:"init",buffer:Jn.buffer})})}}function vn(t){return t.ok?t:!1}class Mn{constructor(){this.threadPool=new Dn}init(A){this.resourceLoader=A}getType(){return"archive"}loadFile(A){return this.resourceLoader.incrementWorkload(1),new Promise((I,C)=>{fetch(A).then(e=>(this.resourceLoader.incrementWorkDone(1),vn(e)?e.arrayBuffer():(C(new Error(`loadArchive: ${e.status} - ${e.statusText} : ${A}`)),null))).then(e=>{if(!e){C("Buffer is null");return}const i=A;this.threadPool.addTask({type:"unpack",resourceId:i,buffer:e},[e]).then(s=>{s.type==="FINISHED"?I(s.entries):s.type==="ERROR"&&C(new Error(`Unable to load Resource: ${i}`))})})})}}function Ln(t){return t.ok?t:!1}class Un{init(A){this.resourceLoader=A}getType(){return"json"}loadFile(A){return this.resourceLoader.incrementWorkload(1),new Promise((I,C)=>{fetch(A).then(e=>{this.resourceLoader.incrementWorkDone(1),Ln(e)?I(e.json()):C(`loadJSON: ${e.status} - ${e.statusText} : ${A}`)})})}}function kn(t){return t.ok?t:!1}class xn{init(A){this.resourceLoader=A}getType(){return"text"}loadFile(A){return this.resourceLoader.incrementWorkload(1),new Promise((I,C)=>{fetch(A).then(e=>{this.resourceLoader.incrementWorkDone(1),kn(e)?I(e.text()):C(`loadText: ${e.status} - ${e.statusText} : ${A}`)})})}}function Tn(t){return t.ok?t:!1}class zn{init(A){this.resourceLoader=A}getType(){return"binary"}loadFile(A){return this.resourceLoader.incrementWorkload(1),new Promise((I,C)=>{fetch(A).then(e=>{this.resourceLoader.incrementWorkDone(1),Tn(e)?I(e.arrayBuffer()):C(`loadBinary: ${e.status} - ${e.statusText} : ${A}`)})})}}const Qi=2e3;class _n extends FA{constructor(){super();this.baseUrl="",this.loadCount=0,this.queue=[],this.__totalWork=0,this.__doneWork=0,this.plugins={},this.systemUrls={};const A="https://storage.googleapis.com/visualive-tmp/zea-engine-resources";this.systemUrls["ZeaEngine/Vive.vla"]=A+"/Vive.vla",this.systemUrls["ZeaEngine/Oculus.vla"]=A+"/Oculus.vla",this.commonResources={}}registerPlugin(A){A.init(this),this.plugins[A.getType()]=A}loadFile(A,g,I=!0){const C=this.plugins[A];if(!C)throw new Error(`There's no plugin registered for the type of file "${A}". Did you add the plugins script? See: https://docs.zea.live/zea-engine/#/adding-default-plugins`);if(I&&this.incrementWorkload(),this.loadCount<Qi){this.loadCount++;const e=C.loadFile(g);return e.then(()=>{for(this.loadCount--,this.incrementWorkDone(),this.emit("loaded",{url:g});this.loadCount<Qi&&this.queue.length>0;)this.queue.pop()()},()=>{this.incrementWorkDone()}),e}else return new Promise((i,s)=>{this.queue.push(()=>{this.loadCount++,C.loadFile(g).then(a=>{for(this.loadCount--,this.incrementWorkDone(),this.emit("loaded",{url:g});this.loadCount<Qi&&this.queue.length>0;)this.queue.pop()();i(a)},()=>{this.incrementWorkDone()})})})}getCommonResource(A){return this.commonResources[A]}setCommonResource(A,g){this.commonResources[A]=g}incrementWorkload(A=1){this.__totalWork+=A;const g=this.__doneWork/this.__totalWork*100;this.emit("progressIncremented",{percent:g})}incrementWorkDone(A=1){this.__doneWork+=A;const g=this.__doneWork/this.__totalWork*100;if(this.emit("progressIncremented",{percent:g}),this.__doneWork>this.__totalWork)throw new Error("Mismatch between work loaded and work done.")}}const AA=new _n,Pn=new Mn;AA.registerPlugin(Pn);const On=new Un;AA.registerPlugin(On);const jn=new xn;AA.registerPlugin(jn);const qn=new zn;AA.registerPlugin(qn);class bC{constructor(A=""){if(this.branch="",A){const g=A.split("-"),I=g[0].split(".");this.major=parseInt(I[0]),this.minor=parseInt(I[1]),this.patch=parseInt(I[2]),g.length==2&&(this.branch=g[1])}else this.major=0,this.minor=0,this.patch=0}compare(A){const g=[this.major,this.minor,this.patch];for(let I=0;I<3;I++)if(g[I]!==A[I])return g[I]-A[I];return 0}toString(){return`v${this.major}.${this.minor}.${this.patch}`+(this.branch!=""?`-${this.branch}`:"")}}class yC{constructor(A,g=0,I=!0){this.__data=A,this.__byteOffset=g,this.__dataView=new DataView(this.__data),this.__isMobileDevice=I,this.utf8decoder=new TextDecoder}get isMobileDevice(){return this.__isMobileDevice}get data(){return this.__data}get byteLength(){return this.__dataView.byteLength}get remainingByteLength(){return this.__dataView.byteLength-this.__byteOffset}pos(){return this.__byteOffset}seek(A){this.__byteOffset=A}advance(A){this.__byteOffset+=A}loadUInt8(){const A=this.__dataView.getUint8(this.__byteOffset);return this.__byteOffset+=1,A}loadUInt16(){const A=this.__dataView.getUint16(this.__byteOffset,!0);return this.__byteOffset+=2,A}loadUInt32(){const A=this.__dataView.getUint32(this.__byteOffset,!0);return this.__byteOffset+=4,A}loadSInt32(){const A=this.__dataView.getInt32(this.__byteOffset,!0);return this.__byteOffset+=4,A}loadFloat16(){const A=this.loadUInt16();return P.decode16BitFloat(A)}loadUFloat16(){const A=this.loadFloat16();return A<0?2048-A:A}loadFloat16From2xUInt8(){throw Error("loadFloat16From2xUInt8 not implemented!")}loadUInt32From2xUFloat16(){const A=this.loadUFloat16(),g=this.loadUFloat16();return A+g*4096}loadSInt32From2xFloat16(){const A=this.loadFloat16(),g=this.loadFloat16();return A+g*2048}loadFloat32(){const A=this.__dataView.getFloat32(this.__byteOffset,!0);return this.__byteOffset+=4,A}loadUInt8Array(A,g=!1){A==null&&(A=this.loadUInt32());let I;return g?(I=new Uint8Array(this.__data.slice(this.__byteOffset,this.__byteOffset+A)),I.length!=A&&console.log("broken")):I=new Uint8Array(this.__data,this.__byteOffset,A),this.__byteOffset+=A,I}loadUInt16Array(A,g=!1){if(A==null&&(A=this.loadUInt32()),A==0)return new Uint16Array;this.readPad(2);let I;if(this.__isMobileDevice){I=new Uint16Array(A);for(let C=0;C<A;C++)I[C]=this.__dataView.getUint16(this.__byteOffset,!0),this.__byteOffset+=2}else g?(I=new Uint16Array(this.__data.slice(this.__byteOffset,this.__byteOffset+A*2)),I.length!=A&&console.log("broken")):I=new Uint16Array(this.__data,this.__byteOffset,A),this.__byteOffset+=A*2;return I}loadUInt32Array(A,g=!1){if(A==null&&(A=this.loadUInt32()),A==0)return new Uint32Array;this.readPad(4);let I;if(this.__isMobileDevice){I=new Uint32Array(A);for(let C=0;C<A;C++)I[C]=this.__dataView.getUint32(this.__byteOffset,!0),this.__byteOffset+=4}else g?(I=new Uint32Array(this.__data.slice(this.__byteOffset,this.__byteOffset+A*4)),I.length!=A&&console.log("broken")):I=new Uint32Array(this.__data,this.__byteOffset,A),this.__byteOffset+=A*4;return I}loadFloat32Array(A,g=!1){if(A==null&&(A=this.loadUInt32()),A==0)return new Float32Array;this.readPad(4);let I;if(this.__isMobileDevice){I=new Float32Array(A);for(let C=0;C<A;C++)I[C]=this.__dataView.getFloat32(this.__byteOffset,!0),this.__byteOffset+=4}else g?I=new Float32Array(this.__data.slice(this.__byteOffset,this.__byteOffset+A*4)):I=new Float32Array(this.__data,this.__byteOffset,A),this.__byteOffset+=A*4;return I}loadStr(){const A=this.loadUInt32(),g=new Uint8Array(this.__data,this.__byteOffset,A);return this.__byteOffset+=A,this.utf8decoder.decode(g)}loadStrArray(){const A=this.loadUInt32(),g=[];for(let I=0;I<A;I++)g[I]=this.loadStr();return g}loadSInt32Vec2(){const A=this.loadSInt32(),g=this.loadSInt32();return new K(A,g)}loadUInt32Vec2(){const A=this.loadUInt32(),g=this.loadUInt32();return new K(A,g)}loadFloat16Vec2(){const A=this.loadFloat16(),g=this.loadFloat16();return new K(A,g)}loadFloat32Vec2(){const A=this.loadFloat32(),g=this.loadFloat32();return new K(A,g)}loadFloat16Vec3(){const A=this.loadFloat16(),g=this.loadFloat16(),I=this.loadFloat16();return new f(A,g,I)}loadFloat32Vec3(){const A=this.loadFloat32(),g=this.loadFloat32(),I=this.loadFloat32();return new f(A,g,I)}loadFloat16Quat(){const A=this.loadFloat16(),g=this.loadFloat16(),I=this.loadFloat16(),C=this.loadFloat16();return new BA(A,g,I,C)}loadFloat32Quat(){const A=this.loadFloat32(),g=this.loadFloat32(),I=this.loadFloat32(),C=this.loadFloat32();return new BA(A,g,I,C)}loadRGBFloat32Color(){const A=this.loadFloat32(),g=this.loadFloat32(),I=this.loadFloat32();return new W(A,g,I)}loadRGBAFloat32Color(){const A=this.loadFloat32(),g=this.loadFloat32(),I=this.loadFloat32(),C=this.loadFloat32();return new W(A,g,I,C)}loadRGBUInt8Color(){const A=this.loadUInt8(),g=this.loadUInt8(),I=this.loadUInt8();return new W(A/255,g/255,I/255)}loadRGBAUInt8Color(){const A=this.loadUInt8(),g=this.loadUInt8(),I=this.loadUInt8(),C=this.loadUInt8();return new W(A/255,g/255,I/255,C/255)}loadBox2(){return new LI(this.loadFloat32Vec2(),this.loadFloat32Vec2())}loadBox3(){return new gg(this.loadFloat32Vec3(),this.loadFloat32Vec3())}readPad(A){const g=this.__byteOffset%A;g!=0&&(this.__byteOffset+=A-g)}}var UI;(function(t){t[t.OP_WRITE=0]="OP_WRITE",t[t.OP_READ_WRITE=1]="OP_READ_WRITE"})(UI||(UI={}));class zA extends FA{constructor(A="",g,I){super();this.dirty=!1,this.boundInputs=[],this.boundOutputs=[],this.cleaning=!1,this.dirtyOpIndex=0,this.firstOP_WRITE=0,this.name=A,this.__value=g,this.dataType=I}getName(){return this.name}setName(A){if(A===this.name)return;const g=this.name;this.name=A,this.emit("nameChanged",{newName:this.name,prevName:g})}getOwner(){return this.ownerItem}setOwner(A){this.ownerItem=A}getPath(){return this.ownerItem&&this.ownerItem instanceof gI?[...this.ownerItem.getPath(),this.name]:[this.name]}getDataType(){return this.dataType}bindOperatorInput(A){this.boundInputs.push(A)}unbindOperatorInput(A){const g=this.boundInputs.indexOf(A);this.boundInputs.splice(g,1)}bindOperatorOutput(A,g=-1){g==-1&&(g=this.boundOutputs.length),this.boundOutputs.splice(g,0,A);for(let I=g;I<this.boundOutputs.length;I++)this.boundOutputs[I].setParamBindIndex(I);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(g),g}unbindOperatorOutput(A){const g=A.getParamBindIndex();this.boundOutputs.splice(g,1);for(let I=g;I<this.boundOutputs.length;I++)this.boundOutputs[I].setParamBindIndex(I);return this.__findFirstOP_WRITE(),this.dirtyOpIndex=this.boundOutputs.length,this.setDirty(Math.max(0,g-1)),g}__findFirstOP_WRITE(){if(this.firstOP_WRITE=this.boundOutputs.length,this.boundOutputs.length>0)for(this.firstOP_WRITE--;this.firstOP_WRITE>0&&this.boundOutputs[this.firstOP_WRITE].getMode()!=UI.OP_WRITE;this.firstOP_WRITE--);}setDirty(A){if(A<this.dirtyOpIndex){let g=this.firstOP_WRITE;if(g<=A){for(this.dirtyOpIndex=g,g++;g<this.boundOutputs.length;g++)g!=A&&this.boundOutputs[g].getOperator().setDirty();for(let I=0;I<this.boundInputs.length;I++)this.boundInputs[I].setDirty();return this.emit("valueChanged"),!0}}return!1}isDirty(){return this.dirtyOpIndex<this.boundOutputs.length}getDirtyBindingIndex(){return this.dirtyOpIndex}setCleanFromOp(A,g){if(g!=this.dirtyOpIndex){if(g<this.dirtyOpIndex)console.log("Parameter is cleaned when it was already clean to that point in the stack:",this.getPath());else if(this.boundOutputs[g].getMode()!=UI.OP_WRITE){const I=this.getClassName(),C=this.boundOutputs[g].getOperator(),e=C.getClassName();throw new Error(`Parameter: ${I} with name: ${this.getName()} is not cleaning all outputs during evaluation of op: ${e} with name: ${C.getName()}`)}}this.__value=A,this.dirtyOpIndex=g+1}getValueFromOp(A){return this.dirtyOpIndex<A&&this._clean(A),this.__value}_clean(A){if(this.cleaning)throw new Error(`Cycle detected when cleaning: ${this.getPath()}. Operators need to be rebound to fix errors`);for(this.cleaning=!0;this.dirtyOpIndex<A;){const g=this.dirtyOpIndex;if(this.boundOutputs[this.dirtyOpIndex].getOperator().evaluate(),g==this.dirtyOpIndex){const C=this.boundOutputs[this.dirtyOpIndex].getOperator(),e=C.getClassName();console.warn(`Operator: ${e} with name: ${C.getName()} is not cleaning its outputs during evaluation`),this.dirtyOpIndex++}}this.cleaning=!1}getValue(){return this.dirtyOpIndex<this.boundOutputs.length&&this._clean(this.boundOutputs.length),this.__value}setValue(A){if(A==null)throw"undefined was passed into the set value for param:"+this.getName();if(this.boundOutputs.length>0)for(let g=this.boundOutputs.length-1;g>=0;g--){const I=this.boundOutputs[g];if(A=I.backPropagateValue(A),I.getMode()==0)return}if(!(typeof A!="object"&&this.__value==A)){this.__value=A;for(let g=0;g<this.boundInputs.length;g++)this.boundInputs[g].paramValueChanged();this.emit("valueChanged")}}get value(){return this.getValue()}set value(A){this.setValue(A)}loadValue(A){this.__value=A}copyFrom(A,g){this.loadValue(A.__value)}readBinary(A,g){console.warn(`TODO: Parameter: ${this.constructor.name} with name: ${this.name} does not implement readBinary`)}destroy(){console.warn("nothing destroyed. This method was not overwritten in subclass")}}class Y extends zA{constructor(A="",g=0,I,C){super(A,g,"Number");this.range=I,this.step=C}getRange(){return this.range}setRange(A){this.range=A}getStep(){return this.step}setStep(A){this.step=A}toJSON(A){const g={value:this.__value};return this.range&&(g.range=this.range),this.step&&(g.step=this.step),g}fromJSON(A,g){this.__value=A.value,A.range&&(this.range=A.range),A.step&&(this.step=A.step)}readBinary(A,g){this.__value=A.loadFloat32()}clone(){return new Y(this.name,this.__value,this.range,this.step)}}class $n extends Y{readBinary(A,g){this.__value=A.loadFloat32()}}class AB extends Y{readBinary(A,g){this.__value=A.loadSInt32()}}class gB extends Y{readBinary(A,g){this.__value=A.loadUInt32()}}p.register("NumberParameter",Y);p.register("Property_SInt32",AB);p.register("Property_UInt32",gB);p.register("Property_Float32",$n);class tt extends Y{constructor(A,g,I=[]){super(A,g,[0,I.length],1);this.choices=I}getChoices(){return this.choices}setValue(A){typeof A=="string"?super.setValue(this.choices.indexOf(A)):super.setValue(A)}}p.register("MultiChoiceParameter",tt);class RA extends zA{constructor(A="",g){super(A,g!=null?g:!1,"Boolean")}readBinary(A,g){this.__value=A.loadUInt8()!=0}toJSON(A){return{value:this.__value}}fromJSON(A,g){this.__value=A.value,this.emit("valueChanged",{mode:0})}clone(){return new RA(this.name,this.__value)}}p.register("BooleanParameter",RA);p.register("Property_Boolean",RA);class DC extends zA{constructor(A="",g,I){super(A,g||new K,"Vec2");this.range=I}getRange(){return this.range}setRange(A){this.range=A,this.emit("rangeChanged",{range:A})}readBinary(A,g){var I;(I=this.__value)===null||I===void 0||I.readBinary(A)}toJSON(A){var g;return{name:this.name,value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(A,g){const I=new K;I.fromJSON(A.value),this.__value=I,A.name&&(this.name=A.name)}clone(){var A;const g=new DC(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone());return this.range&&g.setRange(this.range),g}}p.register("Vec2Parameter",DC);p.register("Property_Vec2_32f",DC);class vC extends zA{constructor(A="",g,I){super(A,g||new f,"Vec3");this.range=I}readBinary(A,g){var I;(I=this.__value)===null||I===void 0||I.readBinary(A)}toJSON(A){var g;return{name:this.name,value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(A,g){const I=new f;I.fromJSON(A.value),this.__value=I,A.name&&(this.name=A.name)}clone(){var A;return new vC(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone())}}p.register("Vec3Parameter",vC);p.register("Property_Vec3_32f",vC);class TI extends zA{constructor(A="",g){super(A,g||new cA,"Vec4")}readBinary(A,g){var I;(I=this.__value)===null||I===void 0||I.readBinary(A)}toJSON(A){var g;return{name:this.name,value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(A,g){const I=new cA;I.fromJSON(A.value),this.__value=I,A.name&&(this.name=A.name)}clone(){var A;return new TI(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone())}}p.register("Vec4Parameter",TI);p.register("Property_Vec4_32f",TI);class ve extends zA{constructor(A="",g){super(A,g||new LI,"Box2")}readBinary(A,g){this.__value.p0.readBinary(A),this.__value.p1.readBinary(A)}toJSON(A){return{value:{p0:this.__value.p0.toJSON(),p1:this.__value.p1.toJSON()}}}fromJSON(A,g){this.__value.p0.fromJSON(A.p0),this.__value.p1.fromJSON(A.p1)}clone(){var A;return new ve(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone())}}p.register("Box2Parameter",ve);p.register("Property_Box2_32f",ve);class MC extends zA{constructor(A="",g){super(A,g||new gg,"Box3")}readBinary(A,g){this.__value.p0.readBinary(A),this.__value.p1.readBinary(A)}toJSON(A){return{value:{p0:this.__value.p0.toJSON(),p1:this.__value.p1.toJSON()}}}fromJSON(A,g){A.value&&(this.__value.p0.fromJSON(A.value.p0),this.__value.p1.fromJSON(A.value.p1))}clone(){var A;return new MC(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone())}}p.register("Box3Parameter",MC);p.register("Property_Box3_32f",MC);class ag extends zA{constructor(A="",g){super(A,g||new W,"Color")}readBinary(A,g){const I=A.loadRGBAFloat32Color();I.applyGamma(2.2),this.__value=I}toJSON(A){var g;return{value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(A,g){var I;(I=this.__value)===null||I===void 0||I.fromJSON(A.value)}clone(){var A;return new ag(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone())}}p.register("ColorParameter",ag);p.register("Property_Color_32f",ag);class Me extends zA{constructor(A="",g){super(A,g||new BA,"Quat")}readBinary(A,g){var I;(I=this.__value)===null||I===void 0||I.readBinary(A)}toJSON(A){var g;return{value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(A,g){const I=new BA;I.fromJSON(A.value),this.__value=I}clone(){var A;return new Me(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone())}}p.register("QuatParameter",Me);p.register("Property_Quat_32f",Me);class Le extends zA{constructor(A="",g){super(A,g||new sg,"Mat3")}readBinary(A,g){var I;(I=this.__value)===null||I===void 0||I.readBinary(A)}toJSON(A){var g;return{value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(A,g){const I=new sg;I.fromJSON(A.value),this.__value=I}clone(){var A;return new Le(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone())}}p.register("Mat3Parameter",Le);p.register("Property_Mat3_32f",Le);class LC extends zA{constructor(A="",g){super(A,g||new NA,"Mat4")}readBinary(A,g){var I;(I=this.__value)===null||I===void 0||I.readBinary(A)}toJSON(A){var g;return{value:(g=this.__value)===null||g===void 0?void 0:g.toJSON()}}fromJSON(A,g){const I=new NA;I.fromJSON(A.value),this.__value=I}clone(){var A;return new LC(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone())}}p.register("Mat4Parameter",LC);p.register("Property_Mat4_32f",LC);class yg extends zA{constructor(A="",g){super(A,g||new D,"Xfo")}readBinary(A,g){this.__value.readBinary(A)}toJSON(A){return{name:this.name,value:this.__value.toJSON()}}fromJSON(A,g){const I=new D;I.fromJSON(A.value),this.__value=I,A.name&&(this.name=A.name)}clone(){return new yg(this.name,this.__value.clone())}}p.register("XfoParameter",yg);p.register("Property_Xfo_32f",yg);class UC extends zA{constructor(A="",g){super(A,g,"BaseImage")}toJSON(A){const g={name:this.name};return this.__value&&(g.imageType=this.__value.getClassName(),g.value=this.__value.toJSON()),g}fromJSON(A,g){var I;A.imageType&&(this.__value=p.constructClass(A.imageType),A.value&&((I=this.__value)===null||I===void 0||I.fromJSON(A.value,g)))}clone(){return new UC(this.name,this.__value)}}p.register("ImageParameter",UC);class Zg extends zA{constructor(A="",g=""){super(A,g,"String");this.multiLine=!1}setMultiLine(A){this.multiLine=A}getMultiLine(){return this.multiLine}readBinary(A,g){this.__value=A.loadStr()}toJSON(A){return{value:this.__value}}fromJSON(A,g){this.__value=A.value?A.value:"",this.emit("valueChanged",{mode:0})}clone(){return new Zg(this.name,this.__value)}}p.register("StringParameter",Zg);p.register("Property_String",Zg);class Ue extends zA{constructor(A="",g=[]){super(A,g,"String[]")}readBinary(A,g){this.__value=A.loadStrArray()}toJSON(A){return{value:this.__value}}fromJSON(A,g){this.__value=A.value,this.emit("valueChanged",{mode:0})}clone(){return new Ue(this.name,this.__value)}}p.register("StringListParameter",Ue);p.register("Property_StringList",Ue);class st extends zA{constructor(A){super(A,{},"Struct");this.members=[]}addMember(A){return this.__value&&(this.__value[A.getName()]=A.value),A.on("valueChanged",()=>{this.__value&&(this.__value[A.getName()]=A.value)}),this.members.push(A),this.emit("valueChanged"),A}getParameter(A){for(const g of this.members)if(g.getName()==A)return g}getMember(A){return this.getParameter(A)}getMemberNames(){const A=[];for(let g=0;g<this.members.length;g++){const I=this.members[g];I!=null&&(A[g]=I.getName())}return A}toJSON(A){const g={},I=[];for(const C of this.members)I.push(C.toJSON(A));return g.members=I,g.name=this.name,g}fromJSON(A,g){if(A.members==null){console.warn("Invalid Parameter JSON");return}for(let I=0;I<A.members.length;I++)A.members[I]&&this.members[I].fromJSON(A.members[I],g);this.name=A.name}clone(){return new st(this.name)}destroy(){for(const A of this.members)A.destroy()}}p.register("StructParameter",st);class ke extends FA{constructor(A,g=UI.OP_WRITE){super();this._op=null,this.__name=A,this._mode=g,this._param=void 0,this._paramBindIndex=-1,this.detached=!1}getName(){return this.__name}setOperator(A){this._op=A}getOperator(){return this._op}getMode(){return this._mode}isConnected(){return this._param!=null}getParam(){return this._param}setParam(A,g=-1){this._param&&this._param.unbindOperatorOutput(this),this._param=A,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,g)),this.emit("paramSet",{param:this._param})}getParamBindIndex(){return this._paramBindIndex}setParamBindIndex(A){this._paramBindIndex=A}setDirty(){this._param&&this._param.setDirty(this._paramBindIndex)}getValue(){if(this._param)return this._param.getValueFromOp(this._paramBindIndex);throw new Error("Cannot call getValue on OperatorOutput that is not connected:",this.__name)}backPropagateValue(A){return this._op&&(A=this._op.backPropagateValue(A)),A}setClean(A){this._param&&this._param.setCleanFromOp(A,this._paramBindIndex)}toJSON(A){const g=this._param?this._param.getPath():"";return{name:this.__name,paramPath:A&&A.makeRelative?A.makeRelative(g):g,paramBindIndex:this._paramBindIndex}}fromJSON(A,g){A.paramPath&&(g==null||g.resolvePath(A.paramPath,I=>{this.setParam(I,A.paramBindIndex)},I=>{console.warn("OperatorOutput: '"+this.getName()+"'. Unable to connect to:"+A.paramPath)}))}detach(){this.detached=!0,this._paramBindIndex=this._param?this._param.unbindOperatorOutput(this):-1}reattach(){this.detached=!1,this._param&&(this._paramBindIndex=this._param.bindOperatorOutput(this,this._paramBindIndex))}rebind(){this._param&&(this._param.unbindOperatorOutput(this),this._paramBindIndex=this._param.bindOperatorOutput(this))}}class IB extends ke{}class xe extends ke{}class CB extends ke{}class og extends gI{constructor(A=""){super(A);this.__inputs=new Map,this.__outputs=new Map}setDirty(){this.__outputs.forEach(A=>A.setDirty())}parameterValueChanged(A){super.parameterValueChanged(A),this.setDirty()}addInput(A){return A.setOperator(this),this.__inputs.set(A.getName(),A),this.setDirty(),A}removeInput(A){typeof A=="string"&&(A=this.getInput(A)),A.getParam()&&A.setParam(void 0),this.__inputs.delete(A.getName())}getNumInputs(){return this.__inputs.size}getInputByIndex(A){return Array.from(this.__inputs.values())[A]}getInput(A){const g=this.__inputs.get(A);if(!g)throw`Couldn't find an Input with the name of '${A}'`;return g}addOutput(A){return A.setOperator(this),this.__outputs.set(A.getName(),A),this.setDirty(),A}removeOutput(A){if(typeof A=="string"&&(A=this.getOutput(A)),!(A instanceof ke))throw new Error("removeOutput only accepts string or OperatorInput");A.getParam()&&A.setParam(),this.__outputs.delete(A.getName())}getNumOutputs(){return this.__outputs.size}getOutputByIndex(A){return Array.from(this.__outputs.values())[A]}getOutput(A){const g=this.__outputs.get(A);if(!g)throw new Error(`Couldn't find an Output with the name of '${A}'`);return g}evaluate(){throw new Error("Not yet implemented")}backPropagateValue(A){return A}toJSON(A){const g=super.toJSON(A);g.type=this.getClassName();const I=[];this.__inputs.forEach(e=>{I.push(e.toJSON(A))}),g.inputs=I;const C=[];return this.__outputs.forEach(e=>{C.push(e.toJSON(A))}),g.outputs=C,g}fromJSON(A,g){super.fromJSON(A,g),A.inputs&&A.inputs.forEach((I,C)=>{let e;I.name?(e=this.getInput(I.name),e||(e=this.addInput(I.name))):e=this.getInputByIndex(C),e.fromJSON(I,g)}),A.outputs&&A.outputs.forEach((I,C)=>{let e;I.name?(e=this.getOutput(I.name),e||(e=this.addOutput(I.name))):e=this.getOutputByIndex(C),e.fromJSON(I,g)})}detach(){this.__inputs.forEach(A=>A.detach()),this.__outputs.forEach(A=>A.detach())}reattach(){this.__inputs.forEach(A=>A.reattach()),this.__outputs.forEach(A=>A.reattach())}rebind(){this.__outputs.forEach(A=>A.rebind())}}class Wo extends FA{constructor(A){super();this.detached=!1,this.name=A}getName(){return this.name}setOperator(A){this._op=A}getOperator(){return this._op}isConnected(){return this.param!=null}getParam(){return this.param}paramValueChanged(){this._op&&this._op.setDirty()}setParam(A){this.param&&this.param.unbindOperatorInput(this),this.param=A,this.param&&this.param.bindOperatorInput(this),this.emit("paramSet",{param:this.param})}getValue(){if(this.param)return this.param.value;throw new Error("Unable to getValue")}setValue(A){this.param&&this.param.setValue(A)}setDirty(){this._op&&this._op.setDirty()}toJSON(A){const g=this.param?this.param.getPath():[],I=A&&A.makeRelative?A.makeRelative(g):g;return{name:this.name,paramPath:I}}fromJSON(A,g){A.paramPath&&(g==null||g.resolvePath(A.paramPath,I=>{this.setParam(I)},()=>{console.warn("OperatorInput: '"+this.getName()+"'. Unable to connect to:"+A.paramPath)}))}detach(){this.param&&this.param.unbindOperatorInput(this)}reattach(){this.detached=!1,this.param&&this.param.bindOperatorInput(this)}}class eB extends Wo{}class $g extends Wo{}class Yo extends og{constructor(A,g){super("CalcGlobalXfoOperator");this.parentGlobal=new $g("ParentGlobal"),this.localXfo=new $g("LocalXfo"),this.globalXfo=new xe("GlobalXfo"),this.localXfo.setParam(g),this.globalXfo.setParam(A),this.addInput(this.parentGlobal),this.addInput(this.localXfo),this.addOutput(this.globalXfo)}backPropagateValue(A){if(this.parentGlobal.isConnected()){const g=this.parentGlobal.getValue();this.localXfo.setValue(g.inverse().multiply(A))}else this.localXfo.setValue(A)}evaluate(){const A=this.localXfo.getValue();if(this.parentGlobal.isConnected()){const g=this.parentGlobal.getValue();this.globalXfo.setClean(g.multiply(A))}else this.globalXfo.setClean(A)}}p.register("CalcGlobalXfoOperator",Yo);class ot extends MC{constructor(A="",g){super(A);this.dirty=!0,this.treeItem=g}setDirty(A){return this.dirty||(this.dirty=!0,this.emit("valueChanged")),!0}getValue(){return this.dirty&&(this.__value=this.treeItem._cleanBoundingBox(),this.dirty=!1),this.__value}clone(){var A;const g=new ot(this.name,this.treeItem);return g.value=(A=this.__value)===null||A===void 0?void 0:A.clone(),g}loadValue(A){this.__value=A.clone()}}class L extends gI{constructor(A){super(A);this.disableBoundingBox=!1,this.__childItems=[],this.__childItemsEventHandlers=[],this.__childItemsMapping={},this.__childItemsMappingCorrupt=!1,this.globalXfoParam=new yg("GlobalXfo",new D),this.localXfoParam=new yg("LocalXfo",new D),this.boundingBoxParam=new ot("BoundingBox",this),this.visibleParam=new RA("Visible",!0),this.opacityParam=new Y("Opacity",1,[0,1]),this.__highlightMapping={},this.__highlights=[],this.__visible=!0,this.__visibleCounter=1,this.__opacity=1,this.addParameter(this.visibleParam),this.addParameter(this.opacityParam),this.addParameter(this.localXfoParam),this.addParameter(this.globalXfoParam),this.addParameter(this.boundingBoxParam),this.globalXfoOp=new Yo(this.globalXfoParam,this.localXfoParam),this.globalXfoParam.on("valueChanged",g=>{this.setBoundingBoxDirty(),this.emit("globalXfoChanged",g)}),this.visibleParam.on("valueChanged",()=>{this.__visibleCounter+=this.visibleParam.value?1:-1,this.updateVisibility()}),this.opacityParam.on("valueChanged",()=>{this.updateOpacity()})}setOwner(A){if(this.__ownerItem){const g=this.__ownerItem;if(g&&g instanceof L){g.isVisible()||this.__visibleCounter++;const I=g.getChildIndex(this);I>=0&&g.unbindChild(I,this)}}if(super.setOwner(A),this.__ownerItem){const g=this.__ownerItem;g&&(g.isVisible()||this.__visibleCounter--,this.globalXfoOp.getInput("ParentGlobal").setParam(g.globalXfoParam))}else this.globalXfoOp.getInput("ParentGlobal").setParam(void 0);this.updateVisibility()}updatePath(){super.updatePath();for(const A of this.__childItems)A&&A.updatePath()}getParentItem(){return this.getOwner()}setParentItem(A){this.setOwner(A)}isVisible(){return this.__visibleCounter>0}setVisible(A){this.visibleParam.value=A}propagateVisibility(A){this.__visibleCounter+=A,this.updateVisibility()}updateVisibility(){const A=this.__visibleCounter>0;if(A!=this.__visible){this.__visible=A;for(const I of this.__childItems)I.propagateVisibility(this.__visible?1:-1);this.emit("visibilityChanged",new zi(A));const g=this.__ownerItem;return g&&g instanceof L&&g.setBoundingBoxDirty(),!0}return!1}get opacity(){return this.__opacity}isOpaque(){return this.__opacity>.999}updateOpacity(){const A=this.__opacity>.999,g=this.getParentItem();g?this.__opacity=this.opacityParam.value*g.__opacity:this.__opacity=this.opacityParam.value;for(const C of this.__childItems)C.updateOpacity();const I=this.__opacity>.999;this.emit("opacityChanged",new So(I,A!=I))}addHighlight(A,g,I=!1){if(A in this.__highlightMapping)if(this.__highlights[this.__highlights.length-1]!=A){const C=this.__highlights.indexOf(A);this.__highlights.splice(C,1),this.__highlights.push(A),this.emit("highlightChanged",{name:A,color:g})}else this.__highlightMapping[A].isEqual(g)||(this.__highlightMapping[A]=g,this.emit("highlightChanged",{name:A,color:g}));else this.__highlights.push(A),this.__highlightMapping[A]=g,this.emit("highlightChanged",{name:A,color:g});I&&this.__childItems.forEach(C=>{C.addHighlight(A,g,I)})}removeHighlight(A,g=!1){if(A in this.__highlightMapping){if(this.__highlights[this.__highlights.length-1]==A)if(this.__highlights.pop(),delete this.__highlightMapping[A],this.__highlights.length>0){const I=this.__highlights[this.__highlights.length-1],C=this.__highlightMapping[I];this.emit("highlightChanged",{name:I,color:C})}else this.emit("highlightChanged");else{const I=this.__highlights.indexOf(A);this.__highlights.splice(I,1),delete this.__highlightMapping[A],this.emit("highlightChanged")}g&&this.__childItems.forEach(I=>{I.removeHighlight(A,g)})}}getHighlight(){return this.__highlights.length==0?null:this.__highlightMapping[this.__highlights[this.__highlights.length-1]]}getHighlightName(){return this.__highlights.length==0?null:this.__highlights[this.__highlights.length-1]}isHighlighted(){return this.__highlights.length>0}_cleanBoundingBox(){const A=new gg;return this.__childItems.forEach(g=>{if(g.isVisible()){const I=g.boundingBoxParam.value;I&&A.addBox3(I)}}),A}setBoundingBoxDirty(){this.boundingBoxParam&&this.boundingBoxParam.setDirty(-1);const A=this.__ownerItem;A&&A instanceof L&&A.setBoundingBoxDirty()}getChildren(){return this.__childItems}getNumChildren(){return this.__childItems.length}generateUniqueName(A){if(!(A in this.__childItemsMapping))return A;let g=1;A.length>4&&!Number.isNaN(parseInt(A.substring(A.length-4)))?g=parseInt(A.substr(A.length-4)):A.length>3&&!Number.isNaN(parseInt(A.substring(A.length-3)))?g=parseInt(A.substr(A.length-3)):A.length>2&&!Number.isNaN(parseInt(A.substring(A.length-2)))&&(g=parseInt(A.substr(A.length-2)));const I=[];for(const e of this.__childItems)e&&I.push(e.getName());let C=A;for(;;){let e=""+g;for(;e.length<2;)e="0"+e;if(C=A+e,!I.includes(C))break;g++}return C}updateChildNameMapping(A){for(let g=A;g<this.__childItems.length;g++)this.__childItemsMapping[this.__childItems[g].getName()]=g}childNameChanged(A){if(this.__childItemsMappingCorrupt)this.updateChildNameMapping(0),this.__childItemsMappingCorrupt=!1;else{const g=this.__childItemsMapping[A.oldName];this.__childItemsMapping[A.newName]!=null&&(this.__childItemsMappingCorrupt=!0),delete this.__childItemsMapping[A.oldName],this.__childItemsMapping[A.newName]=g}}insertChild(A,g,I=!1,C=!0){if(A.getName()in this.__childItemsMapping)if(C)A.setName(this.generateUniqueName(A.getName()));else throw new Error("Item '"+A.getName()+"' is already a child of :"+this.getPath());if(!(A instanceof L))throw new Error("Object is is not a tree item :"+A);const e={};if(e.nameChanged=A.on("nameChanged",s=>{this.childNameChanged(s)}),I){const s=this.globalXfoParam.value,o=A.globalXfoParam.value,a=s.inverse().multiply(o);A.localXfoParam.value=a}this.setBoundingBoxDirty(),this.__highlights.forEach(s=>{const o=this.__highlightMapping[s];A.addHighlight(s,o,!0)}),this.__childItems.splice(g,0,A),this.__childItemsEventHandlers.splice(g,0,e);const i=A.getName();return this.__childItemsMapping[i]&&(this.__childItemsMappingCorrupt=!0),this.__childItemsMapping[i]=g,this.updateChildNameMapping(g),A.setOwner(this),this.emit("childAdded",new Fn(g,A)),A}addChild(A,g=!0,I=!0){const C=this.__childItems.length;return this.insertChild(A,C,g,I),A}getChild(A){return this.__childItems[A]}getChildByName(A){const g=this.__childItemsMapping[A];return g!=null?this.__childItems[g]:null}getChildNames(){const A=[];for(let g=0;g<this.__childItems.length;g++){const I=this.__childItems[g];I!=null&&(A[g]=I.getName())}return A}unbindChild(A,g){const I=this.__childItemsEventHandlers[A];for(const C in I)g.removeListenerById(C,I[C]);this.__childItems.splice(A,1),this.__childItemsEventHandlers.splice(A,1),delete this.__childItemsMapping[g.getName()],this.updateChildNameMapping(A),this.setBoundingBoxDirty(),this.emit("childRemoved",{childItem:g,index:A})}removeChild(A){const g=this.__childItems[A];!g||(this.unbindChild(A,g),g.setOwner(void 0))}removeChildByName(A){const g=this.__childItemsMapping[A];if(g!=null)return this.removeChild(g)}removeChildByHandle(A){const g=this.__childItems.indexOf(A);if(g==-1)throw new Error("Error in removeChildByHandle. Child not found:"+A.getName());this.removeChild(g)}removeAllChildren(){let A=this.__childItems.length;for(;A--;)this.removeChild(A);this.setBoundingBoxDirty()}getChildIndex(A){return this.__childItems.indexOf(A)}resolvePath(A,g=0,I=!1){if(typeof A=="string"&&(A=A.split("/")),g==0){if(A[0]=="."||A[0]==this.__name)g++;else if(A[0]==".."){if(this.__ownerItem)return this.__ownerItem.resolvePath(A,g+1);if(I)throw Error("this.__ownerItem is undefined");console.warn("this.__ownerItem is undefined")}}if(g==A.length)return this;const C=A[g],e=this.getChildByName(C);if(e==null){const i=this.getParameter(A[g]);if(i)return i;throw new Error(`Unable to resolve path : [${A.toString()}] after: ${this.getName()} 
No child or parameter called : "${A[g]}"`)}return e.resolvePath(A,g+1)}traverse(A,g=!0){const I=(e,i)=>{const s=e.getChildren();for(const o of s)o&&C(o,i+1)},C=(e,i)=>{A(e,i)!=!1&&I(e,i)};g?C(this,1):I(this,0)}onPointerDown(A){this.emit("pointerDown",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerDown(A)}onPointerUp(A){this.emit("pointerUp",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerUp(A)}onPointerMove(A){this.emit("pointerMove",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerMove(A)}onPointerEnter(A){this.emit("pointerEnter",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerEnter(A)}onPointerLeave(A){this.emit("pointerLeave",A);const g=this.__ownerItem;A.propagating&&g&&g.onPointerLeave(A)}onWheel(A){this.emit("mouseWheel",A);const g=this.__ownerItem;A.propagating&&g&&g.onWheel(A)}onTouchCancel(A){this.emit("touchCancel",A);const g=this.__ownerItem;A.propagating&&g&&g.onTouchCancel(A)}toJSON(A){let g=super.toJSON(A);const I={};for(const C of this.__childItems)if(C){const e=C.toJSON(A);e&&(I[C.getName()]=e)}return Object.keys(I).length>0&&(g?g.children=I:g={name:this.__name,children:I}),g}fromJSON(A,g,I){if(super.fromJSON(A,g),A.children!=null){const C=A.children;if(Array.isArray(C))for(const e of C){let i=this.getChildByName(e.name);i?i.fromJSON(e,g):e.type&&(i=p.constructClass(e.type),i&&(i.fromJSON(e,g),this.addChild(i,!1,!1)))}else for(const e in C){const i=C[e];let s=this.getChildByName(e);s?s.fromJSON(i,g):i.type&&(s=p.constructClass(i.type),s&&(s.fromJSON(i,g),this.addChild(s,!1,!1)))}}}readBinary(A,g){super.readBinary(A,g);const I=A.loadUInt8(),C=1<<1;this.setVisible((I&C)!=0);const e=1<<2,i=1<<5;if(I&e){const a=new D;if(a.tr=A.loadFloat32Vec3(),a.ori=A.loadFloat32Quat(),I&i)a.sc=A.loadFloat32Vec3();else{const n=A.loadFloat32();a.sc.set(n,n,n)}this.localXfoParam.value=a}const s=1<<3;I&s&&this.boundingBoxParam.loadValue(new gg(A.loadFloat32Vec3(),A.loadFloat32Vec3()));const o=A.loadUInt32();if(o>0){const a=A.loadUInt32Array(o);for(let n=0;n<o;n++)try{A.seek(a[n]);let B=A.loadStr();const d=p.constructClass(B);if(!d){const l=A.loadStr();console.warn("Unable to construct child:"+l+" of type:"+B);continue}A.seek(a[n]),d.readBinary(A,g),this.addChild(d,!1,!0)}catch(B){console.warn("Error loading tree item: ",B)}}}clone(A){const g=new L("");return g.copyFrom(this,A),g}copyFrom(A,g){super.copyFrom(A,g),A.getChildren().forEach(I=>{I&&this.addChild(I.clone(g),!1,!1)})}}p.register("TreeItem",L);class at extends zA{constructor(A="",g){super(A,void 0,"TreeItem");this.listenerIDs={},this.owner=new L(""),this.filterFn=g}emitTreeItemGlobalXfoChanged(A){this.emit("treeItemGlobalXfoChanged",A)}setOwner(A){this.owner=A}getOwner(){return this.owner}setFilterFn(A){this.filterFn=A}getFilterFn(){return this.filterFn}setValue(A){this.filterFn&&!this.filterFn(A)||this.__value!==A&&(this.__value&&this.__value.removeListenerById("globalXfoChanged",this.listenerIDs.globalXfoChanged),this.__value=A,this.__value&&(this.listenerIDs.globalXfoChanged=this.__value.on("globalXfoChanged",g=>{this.emitTreeItemGlobalXfoChanged(g)})),this.emit("valueChanged"))}toJSON(A){var g;return{value:A.makeRelative((g=this.__value)===null||g===void 0?void 0:g.getPath())}}fromJSON(A,g){if(A.value==null){console.warn("Invalid Parameter JSON");return}g.resolvePath(A.value,I=>{this.setValue(I)},()=>{console.warn("Unable to resolve tree item parameter value:"+A.paramPath)})}clone(A){const g=new at(this.name,this.filterFn);return this.__value&&g.setValue(this.__value.clone(A)),g}}p.register("TreeItemParameter",at);class ds extends TA{constructor(A,g){super();this.index=g,this.item=A}}class nt extends zA{constructor(A="",g){super(A,new Set,"TreeItem");this.filterFn=g}setFilterFn(A){this.filterFn=A}getFilterFn(){return this.filterFn}getItem(A){return Array.from(this.__value)[A]}addItem(A,g=!0){if(this.filterFn&&!this.filterFn(A)){console.warn("ItemSet __filterFn rejecting item:",A.getPath());return}this.__value.add(A);const I=Array.from(this.__value).indexOf(A);return this.emit("itemAdded",new ds(A,I)),g&&this.emit("valueChanged"),I}addItems(A,g=!0){A.forEach(I=>this.addItem(I,!1)),g&&this.emit("valueChanged")}removeItem(A,g=!0){const I=Array.from(this.__value)[A];return this.__value.delete(I),this.emit("itemRemoved",new ds(I,A)),g&&this.emit("valueChanged"),I}setItems(A,g=!0){const I=Array.from(this.__value);for(let C=I.length-1;C>=0;C--){const e=I[C];A.has(e)||this.removeItem(C,!1)}for(const C of A)this.__value.has(C)||this.addItem(C,!1);g&&this.emit("valueChanged")}clearItems(A=!0){this.__value.clear(),A&&this.emit("valueChanged")}getNumItems(){return this.__value.size}toJSON(A){this.__value||(this.__value=new Set);const g=[];if(A)for(const I of this.__value)g.push(I.getPath());return{value:g}}fromJSON(A,g){if(g)for(const I in A.value){const C=g.resolvePath(I);this.__value.add(C)}}clone(){return new nt(this.name,this.filterFn)}}class Te extends zA{constructor(A="",g){super(A,g,"Geometry");this.listenerIDs={},g&&this.setValue(g)}emitBoundingBoxDirtied(A){this.emit("boundingBoxChanged",A)}setValue(A){this.__value!==A&&(this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=A,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",g=>{this.emitBoundingBoxDirtied(g)})),this.emit("valueChanged"))}loadValue(A){this.__value&&this.__value.removeListenerById("boundingBoxChanged",this.listenerIDs.boundingBoxChanged),this.__value=A,this.__value&&(this.listenerIDs.boundingBoxChanged=this.__value.on("boundingBoxChanged",g=>{this.emitBoundingBoxDirtied(g)}))}toJSON(A){var g;return{name:this.name,value:(g=this.__value)===null||g===void 0?void 0:g.toJSON(A)}}fromJSON(A,g){A.name&&(this.name=A.name);const I=p.constructClass(A.value.type);I.fromJSON(A.value,g),this.__value=I}clone(){return new Te(this.name,this.__value)}}p.register("GeometryParameter",Te);class Bt extends zA{constructor(A=""){super(A,"","FilePath")}getFilename(){if(!this.__value)throw"No file value";return this.__value.lastIndexOf("/")>-1?this.__value.substring(this.__value.lastIndexOf("/")+1):""}getExt(){const A=this.getFilename(),g=A.lastIndexOf(".");if(g!=-1)return A.substring(g).toLowerCase()}getStem(){const A=this.getFilename();if(A){const g=A.split(".");return g.length==2?g[0]:A}return null}setValue(A){if(!A)throw new Error("Invalid value for setValue.");A!=this.__value&&(this.__value=A,this.emit("valueChanged"))}toJSON(A){return{value:this.__value}}fromJSON(A,g){A.value&&(this.__value=A.value)}clone(){const A=new Bt(this.name);return this.__value&&A.setValue(this.__value),A}}p.register("FilePathParameter",Bt);class kC extends zA{constructor(A="",g){super(A,g,"Material");this.listenerIDs={},g&&this.setValue(g)}valueParameterValueChanged(A){this.emit("valueParameterValueChanged",A)}setValue(A){this.__value!==A&&(this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=A,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",g=>{this.valueParameterValueChanged(g)})),this.emit("valueChanged"))}loadValue(A){this.__value&&this.__value.removeListenerById("parameterValueChanged",this.listenerIDs.parameterValueChanged),this.__value=A,this.__value&&(this.listenerIDs.parameterValueChanged=this.__value.on("parameterValueChanged",g=>{this.valueParameterValueChanged(g)}))}toJSON(A){let g={};return g.name=this.name,this.__value&&(g={value:!A||!A.onlyPath?this.__value.toJSON(A):this.__value.getPath()}),g}fromJSON(A,g){if(A.value==null){console.warn("Invalid Parameter JSON");return}if(A.value instanceof Array||A.value instanceof String){if(g&&g.assetItem){const C=g.assetItem.getMaterialLibrary().getMaterial(A.value instanceof Array?A.value[1]:A.value);C&&this.loadValue(C)}}else{const I=p.constructClass(A.value.type);A.value&&I.fromJSON(A.value,g),this.loadValue(I)}}clone(){return new kC(this.name,this.__value)}}p.register("MaterialParameter",kC);class Fg extends gI{constructor(A){super(A);this.width=0,this.height=0,this.format="RGB",this.type="UNSIGNED_BYTE",this.loaded=!1,this.mipMapped=!0,this.wrapS="REPEAT",this.wrapT="REPEAT",this.minFilter="LINEAR",this.magFilter="LINEAR",this.alphaFromLuminance=!1,this.on("parameterValueChanged",()=>{this.emit("updated")})}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,wrapS:this.wrapS,wrapT:this.wrapT,minFilter:this.minFilter,magFilter:this.magFilter,mipMapped:this.mipMapped,alphaFromLuminance:this.alphaFromLuminance}}}class PA extends Y{constructor(A="",g,I){super(A,g,I)}getImage(){return this.image}setImage(A){const g=()=>{this.emit("textureDisconnected")};A?(this.image!=null&&this.image!==A&&g(),this.image=A,this.emit("textureConnected"),this.emit("valueChanged",{mode:0})):this.image!=null&&(g(),this.image=void 0,this.emit("textureDisconnected"))}setValue(A){A instanceof Fg?this.setImage(A):super.setValue(A)}readBinary(A,g){super.readBinary(A,g);const I=A.loadStr();I!=""&&(console.log("Load Texture"),this.setImage(g.assetItem.materialLibrary.getImage(I)))}clone(){return new PA(this.name,this.__value,this.range)}}p.register("MaterialFloatParam",PA);var cg;(function(t){t.Gamma="Gamma",t.Linear="Linear"})(cg||(cg={}));class VA extends ag{constructor(A,g){super(A,g);this.listenerIDs={},this.colorSpace=cg.Gamma}getImage(){return this.image}imageUpdated(){this.emit("valueChanged")}setImage(A){const g=()=>{this.image&&(this.image.removeListenerById("updated",this.listenerIDs.updated),this.image=void 0),this.emit("textureDisconnected")};A?(this.image!=null&&this.image!==A&&g(),this.image=A,this.listenerIDs.updated=this.image.on("updated",()=>{this.imageUpdated()}),this.emit("textureConnected"),this.emit("valueChanged")):this.image!=null&&(g(),this.image=void 0,this.emit("textureDisconnected"))}setValue(A){A instanceof Fg?this.setImage(A):super.setValue(A)}readBinary(A,g){super.readBinary(A,g);const I=A.loadStr();I!=""&&this.setImage(g.assetItem.materialLibrary.getImage(I)),this.colorSpace=cg.Linear}clone(){var A;const g=new VA(this.name,(A=this.__value)===null||A===void 0?void 0:A.clone());return g.colorSpace=this.colorSpace,g}}p.register("MaterialColorParam",VA);function ui(t,A){return!t.some((g,I)=>Math.abs(A[I]-g)>.001)}function iB(t){for(let A=0;A<t.length;A++)if(!Number.isNaN(t[A]))return!0;return!1}class ze extends Ct{constructor(A,g){super();this.data=new Float32Array(0),this.dataTypeName=A,this.stride=g,this.initRange(0),this.splits={},this.splitValues=[]}setMesh(A){this.mesh=A}asArray(){return this.data}getDataTypeName(){return this.dataTypeName}getCount(){return this.data.length/this.stride}setCount(A){const g=this.data.length,I=A*this.stride;if(I>g){const C=new Float32Array(I);C.set(this.data,0),this.data=C,this.initRange(g)}else I<g&&(this.data=this.data.slice(0,I));this.splits={},this.splitValues=[]}initRange(A){for(let g=A;g<this.data.length;g++)this.data[g]=Number.NaN}get numElements(){return this.stride}getFloat32Value(A){return this.data[A]}setFloat32Value(A,g){this.data[A]=g}getSplits(){return this.splits}getFaceVertexValueRef_array(A,g){const I=this.mesh.getFaceVertexIndex(A,g);return I in this.splits&&A in this.splits[I]?this.splitValues[this.splits[I][A]]:this.data.subarray(I*this.stride,(I+1)*this.stride)}setFaceVertexValue_array(A,g,I){const C=this.mesh.getFaceVertexIndex(A,g);this.setFaceVertexValue_ByVertexIndex(A,C,I)}setFaceVertexValue_ByVertexIndex(A,g,I){const C=this.data.subarray(g*this.stride,(g+1)*this.stride);if(!iB(C))C.set(I);else if(!ui(C,I)){if(g in this.splits){const e=this.splits[g];for(const i in e){const s=e[i];if(ui(this.splitValues[s],I)){e[A]=s;return}}if(A in this.splits[g]){this.splitValues[this.splits[g][A]]=I;return}}else this.splits[g]={};this.splits[g][A]=this.splitValues.length,this.splitValues.push(I)}}setSplitVertexValue_array(A,g,I){if(A in this.splits||(this.splits[A]={}),g in this.splits[A]){const C=this.splitValues[this.splits[A][g]];if(ui(C,I))return;console.warn("Face Vertex Already Split with different value")}this.splits[A][g]=this.splitValues.length,this.splitValues.push(I)}setSplitVertexValues(A,g,I){A in this.splits||(this.splits[A]={});const C=this.splitValues.length;this.splitValues.push(I);for(const e of g)this.splits[A][e]=C}generateSplitValues(A,g){if(g==0)return this.data;const I=this.getCount(),C=new Float32Array((I+g)*this.stride);C.set(this.data);for(const e in A){const i=A[e];for(const s in i){const o=I+i[s];if(e in this.splits&&s in this.splits[e]){const a=this.splits[e][s];this.splitValues[a].forEach((n,B)=>{C[o*this.stride+B]=n})}else{const a=parseInt(e);for(let n=0;n<this.stride;n++)C[o*this.stride+n]=this.data[a*this.stride+n]}}}return C}toJSON(A){return{data:this.data,dataType:this.dataTypeName,length:this.data.length/this.stride}}fromJSON(A){const g=A.data.map(I=>P.isNumeric(I)?I:Number.POSITIVE_INFINITY);this.data=Float32Array.from(g)}loadSplitValues(A){const g=A.loadUInt32Array();if(g.length==0)return;let I=0,C=0;for(;;){const s=g[I++],o=g[I++],a={};for(let n=0;n<o;n++){const B=g[I++],d=g[I++];a[B]=d,d>=C&&(C=d+1)}if(this.splits[s]=a,I>=g.length)break}const e=this.stride,i=A.loadFloat32Array(C*e);this.splitValues=[];for(let s=0;s<C;s++){const o=i.slice(s*e,s*e+e);this.splitValues.push(o)}}toString(){return JSON.stringify(this.toJSON(),null,2)}genBuffer(){return{values:this.data,count:this.getCount(),dataType:this.dataTypeName,normalized:this.normalized}}}class hg extends ze{constructor(){super("Vec3",3);this.normalized=!1}getValueRef(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.subarray(g,g+this.stride);return new f(I)}getValue(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.slice(g,g+this.stride);return new f(I)}setValue(A,g){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const I=A*this.stride;this.data.set(g.asArray(),I)}getFaceVertexValueRef(A,g){const I=this.getFaceVertexValueRef_array(A,g);return new f(I)}setFaceVertexValue(A,g,I){this.setFaceVertexValue_array(A,g,I.asArray())}setSplitVertexValue(A,g,I){this.setSplitVertexValue_array(A,g,I.asArray())}}p.register("Vec3Attribute",hg);class Xg extends ze{constructor(){super("Vec2",2);this.normalized=!1}getValueRef(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.subarray(g,g+this.stride);return new K(I)}getValue(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.slice(g,g+this.stride);return new K(I)}setValue(A,g){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const I=A*this.stride;this.data.set(g.asArray(),I)}getFaceVertexValueRef(A,g){const I=this.getFaceVertexValueRef_array(A,g);return new K(I)}setFaceVertexValue(A,g,I){this.setFaceVertexValue_array(A,g,I.asArray())}setSplitVertexValue(A,g,I){this.setSplitVertexValue_array(A,g,I.asArray())}}p.register("Vec2Attribute",Xg);const rs=(t,A,g,I,C)=>{for(let e=t[0];e<t[1];e++){const i=new f(I[e*3+0]/255,I[e*3+1]/255,I[e*3+2]/255);i.multiplyInPlace(g),i.addInPlace(A),C.setValue(e,i)}},cs=(t,A,g,I,C)=>{for(let e=t[0];e<t[1];e++){const i=new f(I[e*3+0]/65535,I[e*3+1]/65535,I[e*3+2]/65535);i.multiplyInPlace(g),i.addInPlace(A),C.setValue(e,i)}},hs=(t,A,g,I,C)=>{g.isNull()&&g.set(1,1,1);for(let e=t[0];e<t[1];e++){const i=new f(I[e*3+0]/255,I[e*3+1]/255,I[e*3+2]/255);i.multiplyInPlace(g),i.addInPlace(A),i.normalizeInPlace(),C.setValue(e,i)}},ms=(t,A,g,I,C)=>{for(let e=t[0];e<t[1];e++){const i=new K(I[e*2+0]/255,I[e*2+1]/255);i.multiplyInPlace(g),i.addInPlace(A),C.setValue(e,i)}},Gs=(t,A,g,I,C)=>{for(let e=t[0];e<t[1];e++){const i=new K(I[e*2+0]/65535,I[e*2+1]/65535);i.multiplyInPlace(g),i.addInPlace(A),C.setValue(e,i)}};class lt extends xI{constructor(){super();this.__boundingBox=new gg,this.__boundingBoxDirty=!0,this.__metaData=new Map,this.__name="",this.__numVertices=0,this.__vertexAttributes=new Map,this.debugColor=new W(1,0,0,1),this.name="",this.addVertexAttribute("positions",new hg)}clear(){this.setNumVertices(0)}setDebugName(A){this.name=A}addVertexAttribute(A,g){g.setCount(this.__numVertices),this.__vertexAttributes.set(A,g)}hasVertexAttribute(A){return this.__vertexAttributes.has(A)}getVertexAttribute(A){return this.__vertexAttributes.get(A)}getVertexAttributes(){const A={};for(const[g,I]of this.__vertexAttributes.entries())A[g]=I;return A}get positions(){return this.__vertexAttributes.get("positions")}numVertices(){return this.__numVertices}getNumVertices(){return this.__numVertices}setNumVertices(A){this.__numVertices=A,this.__vertexAttributes.forEach(g=>g.setCount(this.__numVertices)),this.setBoundingBoxDirty()}getBoundingBox(){return this.__boundingBoxDirty&&this.updateBoundingBox(),this.__boundingBox}setBoundingBoxDirty(){this.__boundingBoxDirty=!0,this.emit("boundingBoxChanged")}updateBoundingBox(){const A=this.positions,g=new gg;if(A){const I=A.getCount();for(let C=0;C<I;C++)g.addPoint(A.getValueRef(C))}this.__boundingBox=g,this.__boundingBoxDirty=!1}getMetadata(A){return this.__metaData.get(A)}hasMetadata(A){return this.__metaData.has(A)}setMetadata(A,g){this.__metaData.set(A,g)}deleteMetadata(A){this.__metaData.delete(A)}genBuffers(A){const g={};for(const[I,C]of this.__vertexAttributes)g[I]=C.genBuffer();return{numVertices:this.numVertices(),attrBuffers:g}}freeBuffers(){}loadBaseGeomBinary(A,g){this.name=A.loadStr();const I=A.loadUInt8();this.debugColor=A.loadRGBFloat32Color();const C=A.loadUInt32();this.__boundingBox.set(A.loadFloat32Vec3(),A.loadFloat32Vec3()),this.setNumVertices(C);const e=this.positions;let i,s;I&1<<1&&(i=this.getVertexAttribute("normals"),i||(i=new hg,this.addVertexAttribute("normals",i))),I&1<<2&&(s=this.getVertexAttribute("texCoords"),s||(s=new Xg,this.addVertexAttribute("texCoords",s)));const o=A.loadUInt32();if(o==1){{const a=this.__boundingBox;if(g.versions["zea-engine"].compare([3,9,1])>=0){const n=A.loadUInt16Array(C*3);cs([0,C],a.p0,a.diagonal(),n,e)}else{const n=A.loadUInt8Array(C*3);rs([0,C],a.p0,a.diagonal(),n,e)}}if(i){const a=new gg(A.loadFloat32Vec3(),A.loadFloat32Vec3()),n=A.loadUInt8Array(C*3);hs([0,C],a.p0,a.diagonal(),n,i),i.loadSplitValues(A)}if(s){const a=new LI(A.loadFloat32Vec2(),A.loadFloat32Vec2());if(g.versions["zea-engine"].compare([3,9,1])>=0){const n=A.loadUInt16Array(C*2);Gs([0,C],a.p0,a.diagonal(),n,s)}else{const n=A.loadUInt8Array(C*2);ms([0,C],a.p0,a.diagonal(),n,s)}s.loadSplitValues(A)}}else{const a=[];let n=0;for(let r=0;r<o;r++){const c=A.loadUInt32(),h={range:[n,n+c],bbox:new gg(A.loadFloat32Vec3(),A.loadFloat32Vec3()),normalsRange:new gg,texCoordsRange:new LI};i&&h.normalsRange.set(A.loadFloat32Vec3(),A.loadFloat32Vec3()),s&&h.texCoordsRange.set(A.loadFloat32Vec2(),A.loadFloat32Vec2()),a.push(h),n+=c}let B;g.versions["zea-engine"].compare([3,9,1])>=0?B=A.loadUInt16Array(C*3):B=A.loadUInt8Array(C*3);let d=null,l=null;i&&(d=A.loadUInt8Array(C*3)),s&&(l=A.loadUInt8Array(C*2));for(let r=0;r<o;r++){{const c=a[r].bbox;g.versions["zea-engine"].compare([3,9,1])>=0?cs(a[r].range,c.p0,c.diagonal(),B,e):rs(a[r].range,c.p0,c.diagonal(),B,e)}if(d){const c=a[r].normalsRange;hs(a[r].range,c.p0,c.diagonal(),d,i)}if(l){const c=a[r].texCoordsRange;g.versions["zea-engine"].compare([3,9,1])>=0?Gs([0,C],c.p0,c.diagonal(),l,s):ms(a[r].range,c.p0,c.diagonal(),l,s)}}i&&i.loadSplitValues(A),s&&s.loadSplitValues(A)}}toJSON(A){const g=super.toJSON(A);(!A||!A.skipTopology)&&(g.numVertices=this.__numVertices||0);const I={};for(const[C,e]of this.__vertexAttributes.entries())(!A||!("skipAttributes"in A)||!A.skipAttributes.includes(C))&&(I[C]=e.toJSON(A));return g.vertexAttributes=I,g}fromJSON(A,g){this.clear(),super.fromJSON(A,g),this.setNumVertices(A.numVertices);for(const I in A.vertexAttributes){let C=this.__vertexAttributes.get(I);const e=A.vertexAttributes[I];C?C.fromJSON(e):console.warn("attr undefined, cannot execute fromJSON()")}this.emit("geomDataTopologyChanged")}toString(){return JSON.stringify(this.toJSON(),null,2)}}class tB extends ze{constructor(){super("Vec4",4);this.normalized=!1}getValueRef(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.subarray(g,g+this.stride);return new cA(I)}getValue(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.slice(g,g+this.stride);return new cA(I)}setValue(A,g){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const I=A*this.stride;this.data.set(g.asArray(),I)}getFaceVertexValueRef(A,g){const I=this.getFaceVertexValueRef_array(A,g);return new cA(I)}setFaceVertexValue(A,g,I){this.setFaceVertexValue_array(A,g,I.asArray())}setSplitVertexValue(A,g,I){this.setSplitVertexValue_array(A,g,I.asArray())}}p.register("Vec4Attribute",tB);class sB extends ze{constructor(){super("Color",4);this.normalized=!1}getValueRef(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.subarray(g,g+this.stride);return new W(I)}getValue(A){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const g=A*this.stride,I=this.data.slice(g,g+this.stride);return new W(I)}setValue(A,g){if(A>=this.data.length/this.stride)throw new Error("Invalid vertex index:"+A+". Num Vertices:"+this.data.length/3);const I=A*this.stride;this.data.set(g.asArray(),I)}getFaceVertexValueRef(A,g){const I=this.getFaceVertexValueRef_array(A,g);return new W(I)}setFaceVertexValue(A,g,I){this.setFaceVertexValue_array(A,g,I.asArray())}setSplitVertexValue(A,g,I){this.setSplitVertexValue_array(A,g,I.asArray())}}p.register("ColorAttribute",sB);class bI extends lt{constructor(){super()}clear(){this.setNumVertices(0),this.emit("geomDataTopologyChanged")}readBinary(A,g){super.loadBaseGeomBinary(A,g),this.emit("geomDataChanged")}}p.register("Points",bI);class lg extends lt{constructor(){super();this.__indices=new Uint32Array}clear(){this.setNumSegments(0),this.setNumVertices(0),this.emit("geomDataTopologyChanged")}getIndices(){return this.__indices}getNumSegments(){return this.__indices.length/2}getNumLineSegments(){return this.__indices.length/2}setNumSegments(A){if(A>this.getNumSegments()){const g=new Uint32Array(A*2);g.set(this.__indices),this.__indices=g}else this.__indices=this.__indices.slice(0,A*2)}setSegmentVertexIndices(A,g,I){if(A>=this.__indices.length/2)throw new Error("Invalid line index:"+A+". Num Segments:"+this.__indices.length/2);this.__indices[A*2+0]=g,this.__indices[A*2+1]=I}getSegmentVertexIndex(A,g){const I=this.getNumSegments();return A<I?this.__indices[A*2+g]:-1}genBuffers(A){const g=super.genBuffers();let I;return g.numVertices<Math.pow(2,8)?I=new Uint8Array(this.__indices):g.numVertices<Math.pow(2,16)?I=new Uint16Array(this.__indices):I=this.__indices,g.indices=I,g}readBinary(A,g){super.loadBaseGeomBinary(A,g),this.setNumSegments(A.loadUInt32());const I=A.loadUInt8();I==1?this.__indices=A.loadUInt8Array():I==2?this.__indices=A.loadUInt16Array():I==4&&(this.__indices=A.loadUInt32Array()),this.emit("geomDataChanged")}toJSON(A){const g=super.toJSON(A);return(!A||!A.skipTopology)&&(g.indices=Array.from(this.__indices)),g}fromJSON(A,g){super.fromJSON(A,g),A.indices&&(this.__indices=Uint32Array.from(A.indices))}}p.register("Lines",lg);class yI extends lt{constructor(){super();this.edgeFaces=[],this.faceEdges=[[]],this.faceCounts=[],this.__faceVertexIndices=new Uint32Array,this.__logTopologyWarnings=!1,this.__edgeAttributes=new Map,this.__faceAttributes=new Map,this.numEdges=0,this.edgeVerts=[],this.vertexEdges=[],this.edgeAngles=new Float32Array,this.edgeVecs=[]}clear(){super.clear(),this.edgeVerts=[],this.vertexEdges=[],this.numEdges=0,this.edgeAngles=new Float32Array,this.emit("geomDataTopologyChanged")}addVertexAttribute(A,g){super.addVertexAttribute(A,g),g.setMesh(this)}getFaceCounts(){return this.faceCounts}getNumFaces(){return this.faceCounts.length==0?0:this.faceCounts.reduce((A,g)=>A+=g)}getNumTriangles(){let A=0,g=1;for(const I of this.faceCounts)A+=I*g,g++;return A}setFaceCounts(A){let g=0,I=3;for(const e of A)g+=e*I,I++;if(this.getNumFaces()==0)this.__faceVertexIndices=new Uint32Array(g);else{const e=new Uint32Array(g);let i=0,s=0;g=0,I=3,A.forEach((o,a)=>{const n=i+Math.min(o,this.faceCounts[a])*I;e.set(this.__faceVertexIndices.slice(i,n),s),i+=this.faceCounts[a]*I,s+=o*I,I++}),this.__faceVertexIndices=e}this.faceCounts=A}getFaceVertexCount(A){let g=0,I=0;return this.faceCounts.some((C,e)=>(g+=C,g>A?(I=e+3,!0):!1)),I}getFaceVertexOffset(A){let g=0,I=0;return this.faceCounts.some((C,e)=>g+C>A?(I+=(A-g)*(e+3),!0):(g+=C,I+=C*(e+3),!1)),I}setFaceVertexIndices(A,g){const I=this.getFaceVertexCount(A);if(g.length!=I)throw new Error(`Invalid indices for face:${A} vertexIndices:${g}. Expected ${I} indices`);const C=this.getFaceVertexOffset(A);this.__faceVertexIndices.set(g,C)}addFace(A){const g=[...this.faceCounts];if(g.length<=A.length-3){for(let e=g.length;e<A.length-3;e++)g[e]=0;g[A.length-3]=1}else g[A.length-3]++;this.setFaceCounts(g);let I=0,C=0;return this.faceCounts.some((e,i)=>i+3==A.length?(I+=e-1,C+=(e-1)*(i+3),!0):(I+=e,C+=e*(i+3),!1)),this.__faceVertexIndices.set(A,C),I}getFaceVertexIndices(A){const g=[],I=this.getFaceVertexOffset(A),C=this.getFaceVertexCount(A);for(let e=0;e<C;e++)g.push(this.__faceVertexIndices[I+e]);return g}getFaceVertexIndex(A,g){const I=this.getFaceVertexOffset(A);return this.__faceVertexIndices[I+g]}addFaceAttribute(A,g){return g.setCount(this.getNumFaces()),this.__faceAttributes.set(A,g),g}hasFaceAttribute(A){return this.__faceAttributes.has(A)}getFaceAttribute(A){return this.__faceAttributes.get(A)}addEdgeAttribute(A,g){g.setCount(this.numEdges),this.__edgeAttributes.set(A,g)}hasEdgeAttribute(A){return this.__edgeAttributes.has(A)}getEdgeAttribute(A){return this.__edgeAttributes.get(A)}genTopologyInfo(){let A={};this.vertexEdges=[],this.edgeFaces=[],this.edgeVerts=[],this.faceEdges=[],this.numEdges=0;const g=this.positions,I=(i,s)=>{let o=i,a=s;if(a<o){const h=o;o=a,a=h}const n=o+">"+a;if(n in A)return A[n];const B=g.getValueRef(o),l=g.getValueRef(a).subtract(B),c={edgeIndex:this.edgeFaces.length/2,edgeVec:l};return A[n]=c,this.edgeFaces.push(-1),this.edgeFaces.push(-1),this.edgeVerts.push(o),this.edgeVerts.push(a),this.numEdges++,c},C=(i,s,o)=>{const n=I(i,s).edgeIndex;if(s<i){const B=n*2+0;this.__logTopologyWarnings&&this.edgeFaces[B]!=-1&&console.warn("Edge poly 0 already set. Mesh is non-manifold."),this.edgeFaces[B]=o}else{const B=n*2+1;this.__logTopologyWarnings&&this.edgeFaces[B]!=-1&&console.warn("Edge poly 1 already set. Mesh is non-manifold."),this.edgeFaces[B]=o}o in this.faceEdges||(this.faceEdges[o]=[]),this.faceEdges[o].push(n),this.vertexEdges[i]==null&&(this.vertexEdges[i]=new Set),this.vertexEdges[s]==null&&(this.vertexEdges[s]=new Set),this.vertexEdges[i].add(n),this.vertexEdges[s].add(n)},e=this.getNumFaces();for(let i=0;i<e;i++){const s=this.getFaceVertexIndices(i);for(let o=0;o<s.length;o++){const a=s[o],n=s[(o+1)%s.length];C(a,n,i)}}}computeFaceNormals(){const A=this.positions,g=new hg;this.addFaceAttribute("normals",g);const I=this.getNumFaces();for(let C=0;C<I;C++){const e=this.getFaceVertexIndices(C),i=A.getValueRef(e[0]);let o=A.getValueRef(e[1]);const a=new f;for(let n=2;n<e.length;n++){const B=A.getValueRef(e[n]),d=o.subtract(i),l=B.subtract(i);a.addInPlace(d.cross(l).normalize()),o=B}a.lengthSquared()<Number.EPSILON||g.setValue(C,a.normalize())}}calculateEdgeAngles(){this.vertexEdges.length==0&&this.genTopologyInfo(),this.computeFaceNormals();const A=this.positions,g=this.getFaceAttribute("normals");this.edgeVecs=[],this.edgeAngles=new Float32Array(this.numEdges);for(let I=0;I<this.edgeFaces.length;I+=2){const C=this.edgeVerts[I],e=this.edgeVerts[I+1],i=A.getValueRef(e).subtract(A.getValueRef(C));i.normalizeInPlace(),this.edgeVecs.push(i);const s=this.edgeFaces[I],o=this.edgeFaces[I+1];if(s==-1||o==-1){this.edgeAngles[I/2]=Math.PI*2;continue}const a=g.getValueRef(s),n=g.getValueRef(o);this.edgeAngles[I/2]=a.angleTo(n)}}computeVertexNormals(A=1){this.calculateEdgeAngles();const g=this.getFaceAttribute("normals"),I=new hg;this.addVertexAttribute("normals",I);const C=s=>g.getValueRef(s),e=(s,o)=>{I.setValue(s,o)},i=(s,o)=>{let a,n;const B=this.faceEdges[s];for(const d of B)this.edgeVerts[d*2]==o?a?n=this.edgeVecs[d]:a=this.edgeVecs[d]:this.edgeVerts[d*2+1]==o&&(a?n=this.edgeVecs[d]:a=this.edgeVecs[d]);return[a,n]};for(let s=0;s<this.vertexEdges.length;s++){if(this.vertexEdges[s]==null)continue;const o=this.vertexEdges[s],a=[],n=d=>{let l=!1;for(const r of a)if(l=r.includes(d),l)break;l||a.push([d])};for(const d of o){const l=this.edgeFaces[d*2],r=this.edgeFaces[d*2+1];if(l!=-1&&r!=-1&&this.edgeAngles[d]<A){let c=-1,h=-1;for(let E=0;E<a.length;E++)c==-1&&a[E].includes(l)&&(c=E),h==-1&&a[E].includes(r)&&(h=E);c==-1&&h==-1?a.push([l,r]):c!=-1&&h!=-1?c!=h&&(a[c]=a[c].concat(a[h]),a.splice(h,1)):(c==-1&&a[h].push(l),h==-1&&a[c].push(r));continue}l!=-1&&n(l),r!=-1&&n(r)}a.sort((d,l)=>d.length<l.length?1:d.length>l.length?-1:0);let B=!0;for(const d of a){const l=new f;for(const r of d){const c=i(r,s);let h;c[0]&&c[1]?(h=c[0].angleTo(c[1]),l.addInPlace(C(r).scale(h))):console.warn("variable weight is undefined because faceEdges[0] or faceEdges[1] is undefined")}l.normalizeInPlace(),B?(e(s,l),B=!1):I.setSplitVertexValues(s,d,l.asArray())}}return I}computeHardEdgesIndices(A=1){this.edgeVerts.length==0&&this.calculateEdgeAngles();const g=[],I=C=>{g.push(this.edgeVerts[C]),g.push(this.edgeVerts[C+1])};for(let C=0;C<this.edgeAngles.length;C++)this.edgeAngles[C]>A&&I(C*2);return Uint32Array.from(g)}genBuffers(A){const g={};let I=0;for(const[,n]of this.__vertexAttributes){const B=n.getSplits();for(const d in B){d in g||(g[d]={});const l=B[d];for(const r in l){const c=parseInt(r);c in g[d]||(g[d][c]=I,I++)}}}const e=this.positions.getCount(),i=e+I;let s;(!A||A.includeIndices!=!1)&&(s=this.generateTriangulatedIndices(i,e,g));const o={};for(const[n,B]of this.__vertexAttributes){let d;I==0?d=B.asArray():d=B.generateSplitValues(g,I);const l=B.stride,r=d.length/l;o[n]={values:d,count:r,dimension:l,normalized:n=="normals",dataType:B.getDataTypeName()}}return{numVertices:this.numVertices(),numRenderVerts:i,indices:s,attrBuffers:o}}computeNumTriangles(){let A=3,g=0;for(const I of this.faceCounts)g+=I*(A-2),A++;return g}generateTriangulatedIndices(A,g,I){const C=this.computeNumTriangles();let e;A<Math.pow(2,8)?e=new Uint8Array(C*3):A<Math.pow(2,16)?e=new Uint16Array(C*3):e=new Uint32Array(C*3);let i=0;const s=function(a,n){a in I&&n in I[a]&&(a=g+I[a][n]),e[i]=a,i++},o=this.getNumFaces();for(let a=0;a<o;a++){const n=this.getFaceVertexIndices(a);for(let B=0;B<n.length;B++)B>=3&&(s(n[0],a),s(n[B-1],a)),s(n[B],a)}return e}readBinary(A,g){super.loadBaseGeomBinary(A,g),this.setFaceCounts(Array.from(A.loadUInt32Array()));const I=this.getNumFaces(),C=A.loadUInt8Array(I),e=A.loadSInt32Vec2(),i=A.loadUInt8();let s;if(i==1)s=A.loadUInt8Array();else if(i==2)s=A.loadUInt16Array();else if(i==4)s=A.loadUInt32Array();else throw Error("faceVertexIndexDeltas undefined");let o=3,a=0;const n=this.faceCounts.map((r,c)=>{const h=a;return a+=r*o,o++,h});let B=0,d=0;const l=[];for(let r=0;r<I;r++){const c=C[r],h=n[c],E=c+3;l[r]=h;for(let b=0;b<E;b++){const m=B+b,G=h+b,y=s[m]+e.x;if(r==0)this.__faceVertexIndices[G]=y;else{let Q=l[r-1];Q+=b<d?b:d-1,this.__faceVertexIndices[G]=this.__faceVertexIndices[Q]+y}}B+=E,n[c]+=E,d=E}this.hasVertexAttribute("normals")||this.computeVertexNormals(),this.emit("geomDataChanged")}toJSON(A){const g=super.toJSON(A);return(!A||!A.skipTopology)&&(g.faceCounts=Array.from(this.faceCounts),g.faceVertexIndices=Array.from(this.__faceVertexIndices)),g}fromJSON(A,g){super.fromJSON(A,g),A.faceCounts&&(this.faceCounts=A.faceCounts),A.faceVertexIndices&&(this.__faceVertexIndices=Uint32Array.from(A.faceVertexIndices))}}p.register("Mesh",yI);class xC extends FA{constructor(A){super();this.name=A.name,this.__buffers=A.geomBuffers,this.__buffers.attrBuffers,this.boundingBox=new gg,this.boundingBox.p0.__data=A.bbox.p0.__data,this.boundingBox.p1.__data=A.bbox.p1.__data,this.__metaData=new Map}getNumVertices(){return this.__buffers.numVertices}getBoundingBox(){return this.boundingBox}genBuffers(){return this.__buffers}freeBuffers(){for(const A in this.__buffers.attrBuffers){const g=this.__buffers.attrBuffers[A];g.values=null}this.__buffers.indices&&(this.__buffers.indices=null)}}class ZI extends xC{constructor(A){super(A)}}class pg extends xC{constructor(A){super(A)}getNumLineSegments(){return this.__buffers.indices.length/2}}class _g extends xC{constructor(A){super(A)}getNumTriangles(){return this.__buffers.indices.length/3}}class Ko extends gI{}p.register("SubGeom",Ko);class ZC extends xC{constructor(A,g){super(A);this.materials=[],this.subGeomMaterialIndices=new Uint8Array(0),this.subGeoms=[],this.counts=A.geomBuffers.counts;const I=g.getMaterials();A.geomBuffers.materialLibraryIndices.forEach((C,e)=>{this.materials[e]=I[C]}),this.subGeomMaterialIndices=A.geomBuffers.subGeomMaterialIndices,this.__buffers.materials=this.materials}getNumTriangles(){return this.counts.TRIANGLES/3}getNumLineSegments(){return this.counts.LINES/2}getNumPoints(){return this.counts.POINTS}loadMetadata(A,g){A.loadUInt32Array().forEach((C,e)=>{const i=new Ko;A.seek(C),i.readBinary(A,g),this.subGeoms[e]=i})}}class oB extends bI{constructor(){super();this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(A){this.setBoundingBoxDirty(),this.topologyParams.includes(A.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(A)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize(),this.dirtyVertices=!1)}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(A){return this.update(),super.genBuffers(A)}toJSON(A){A||(A={}),A.skipTopology=!0,A.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(A);return A.skipTopology=!1,A.skipAttributes=[],g}}class TC extends lg{constructor(){super();this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(A){this.setBoundingBoxDirty(),this.topologyParams.includes(A.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(A)}update(){this.dirtyTopology?(this.rebuild(),this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.resize(),this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}genBuffers(A){return this.update(),super.genBuffers()}toJSON(A){A||(A={}),A.skipTopology=!0,A.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(A);return A.skipTopology=!1,A.skipAttributes=[],g}}class RI extends yI{constructor(){super();this.dirtyTopology=!0,this.dirtyVertices=!0,this.topologyParams=[]}parameterValueChanged(A){this.setBoundingBoxDirty(),this.topologyParams.includes(A.param.getName())?(this.dirtyTopology=!0,this.emit("geomDataTopologyChanged")):(this.dirtyVertices=!0,this.setBoundingBoxDirty(),this.emit("geomDataChanged")),super.parameterValueChanged(A)}update(){this.dirtyTopology?(this.vertexEdges=[],this.dirtyTopology=!1,this.dirtyVertices=!1,this.rebuild()):this.dirtyVertices&&(this.dirtyVertices=!1,this.resize())}getBoundingBox(){return this.update(),super.getBoundingBox()}getNumVertices(){return this.update(),super.getNumVertices()}computeVertexNormals(A=1){return this.update(),super.computeVertexNormals(A)}computeHardEdgesIndices(A=1){return this.update(),super.computeHardEdgesIndices(A)}genBuffers(A){return this.update(),super.genBuffers(A)}toJSON(A){A||(A={}),A.skipTopology=!0,A.skipAttributes=["positions","normals","texCoords"];const g=super.toJSON(A);return A.skipTopology=!1,A.skipAttributes=[],g}}class aB extends oB{constructor(A=1,g=1,I=1,C=1,e=!1){super();if(this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new Y("X",A)),this.sizeYParam=this.addParameter(new Y("Y",g)),this.divisionsXParam=this.addParameter(new Y("XDivisions",I)),this.divisionsYParam=this.addParameter(new Y("YDivisions",C)),e&&this.addVertexAttribute("texCoords",new Xg),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions")}rebuild(){const A=this.divisionsXParam.value,g=this.divisionsYParam.value;this.setNumVertices(A*g);const I=this.getVertexAttribute("texCoords");if(I)for(let C=0;C<g;C++){const e=C/(g-1);for(let i=0;i<A;i++){const s=i/(A-1);I.getValueRef(C*A+i).set(s,e)}}this.resize()}resize(){const A=this.divisionsXParam.value,g=this.divisionsYParam.value,I=this.sizeXParam.value,C=this.sizeYParam.value,e=this.getVertexAttribute("positions");if(!!e)for(let i=0;i<g;i++){const s=(i/(g-1)-.5)*C;for(let o=0;o<A;o++){const a=(o/(A-1)-.5)*I;e.getValueRef(i*A+o).set(a,s,0)}}}}p.register("PointGrid",aB);class dt extends TC{constructor(A=1,g=1){super();if(isNaN(A)||isNaN(g))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new Y("X",A)),this.sizeXParam.on("valueChanged",this.resize.bind(this)),this.sizeYParam=this.addParameter(new Y("Y",g)),this.sizeYParam.on("valueChanged",this.resize.bind(this)),this.rebuild()}rebuild(){this.setNumVertices(4),this.setNumSegments(4),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.resize(!1)}resize(){const A=this.sizeXParam.value,g=this.sizeYParam.value,I=this.getVertexAttribute("positions");!I||(I.getValueRef(0).set(-.5*A,-.5*g,0),I.getValueRef(1).set(.5*A,-.5*g,0),I.getValueRef(2).set(.5*A,.5*g,0),I.getValueRef(3).set(-.5*A,.5*g,0))}}p.register("Rect",dt);class rt extends TC{constructor(A=1,g=32,I=Math.PI*2){super();if(this.topologyParams=[],isNaN(A)||isNaN(g))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new Y("Radius",A)),this.angleParam=this.addParameter(new Y("Angle",I)),this.sidesParam=this.addParameter(new Y("Sides",g>=3?g:3,[3,200],1)),this.topologyParams.push("Sides")}rebuild(){const A=this.sidesParam.value;this.setNumVertices(A);const I=this.angleParam.value<Math.PI*2;I?this.setNumSegments(A-1):this.setNumSegments(A);for(let C=0;C<(I?A-1:A);C++)this.setSegmentVertexIndices(C,C,(C+1)%A);this.resize()}resize(){const A=this.radiusParam.value,g=this.sidesParam.value,C=this.angleParam.value/g,e=this.getVertexAttribute("positions");if(e)for(let i=0;i<g;i++)e.getValueRef(i).set(Math.cos(C*i)*A,Math.sin(C*i)*A,0)}}p.register("Circle",rt);class nB extends TC{constructor(A=1){super();if(isNaN(A))throw new Error("Invalid geom args");this.sizeParam=this.addParameter(new Y("Size",A))}rebuild(){this.setNumVertices(6),this.setNumSegments(3),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,2,3),this.setSegmentVertexIndices(2,4,5),this.resize()}resize(){const A=this.sizeParam.value,g=this.getVertexAttribute("positions");!g||(g.getValueRef(0).set(-.5*A,0,0),g.getValueRef(1).set(.5*A,0,0),g.getValueRef(2).set(0,.5*A,0),g.getValueRef(3).set(0,-.5*A,0),g.getValueRef(4).set(0,0,.5*A),g.getValueRef(5).set(0,0,-.5*A))}}p.register("Cross",nB);class BB extends TC{constructor(A=1,g=1,I=1,C=!1){super();this.sizeXParam=this.addParameter(new Y("X",A)),this.sizeYParam=this.addParameter(new Y("Y",g)),this.sizeZParam=this.addParameter(new Y("Z",I)),this.baseZAtZeroParam=this.addParameter(new RA("BaseZAtZero",C))}rebuild(){this.setNumVertices(8),this.setNumSegments(12),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,1,2),this.setSegmentVertexIndices(2,2,3),this.setSegmentVertexIndices(3,3,0),this.setSegmentVertexIndices(4,4,5),this.setSegmentVertexIndices(5,5,6),this.setSegmentVertexIndices(6,6,7),this.setSegmentVertexIndices(7,7,4),this.setSegmentVertexIndices(8,0,4),this.setSegmentVertexIndices(9,1,5),this.setSegmentVertexIndices(10,2,6),this.setSegmentVertexIndices(11,3,7),this.resize()}resize(){const A=this.sizeXParam.value,g=this.sizeYParam.value,I=this.sizeZParam.value,C=this.baseZAtZeroParam.value,e=this.getVertexAttribute("positions");if(e){let i=.5;C&&(i=1),e.getValueRef(0).set(.5*A,-.5*g,i*I),e.getValueRef(1).set(.5*A,.5*g,i*I),e.getValueRef(2).set(-.5*A,.5*g,i*I),e.getValueRef(3).set(-.5*A,-.5*g,i*I),i=-.5,C&&(i=0),e.getValueRef(4).set(.5*A,-.5*g,i*I),e.getValueRef(5).set(.5*A,.5*g,i*I),e.getValueRef(6).set(-.5*A,.5*g,i*I),e.getValueRef(7).set(-.5*A,-.5*g,i*I)}}}p.register("LinesCuboid",BB);class No extends TC{constructor(A=1,g=1,I=10,C=10,e=!1){super();if(this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.xParam=this.addParameter(new Y("X",A)),this.yParam=this.addParameter(new Y("Y",g)),this.xDivisionsParam=this.addParameter(new Y("XDivisions",I)),this.yDivisionsParam=this.addParameter(new Y("YDivisions",C)),this.skipCenterLinesParam=this.addParameter(new RA("SkipCenterLines",e)),this.topologyParams.push("XDivisions"),this.topologyParams.push("YDivisions"),this.topologyParams.push("SkipCenterLines")}rebuild(){const A=this.xDivisionsParam.value,g=this.yDivisionsParam.value,I=this.skipCenterLinesParam.value&&A%2==0&&g%2==0;this.setNumVertices((A+g+2-(I?1:0))*2),this.setNumSegments(A+g+2-(I?1:0));let C=0;for(let e=0;e<=A;e++){if(I&&e==A/2)continue;const i=C*2,s=C*2+1;this.setSegmentVertexIndices(C,i,s),C++}for(let e=0;e<=g;e++){if(I&&e==A/2)continue;const i=C*2,s=C*2+1;this.setSegmentVertexIndices(C,i,s),C++}this.resize()}resize(){const A=this.getVertexAttribute("positions"),g=this.xDivisionsParam.value,I=this.yDivisionsParam.value,C=this.xParam.value,e=this.yParam.value,i=this.skipCenterLinesParam.value&&g%2==0&&I%2==0;let s=0;for(let o=0;o<=g;o++){if(i&&o==g/2)continue;const a=s*2,n=s*2+1,B=(o/g-.5)*C;A&&(A.getValueRef(a).set(B,-.5*e,0),A.getValueRef(n).set(B,.5*e,0)),s++}for(let o=0;o<=I;o++){if(i&&o==g/2)continue;const a=s*2,n=s*2+1,B=(o/I-.5)*e;A&&(A.getValueRef(a).set(-.5*C,B,0),A.getValueRef(n).set(.5*C,B,0)),s++}}}p.register("Grid",No);class ct extends RI{constructor(A=.5,g=1,I=32,C=!0,e=!0,i=!0){super();if(this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new Y("Radius",A)),this.heightParam=this.addParameter(new Y("Height",g)),this.detailParam=this.addParameter(new Y("Detail",I>=3?I:3,[3,200],1)),this.capParam=this.addParameter(new RA("Cap",C)),e&&this.addVertexAttribute("normals",new hg),i&&this.addVertexAttribute("texCoords",new Xg),this.topologyParams.push("Detail"),this.topologyParams.push("Cap")}rebuild(){const A=this.detailParam.value,g=this.radiusParam.value,I=this.heightParam.value,C=this.capParam.value;let e=A+1;C&&(e+=1),this.setNumVertices(e);const i=A,s=A+1,o=this.getVertexAttribute("positions");if(o){o.getValueRef(i).set(0,0,I);for(let n=0;n<A;n++){const B=-(n/A*2*Math.PI);o.getValueRef(n).set(g*Math.cos(B),g*Math.sin(B),0)}C&&o.getValueRef(s).set(0,0,0)}this.setFaceCounts([A+(C?A:0)]);for(let n=0;n<A;n++){const B=(n+1)%A;this.setFaceVertexIndices(n,[B,n,i])}if(C)for(let n=0;n<A;n++){const B=(n+1)%A;this.setFaceVertexIndices(A+n,[n,B,s])}const a=this.getVertexAttribute("texCoords");if(a){let n=0;for(let B=0;B<A;B++)"setFaceVertexValue"in a&&(a.setFaceVertexValue(n,0,new K((B+1)/A,0)),a.setFaceVertexValue(n,1,new K(B/A,0)),a.setFaceVertexValue(n,2,new K((B+.5)/A,1)));if(C)for(let B=0;B<A;B++)a.setFaceVertexValue(n,0,new K(B/A,0)),a.setFaceVertexValue(n,1,new K((B+1)/A,0)),a.setFaceVertexValue(n,2,new K((B+.5)/A,1)),n++}this.resize()}resize(){const A=this.detailParam.value,g=this.radiusParam.value,I=this.heightParam.value,C=A,e=A+1,i=this.getVertexAttribute("positions");if(i){i.getValueRef(C).set(0,0,I);for(let o=0;o<A;o++){const a=-(o/A*2*Math.PI);i.getValueRef(o).set(g*Math.cos(a),g*Math.sin(a),0)}this.capParam.value&&i.getValueRef(e).set(0,0,0)}this.dirtyTopology=!1,this.dirtyVertices=!1,this.getVertexAttribute("normals")&&this.computeVertexNormals()}}p.register("Cone",ct);class _e extends RI{constructor(A=1,g=1,I=1,C=!1){super();if(isNaN(A)||isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new Y("X",A)),this.sizeYParam=this.addParameter(new Y("Y",g)),this.sizeZParam=this.addParameter(new Y("Z",I)),this.baseZAtZeroParam=this.addParameter(new RA("BaseZAtZero",C)),this.setFaceCounts([0,6]),this.setFaceVertexIndices(0,[0,1,2,3]),this.setFaceVertexIndices(1,[7,6,5,4]),this.setFaceVertexIndices(2,[1,0,4,5]),this.setFaceVertexIndices(3,[3,2,6,7]),this.setFaceVertexIndices(4,[0,3,7,4]),this.setFaceVertexIndices(5,[2,1,5,6]),this.setNumVertices(8),this.addVertexAttribute("normals",new hg)}rebuild(){const A=this.getVertexAttribute("normals");if(A)for(let g=0;g<6;g++){let I;switch(g){case 0:I=new f(0,0,1);break;case 1:I=new f(0,0,-1);break;case 2:I=new f(1,0,0);break;case 3:I=new f(-1,0,0);break;case 4:I=new f(0,-1,0);break;default:I=new f(0,1,0);break}A.setFaceVertexValue(g,0,I),A.setFaceVertexValue(g,1,I),A.setFaceVertexValue(g,2,I),A.setFaceVertexValue(g,3,I)}this.resize()}resize(){const A=this.sizeXParam.value,g=this.sizeYParam.value,I=this.sizeZParam.value,C=this.baseZAtZeroParam.value;let e=.5;const i=this.getVertexAttribute("positions");C&&(e=1),i&&(i.getValueRef(0).set(.5*A,-.5*g,e*I),i.getValueRef(1).set(.5*A,.5*g,e*I),i.getValueRef(2).set(-.5*A,.5*g,e*I),i.getValueRef(3).set(-.5*A,-.5*g,e*I),e=-.5,C&&(e=0),i.getValueRef(4).set(.5*A,-.5*g,e*I),i.getValueRef(5).set(.5*A,.5*g,e*I),i.getValueRef(6).set(-.5*A,.5*g,e*I),i.getValueRef(7).set(-.5*A,-.5*g,e*I))}}p.register("Cuboid",_e);class ht extends RI{constructor(A=.5,g=1,I=32,C=2,e=!0,i=!1){super();if(this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new Y("Radius",A)),this.heightParam=this.addParameter(new Y("Height",g)),this.sidesParam=this.addParameter(new Y("Sides",I>=3?I:3,[3,200],1)),this.loopsParam=this.addParameter(new Y("Loops",C>=2?C:2,[1,200],1)),this.capsParam=this.addParameter(new RA("Caps",e)),this.baseZAtZeroParam=this.addParameter(new RA("BaseZAtZero",i)),this.addVertexAttribute("texCoords",new Xg),this.addVertexAttribute("normals",new hg),this.topologyParams.push("Sides"),this.topologyParams.push("Loops"),this.topologyParams.push("Caps")}rebuild(){const A=this.sidesParam.value,g=this.loopsParam.value,I=this.capsParam.value;let C=A*g;I&&(C+=2),this.setNumVertices(C),I?this.setFaceCounts([A*2,A]):this.setFaceCounts([0,A]);let e=0;if(I){for(let o=0;o<A;o++){const a=C-1,n=o,B=(o+1)%A;this.setFaceVertexIndices(e++,[a,n,B])}for(let o=0;o<A;o++){const a=A*(g-1)+o,n=C-2,B=A*(g-1)+(o+1)%A;this.setFaceVertexIndices(e++,[a,n,B])}}for(let o=0;o<g-1;o++)for(let a=0;a<A;a++){const n=A*o+(a+1)%A,B=A*o+a,d=A*(o+1)+a,l=A*(o+1)+(a+1)%A;this.setFaceVertexIndices(e++,[n,B,d,l])}const i=this.getVertexAttribute("normals");if(i){if(e=0,I){const o=new f(0,0,-1);for(let a=0;a<A;a++)i.setFaceVertexValue(e,0,o),i.setFaceVertexValue(e,1,o),i.setFaceVertexValue(e,2,o),e++;o.set(0,0,1);for(let a=0;a<A;a++)i.setFaceVertexValue(e,0,o),i.setFaceVertexValue(e,1,o),i.setFaceVertexValue(e,2,o),e++}for(let o=0;o<g-1;o++)for(let a=0;a<A;a++){let n=a/A*2*Math.PI;const B=new f(Math.sin(n),Math.cos(n),0);i.setFaceVertexValue(e,0,B),i.setFaceVertexValue(e,1,B),n=(a+1)/A*2*Math.PI;const d=new f(Math.sin(n),Math.cos(n),0);i.setFaceVertexValue(e,2,d),i.setFaceVertexValue(e,3,d),e++}}const s=this.getVertexAttribute("texCoords");if(s){if(e=0,I){for(let o=0;o<A;o++)s.setFaceVertexValue(e,0,new K(o/A,0)),s.setFaceVertexValue(e,1,new K((o+1)/A,0)),s.setFaceVertexValue(e,2,new K((o+.5)/A,1)),e++;for(let o=0;o<A;o++)s.setFaceVertexValue(e,0,new K(o/A,0)),s.setFaceVertexValue(e,1,new K((o+1)/A,0)),s.setFaceVertexValue(e,2,new K((o+.5)/A,1)),e++}for(let o=0;o<A;o++)s.setFaceVertexValue(e,0,new K((o+1)/A,0)),s.setFaceVertexValue(e,2,new K((o+1)/A,1)),s.setFaceVertexValue(e,1,new K(o/A,0)),s.setFaceVertexValue(e,3,new K(o/A,1)),e++}this.resize()}resize(){const A=this.sidesParam.value,g=this.loopsParam.value,I=this.radiusParam.value,C=this.heightParam.value,e=this.capsParam.value,i=this.baseZAtZeroParam.value;let s=A*g;e&&(s+=2);let o=0,a=.5;i&&(a=0);const n=this.getVertexAttribute("positions");if(n){for(let B=0;B<g;B++){const d=B/(g-1)*C-C*a;for(let l=0;l<A;l++){const r=l/A*2*Math.PI;n.getValueRef(o).set(Math.sin(r)*I,Math.cos(r)*I,d),o++}}e&&(n.getValueRef(s-1).set(0,0,C*(i?0:-.5)),n.getValueRef(s-2).set(0,0,C*(i?1:.5)))}this.dirtyTopology=!1,this.dirtyVertices=!1,this.computeVertexNormals()}}p.register("Cylinder",ht);class lB extends RI{constructor(A=.5,g=32){super();if(this.topologyParams=[],isNaN(A)||isNaN(g))throw new Error("Invalid geom args");this.radiusParam=this.addParameter(new Y("Radius",A)),this.sidesParam=this.addParameter(new Y("Sides",g>=3?g:3,[3,200],1)),this.addVertexAttribute("texCoords",new Xg),this.addVertexAttribute("normals",new hg),this.topologyParams.push("Sides")}rebuild(){const A=this.sidesParam.value;this.setNumVertices(A+1),this.setFaceCounts([A]);const g=this.getVertexAttribute("positions");g&&g.getValueRef(0).set(0,0,0);for(let e=0;e<A;e++){const i=e%A+1,s=(e+1)%A+1;this.setFaceVertexIndices(e,[0,i,s])}const I=this.getVertexAttribute("normals");if(I){const e=new f(0,0,1);I.setValue(0,e);for(let i=0;i<A;i++)I.setValue(i+1,e)}const C=this.getVertexAttribute("texCoords");if(C){C.getValueRef(0).set(.5,.5);for(let e=0;e<A;e++){const i=e/A*2*Math.PI;C.getValueRef(e+1).set(Math.sin(i)*.5+.5,Math.cos(i)*.5+.5)}}this.resize()}resize(){const A=this.sidesParam.value,g=this.radiusParam.value,I=this.getVertexAttribute("positions");if(I)for(let C=0;C<A;C++){const e=C/A*2*Math.PI;I.getValueRef(C+1).set(Math.sin(e)*g,Math.cos(e)*g,0)}}}p.register("Disc",lB);class zI extends RI{constructor(A=1,g=1,I=1,C=1,e=!0,i=!0){super();if(this.topologyParams=[],isNaN(A)||isNaN(g)||isNaN(I)||isNaN(C))throw new Error("Invalid geom args");this.sizeXParam=this.addParameter(new Y("SizeX",A)),this.sizeYParam=this.addParameter(new Y("SizeY",g)),this.detailXParam=this.addParameter(new Y("DetailX",I)),this.detailYParam=this.addParameter(new Y("DetailY",C)),e&&this.addVertexAttribute("normals",new hg),i&&this.addVertexAttribute("texCoords",new Xg),this.topologyParams.push("DetailX"),this.topologyParams.push("DetailY")}rebuild(){const A=this.detailXParam.value,g=this.detailYParam.value;this.setNumVertices((A+1)*(g+1)),this.setFaceCounts([0,A*g]);let I=0;for(let s=0;s<g;s++)for(let o=0;o<A;o++){const a=(A+1)*(s+1)+o,n=(A+1)*s+o,B=(A+1)*s+(o+1),d=(A+1)*(s+1)+(o+1);this.setFaceVertexIndices(I,[a,n,B,d]),I=I+1}let C=0;const e=this.getVertexAttribute("normals");if(e)for(let s=0;s<=g;s++)for(let o=0;o<=A;o++)e.getValueRef(C).set(0,0,1),C++;C=0;const i=this.getVertexAttribute("texCoords");if(i)for(let s=0;s<=g;s++){const o=s/g;for(let a=0;a<=A;a++){const n=a/A;i.getValueRef(C).set(n,o),C++}}this.resize()}resize(){const A=this.sizeXParam.value,g=this.sizeYParam.value,I=this.detailXParam.value,C=this.detailYParam.value,e=this.getVertexAttribute("positions");if(!e)return;let i=0;for(let s=0;s<=C;s++){const o=(s/C-.5)*g;for(let a=0;a<=I;a++){const n=(a/I-.5)*A;e.getValueRef(i).set(n,o,0),i++}}}}p.register("Plane",zI);class _I extends RI{constructor(A=1,g=12,I=12,C=!0,e=!0){super();if(this.radiusParam=new Y("Radius",1),this.sidesParam=new Y("Sides",12,[3,200],1),this.loopsParam=new Y("Loops",6,[3,200],1),isNaN(A)||isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.addParameter(this.radiusParam),this.addParameter(this.sidesParam),this.addParameter(this.loopsParam),this.radiusParam.value=A,this.sidesParam.value=g,this.loopsParam.value=I,C&&this.addVertexAttribute("normals",new hg),e&&this.addVertexAttribute("texCoords",new Xg),this.topologyParams.push("Sides"),this.topologyParams.push("Loops")}rebuild(){const A=this.radiusParam.value,g=this.sidesParam.value,I=this.loopsParam.value,C=2+g*I,e=g*2,i=g*I;this.setNumVertices(C),this.setFaceCounts([e,i]);const s=this.getVertexAttribute("positions"),o=this.getVertexAttribute("normals"),a=new f(0,0,1);let n=0;if(!s)return;s.getValueRef(n).set(0,0,A),o&&o.getValueRef(n).set(0,0,1),n++;for(let l=0;l<I;l++){const r=(l+1)/(I+1)*Math.PI;for(let c=0;c<g;c++){const h=-(c/g*2*Math.PI);a.set(Math.sin(r)*Math.cos(h),Math.sin(r)*Math.sin(h),Math.cos(r)),s.getValueRef(n).setFromOther(a.scale(A)),o&&o.getValueRef(n).setFromOther(a),n++}}s.getValueRef(n).set(0,0,-A),o&&o.getValueRef(n).set(0,0,-1),n++;const B=this.getVertexAttribute("texCoords");let d=0;for(let l=0;l<g;l++){const c=(l+1)%g+1,h=l+1;if(this.setFaceVertexIndices(d,[0,c,h]),B){const E=new K(.5,0),b=new K((l+1)/(g-1),1/(I+1)),m=new K(l/(g-1),1/(I+1));B.setFaceVertexValue(d,0,E),B.setFaceVertexValue(d,1,b),B.setFaceVertexValue(d,2,m)}d++}for(let l=0;l<g;l++){const r=C-1,c=g*(I-1)+(l+1)%g+1,h=g*(I-1)+l+1;if(this.setFaceVertexIndices(d,[r,h,c]),B){const E=new K(.5,1),b=new K((l+1)/(g-1),1-1/(I+1)),m=new K(l/(g-1),1-1/(I+1));B.setFaceVertexValue(d,0,E),B.setFaceVertexValue(d,1,b),B.setFaceVertexValue(d,2,m)}d++}for(let l=0;l<I-1;l++)for(let r=0;r<g;r++){const c=g*l+r+1,h=g*l+(r+1)%g+1,E=g*(l+1)+(r+1)%g+1,b=g*(l+1)+r+1;this.setFaceVertexIndices(d,[c,h,E,b]),B&&(B.setFaceVertexValue(d,0,new K(r/g,(l+1)/I)),B.setFaceVertexValue(d,1,new K((r+1)/g,(l+1)/I)),B.setFaceVertexValue(d,2,new K((r+1)/g,(l+2)/I)),B.setFaceVertexValue(d,3,new K(r/g,(l+2)/I))),d++}}resize(){const A=this.radiusParam.value,g=this.sidesParam.value,I=this.loopsParam.value;if(!g||!I){console.warn("resize() failed");return}const C=this.getVertexAttribute("positions"),e=this.getVertexAttribute("normals");let i=0;const s=new f(0,0,1);C.getValueRef(i).set(0,0,A),e&&e.getValueRef(i).set(0,0,1),i++;for(let o=0;o<I;o++){const a=(o+1)/(I+1)*Math.PI;for(let n=0;n<g;n++){const B=-(n/g*2*Math.PI);s.set(Math.sin(a)*Math.cos(B),Math.sin(a)*Math.sin(B),Math.cos(a)),C.getValueRef(i).setFromOther(s.scale(A)),e&&e.getValueRef(i).setFromOther(s),i++}}C.getValueRef(i).set(0,0,-A),e&&e.getValueRef(i).set(0,0,-1),i++}}p.register("Sphere",_I);class Jo extends RI{constructor(A=.5,g=3,I=32,C=Math.PI*2){super();if(isNaN(A)||isNaN(g)||isNaN(I))throw new Error("Invalid geom args");this.innerRadiusParam=this.addParameter(new Y("InnerRadius",A)),this.outerRadiusParam=this.addParameter(new Y("OuterRadius",g)),this.detailParam=this.addParameter(new Y("Detail",I>=3?I:3,[3,200],1)),this.arcAngleParam=this.addParameter(new Y("ArcAngle",C)),this.addVertexAttribute("texCoords",new Xg),this.addVertexAttribute("normals",new hg),this.topologyParams.push("Detail"),this.topologyParams.push("ArcAngle")}rebuild(){const g=this.arcAngleParam.value<2*Math.PI,I=this.detailParam.value,C=I,e=I*2+(g?1:0),i=C*e;this.setNumVertices(i),this.setFaceCounts([0,C*e]);const s=this.getVertexAttribute("texCoords");if(s){let o=0;for(let a=0;a<(g?e-1:e);a++)for(let n=0;n<C;n++){const B=(a+1)%e,d=(n+1)%C,l=C*a+n,r=C*a+d,c=C*B+d,h=C*B+n;this.setFaceVertexIndices(o,[l,r,c,h]),s.setFaceVertexValue(o,0,new K(a/e,n/e)),s.setFaceVertexValue(o,1,new K(a/e,(n+1)/e)),s.setFaceVertexValue(o,2,new K((a+1)/e,(n+1)/e)),s.setFaceVertexValue(o,3,new K((a+1)/e,n/e)),o++}}this.resize()}resize(){const A=this.innerRadiusParam.value,g=this.outerRadiusParam.value,I=this.arcAngleParam.value,C=this.detailParam.value,e=I<2*Math.PI,i=C,s=C*2+(e?1:0),o=this.getVertexAttribute("positions"),a=this.getVertexAttribute("normals");if(!o||!a)return;let n=0;for(let B=0;B<s;B++){const d=-(B/(e?s-1:s)*I),l=Math.cos(d),r=Math.sin(d);for(let c=0;c<i;c++){const h=c/i*2*Math.PI,E=Math.sin(h),b=Math.cos(h),m=g+b*A;o.getValueRef(n).set(l*m,r*m,A*E),a.getValueRef(n).set(l*b,r*b,E),n++}}}}p.register("Torus",Jo);class mt extends Fg{constructor(A){super(A);this.__data=new Uint8Array(4),this.format="RGBA",this.type="UNSIGNED_BYTE",this.width=1,this.height=1}isLoaded(){return this.loaded}isStream(){return!1}setData(A,g,I){this.__data!=I&&(this.width=A,this.height=g,this.__data=I,this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")))}getParams(){const A=super.getParams();return A.data=this.__data,A}}p.register("DataImage2D",mt);p.register("DataImage",mt);const bi={};class II extends Fg{constructor(A,g="",I={}){super(A);this.__data=null,this.type="UNSIGNED_BYTE",this.crossOrigin="anonymous",g&&g!=""&&this.load(g)}setCrossOrigin(A){this.crossOrigin=A}getDOMElement(){return this.__data}load(A,g="RGB"){return new Promise((I,C)=>{if(!g){const i=A.lastIndexOf(".");i!=-1&&A.substring(i).toLowerCase()==".png"&&(g="RGBA")}this.format=g,this.loaded=!1;const e=()=>{this.url=A,this.width=this.__data.width,this.height=this.__data.height,this.loaded=!0,this.emit("loaded"),I()};A in bi?(this.__data=bi[A],this.__data.complete?e():(this.__data.addEventListener("load",e),this.__data.addEventListener("error",C))):(this.__data=new Image,this.__data.crossOrigin=this.crossOrigin,this.__data.src=A,this.__data.addEventListener("load",e),this.__data.addEventListener("error",C),bi[A]=this.__data)})}setImageURL(A,g="RGB"){this.load(A,g)}getParams(){const A=super.getParams();return this.loaded&&(A.data=this.__data),A}readBinary(A,g){this.setName(A.loadStr());const I=A.loadStr();if(typeof I=="string"&&I!=""){const C=g.url.substring(0,g.url.lastIndexOf("/"));this.load(C+"/"+I)}}}p.register("FileImage2D",II);p.register("FileImage",II);class dB extends II{constructor(A,g,I){super(A,g,I)}}p.register("LDRImage",dB);class Gt extends Fg{constructor(A,g={}){super(A);this.exposure=1,this.hdrTint=new W(1,1,1,1);let I;A!=null&&A.includes(".")&&(I=A,this.setName(A.substring(A.lastIndexOf("/")+1,A.lastIndexOf(".")))),this.type="FLOAT",I&&this.load(I)}__decodeData(A){return new Promise((g,I)=>{const C=A.ldr,e=A.cdm,i=new Blob([C.buffer]),s=new Image;s.onload=()=>{this.width=s.width,this.height=s.height,this.__data={ldr:s,cdm:e},this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded")),g()},s.src=URL.createObjectURL(i)})}load(A){return this.loaded=!1,new Promise((g,I)=>{const C=A.lastIndexOf("/")>-1?A.substring(A.lastIndexOf("/")+1):"",e=C.substring(0,C.lastIndexOf("."));this.getName()==""&&this.setName(e),this.type="FLOAT",AA.loadFile("archive",A).then(i=>{if(!i.ldr||!i.cdm)for(const s in i)s.endsWith(".jpg")?(i.ldr=i[s],delete i[s]):s.endsWith(".bin")&&(i.cdm=i[s],delete i[s]);this.__decodeData(i).then(()=>{g()})},i=>{this.emit("error",i),I(i)})})}isStream(){return!1}getParams(){const A=super.getParams();return this.loaded&&(A.data=this.__data,A.exposure=this.exposure),A}setHDRTint(A){this.hdrTint=A}getHDRTint(){return this.hdrTint}readBinary(A,g){this.setName(A.loadStr());let I=A.loadStr();typeof I=="string"&&I!=""&&this.load(I)}}p.register("HDRImage",Gt);class rB extends II{constructor(A,g,I){super(A,g,I);this.videoElem=new HTMLVideoElement,this.muteParam=new RA("Mute",!1),this.loopParam=new RA("Loop",!0),this.spatializeAudioParam=new RA("SpatializeAudio",!0),this.refDistanceParam=new Y("refDistance",2),this.maxDistanceParam=new Y("maxDistance",1e4),this.rolloffFactorParam=new Y("rolloffFactor",1),this.coneInnerAngleParam=new Y("coneInnerAngle",360),this.coneOuterAngleParam=new Y("coneOuterAngle",0),this.coneOuterGainParam=new Y("coneOuterGain",1),this.gainParam=new Y("Gain",2),this.format="RGB",this.type="UNSIGNED_BYTE",this.addParameter(this.muteParam),this.addParameter(this.loopParam),this.addParameter(this.spatializeAudioParam),this.addParameter(this.refDistanceParam),this.addParameter(this.maxDistanceParam),this.addParameter(this.rolloffFactorParam),this.addParameter(this.coneInnerAngleParam),this.addParameter(this.coneOuterAngleParam),this.addParameter(this.coneOuterGainParam),this.addParameter(this.gainParam).setRange([0,5])}getAudioSource(){return this.videoElem}load(A,g="RGB"){return new Promise((I,C)=>{AA.incrementWorkload(1),this.videoElem.style.display="none",this.videoElem.preload="auto",this.videoElem.crossOrigin="anonymous",document.body.appendChild(this.videoElem),this.videoElem.addEventListener("loadedmetadata",()=>{this.videoElem.muted=this.muteParam.value,this.muteParam.on("valueChanged",()=>{this.videoElem.muted=this.muteParam.value}),this.videoElem.loop=this.loopParam.value,this.loopParam.on("valueChanged",()=>{this.videoElem.loop=this.loopParam.value}),this.width=this.videoElem.videoHeight,this.height=this.videoElem.videoWidth,this.loaded=!0,AA.incrementWorkDone(1),this.emit("loaded"),I(e);let i=0;const s=29.97,o=()=>{if(this.videoElem.paused||this.videoElem.ended)return;const a=Math.floor(this.videoElem.currentTime*s);i!=a&&(this.emit("updated"),i=a),setTimeout(o,20)};o()},!1),this.videoElem.src=A;const e=this.videoElem.play();e!==void 0&&e.then(i=>{console.log("Autoplay started!")}).catch(()=>{console.log("Autoplay was prevented.")})})}getParams(){const A=super.getParams();return this.loaded&&(A.data=this.videoElem),A}}p.register("LDRVideo",rB);function CI(t){this.data=t,this.pos=0}CI.prototype.readByte=function(){return this.data[this.pos++]};CI.prototype.peekByte=function(){return this.data[this.pos]};CI.prototype.readBytes=function(t){for(var A=new Array(t),g=0;g<t;g++)A[g]=this.readByte();return A};CI.prototype.peekBytes=function(t){for(var A=new Array(t),g=0;g<t;g++)A[g]=this.data[this.pos+g];return A};CI.prototype.readString=function(t){for(var A="",g=0;g<t;g++)A+=String.fromCharCode(this.readByte());return A};CI.prototype.readBitArray=function(){for(var t=[],A=this.readByte(),g=7;g>=0;g--)t.push(!!(A&1<<g));return t};CI.prototype.readUnsigned=function(t){var A=this.readBytes(2);return t?(A[1]<<8)+A[0]:(A[0]<<8)+A[1]};function zC(t){this.stream=new CI(t),this.output={}}zC.prototype.parse=function(t){return this.parseParts(this.output,t),this.output};zC.prototype.parseParts=function(t,A){for(var g=0;g<A.length;g++){var I=A[g];this.parsePart(t,I)}};zC.prototype.parsePart=function(t,A){var g=A.label,I;if(!(A.requires&&!A.requires(this.stream,this.output,t)))if(A.loop){for(var C=[];A.loop(this.stream);){var e={};this.parseParts(e,A.parts),C.push(e)}t[g]=C}else A.parts?(I={},this.parseParts(I,A.parts),t[g]=I):A.parser?(I=A.parser(this.stream,this.output,t),A.skip||(t[g]=I)):A.bits&&(t[g]=this.parseBits(A.bits))};function cB(t){return t.reduce(function(A,g){return A*2+g},0)}zC.prototype.parseBits=function(t){var A={},g=this.stream.readBitArray();for(var I in t){var C=t[I];C.length?A[I]=cB(g.slice(C.index,C.index+C.length)):A[I]=g[C.index]}return A};var xA={readByte:function(){return function(t){return t.readByte()}},readBytes:function(t){return function(A){return A.readBytes(t)}},readString:function(t){return function(A){return A.readString(t)}},readUnsigned:function(t){return function(A){return A.readUnsigned(t)}},readArray:function(t,A){return function(g,I,C){for(var e=A(g,I,C),i=new Array(e),s=0;s<e;s++)i[s]=g.readBytes(t);return i}}},Pe={label:"blocks",parser:function(t){for(var A=[],g=0,I=t.readByte();I!==g;I=t.readByte())A=A.concat(t.readBytes(I));return A}},hB={label:"gce",requires:function(t){var A=t.peekBytes(2);return A[0]===33&&A[1]===249},parts:[{label:"codes",parser:xA.readBytes(2),skip:!0},{label:"byteSize",parser:xA.readByte()},{label:"extras",bits:{future:{index:0,length:3},disposal:{index:3,length:3},userInput:{index:6},transparentColorGiven:{index:7}}},{label:"delay",parser:xA.readUnsigned(!0)},{label:"transparentColorIndex",parser:xA.readByte()},{label:"terminator",parser:xA.readByte(),skip:!0}]},mB={label:"image",requires:function(t){var A=t.peekByte();return A===44},parts:[{label:"code",parser:xA.readByte(),skip:!0},{label:"descriptor",parts:[{label:"left",parser:xA.readUnsigned(!0)},{label:"top",parser:xA.readUnsigned(!0)},{label:"width",parser:xA.readUnsigned(!0)},{label:"height",parser:xA.readUnsigned(!0)},{label:"lct",bits:{exists:{index:0},interlaced:{index:1},sort:{index:2},future:{index:3,length:2},size:{index:5,length:3}}}]},{label:"lct",requires:function(t,A,g){return g.descriptor.lct.exists},parser:xA.readArray(3,function(t,A,g){return Math.pow(2,g.descriptor.lct.size+1)})},{label:"data",parts:[{label:"minCodeSize",parser:xA.readByte()},Pe]}]},GB={label:"text",requires:function(t){var A=t.peekBytes(2);return A[0]===33&&A[1]===1},parts:[{label:"codes",parser:xA.readBytes(2),skip:!0},{label:"blockSize",parser:xA.readByte()},{label:"preData",parser:function(t,A,g){return t.readBytes(g.text.blockSize)}},Pe]},EB={label:"application",requires:function(t,A,g){var I=t.peekBytes(2);return I[0]===33&&I[1]===255},parts:[{label:"codes",parser:xA.readBytes(2),skip:!0},{label:"blockSize",parser:xA.readByte()},{label:"id",parser:function(t,A,g){return t.readString(g.blockSize)}},Pe]},QB={label:"comment",requires:function(t,A,g){var I=t.peekBytes(2);return I[0]===33&&I[1]===254},parts:[{label:"codes",parser:xA.readBytes(2),skip:!0},Pe]},uB={label:"frames",parts:[hB,EB,QB,mB,GB],loop:function(t){var A=t.peekByte();return A===33||A===44}},bB=[{label:"header",parts:[{label:"signature",parser:xA.readString(3)},{label:"version",parser:xA.readString(3)}]},{label:"lsd",parts:[{label:"width",parser:xA.readUnsigned(!0)},{label:"height",parser:xA.readUnsigned(!0)},{label:"gct",bits:{exists:{index:0},resolution:{index:1,length:3},sort:{index:4},size:{index:5,length:3}}},{label:"backgroundColorIndex",parser:xA.readByte()},{label:"pixelAspectRatio",parser:xA.readByte()}]},{label:"gct",requires:function(t,A){return A.lsd.gct.exists},parser:xA.readArray(3,function(t,A){return Math.pow(2,A.lsd.gct.size+1)})},uB],yB=bB;function Et(t){var A=new Uint8Array(t),g=new zC(A);this.raw=g.parse(yB),this.raw.hasImages=!1;for(var I=0;I<this.raw.frames.length;I++)if(this.raw.frames[I].image){this.raw.hasImages=!0;break}}Et.prototype.decompressFrame=function(t,A){if(t>=this.raw.frames.length)return null;var g=this.raw.frames[t];if(g.image){var I=g.image.descriptor.width*g.image.descriptor.height,C=i(g.image.data.minCodeSize,g.image.data.blocks,I);g.image.descriptor.lct.interlaced&&(C=s(C,g.image.descriptor.width));var e={pixels:C,dims:{top:g.image.descriptor.top,left:g.image.descriptor.left,width:g.image.descriptor.width,height:g.image.descriptor.height}};return g.image.descriptor.lct&&g.image.descriptor.lct.exists?e.colorTable=g.image.lct:e.colorTable=this.raw.gct,g.gce&&(e.delay=(g.gce.delay||10)*10,e.disposalType=g.gce.extras.disposal,g.gce.extras.transparentColorGiven&&(e.transparentIndex=g.gce.transparentColorIndex)),A&&(e.patch=o(e)),e}return null;function i(a,n,B){var d=4096,l=-1,r=B,c,h,E,b,m,G,y,Q,u,Z,w,R,S,H,X,F,_=new Array(B),oA=new Array(d),sA=new Array(d),x=new Array(d+1);for(R=a,h=1<<R,m=h+1,c=h+2,y=l,b=R+1,E=(1<<b)-1,u=0;u<h;u++)oA[u]=0,sA[u]=u;for(w=Q=S=H=F=X=0,Z=0;Z<r;){if(H===0){if(Q<b){w+=n[X]<<Q,Q+=8,X++;continue}if(u=w&E,w>>=b,Q-=b,u>c||u==m)break;if(u==h){b=R+1,E=(1<<b)-1,c=h+2,y=l;continue}if(y==l){x[H++]=sA[u],y=u,S=u;continue}for(G=u,u==c&&(x[H++]=S,u=y);u>h;)x[H++]=sA[u],u=oA[u];S=sA[u]&255,x[H++]=S,c<d&&(oA[c]=y,sA[c]=S,c++,(c&E)===0&&c<d&&(b++,E+=c)),y=G}H--,_[F++]=x[H],Z++}for(Z=F;Z<r;Z++)_[Z]=0;return _}function s(a,n){for(var B=new Array(a.length),d=a.length/n,l=function(m,G){var y=a.slice(G*n,(G+1)*n);B.splice.apply(B,[m*n,n].concat(y))},r=[0,4,2,1],c=[8,8,4,2],h=0,E=0;E<4;E++)for(var b=r[E];b<d;b+=c[E])l(b,h),h++;return B}function o(a){for(var n=a.pixels.length,B=new Uint8ClampedArray(n*4),d=0;d<n;d++){var l=d*4,r=a.pixels[d],c=a.colorTable[r];B[l]=c[0],B[l+1]=c[1],B[l+2]=c[2],B[l+3]=r!==a.transparentIndex?255:0}return B}};Et.prototype.decompressFrames=function(t){for(var A=[],g=0;g<this.raw.frames.length;g++){var I=this.raw.frames[g];I.image&&A.push(this.decompressFrame(g,t))}return A};const yi={};class ZB extends II{constructor(A,g="",I={}){super(A,g,I);this.streamAtlasDescParam=new TI("StreamAtlasDesc"),this.streamAtlasIndexParam=new Y("StreamAtlasIndex",0),this.format="RGBA",this.type="UNSIGNED_BYTE",this.__streamAtlas=!0,this.addParameter(this.streamAtlasDescParam),this.addParameter(this.streamAtlasIndexParam);const C=this.streamAtlasIndexParam;C.setRange([0,1]);let e,i=0;const s=o=>{C.value=i,e&&setTimeout(()=>s(o),this.getFrameDelay(i)),i=(i+1)%o};this.play=()=>{this.__resourcePromise.then(()=>{e=!0;let o=C.getRange();if(!o){console.warn("numFrames is null");return}const a=o[1];s(a)})},this.stop=()=>{e=!1}}getFrameDelay(A){return this.__unpackedData.frameDelays[A]*10}load(A,g="RGB"){return A in yi?(this.__resourcePromise=yi[A],this.__resourcePromise):(this.__resourcePromise=new Promise((I,C)=>{AA.incrementWorkload(1),Xo(A,e=>{console.warn("Unpacking Gif client side:"+A);const i=performance.now(),o=new Et(e).decompressFrames(!0),a=Math.sqrt(o.length),n=[a,a];P.fract(a)>0&&(n[0]=Math.floor(n[0]+1),P.fract(a)>.5?n[1]=Math.floor(n[1]+1):n[1]=Math.floor(n[1]));const B=o[0].dims.width,d=o[0].dims.height,l=document.createElement("canvas"),r=l.getContext("2d"),c=document.createElement("canvas"),h=c.getContext("2d");c.width=B,c.height=d;const E=document.createElement("canvas"),b=E.getContext("2d");E.width=n[0]*B,E.height=n[1]*d;let m;const G=[],y=(Z,w)=>{const R=Z.dims;G.push(Z.delay/10),(!m||R.width!=m.width||R.height!=m.height)&&(l.width=R.width,l.height=R.height,m=r==null?void 0:r.createImageData(R.width,R.height)),m.data.set(Z.patch),r==null||r.putImageData(m,0,0),Z.disposalType==2&&(h==null||h.clearRect(0,0,c.width,c.height)),h==null||h.drawImage(l,R.left,R.top),b==null||b.drawImage(c,w%n[0]*B,Math.floor(w/n[0])*d)};for(let Z=0;Z<o.length;Z++)y(o[Z],Z);AA.incrementWorkDone(1);const Q=b==null?void 0:b.getImageData(0,0,E.width,E.height),u=performance.now()-i;console.log(`Decode GIF '${A}' time:`+u),I({width:E.width,height:E.height,atlasSize:n,frameRange:[0,o.length],frameDelays:G,imageData:Q})},e=>{const i="Unable to Load URL:"+e+":"+A;console.warn(i),C(i)})}),yi[A]=this.__resourcePromise,this.__resourcePromise.then(I=>{this.width=I.width,this.height=I.height,this.streamAtlasDescParam.value=new cA(I.atlasSize[0],I.atlasSize[1],0,0),this.streamAtlasIndexParam.setRange(I.frameRange),this.__unpackedData=I,this.__data=I.imageData,this.loaded=!0,this.emit("loaded")}),this.__resourcePromise)}}p.register("GIFImage",ZB);class Qt extends Gt{constructor(A,g={}){super(A,g);this.headlightModeParam=new RA("HeadLightMode",!1),this.addParameter(this.headlightModeParam),this.utf8decoder=new TextDecoder,this.shCoeffs=[]}__decodeData(A){const g=A.samples;if(g&&(this.luminanceData=JSON.parse(this.utf8decoder.decode(g)),this.luminanceData.shCoeffs))for(let I=0;I<9;I++)this.shCoeffs[I]=new W(this.luminanceData.shCoeffs[I*3+0],this.luminanceData.shCoeffs[I*3+1],this.luminanceData.shCoeffs[I*3+2]);return super.__decodeData(A)}dirToLuminance(A){const g=A.x,I=A.y,C=A.z,e=this.shCoeffs[0].scale(.886227);return e.addInPlace(this.shCoeffs[1].scale(2*.511664*I)),e.addInPlace(this.shCoeffs[2].scale(2*.511664*C)),e.addInPlace(this.shCoeffs[3].scale(2*.511664*g)),e.addInPlace(this.shCoeffs[4].scale(2*.429043*g*I)),e.addInPlace(this.shCoeffs[5].scale(2*.429043*I*C)),e.addInPlace(this.shCoeffs[6].scale(.743125*C*C-.247708)),e.addInPlace(this.shCoeffs[7].scale(2*.429043*g*C)),e.addInPlace(this.shCoeffs[8].scale(.429043*(g*g-I*I))),e.luminance()}}p.register("EnvMap",Qt);function RB(){if(!globalThis.navigator)return"en";const t=new URLSearchParams(window.location.search);if(t.has("lang"))return t.get("lang");const A=globalThis.navigator;let g,I;const C=e=>e.startsWith("en")?"En":e.startsWith("es")?"Es":e.startsWith("fr")?"Fr":e.startsWith("gb")||e.startsWith("de")?"Gb":e;if(Array.isArray(A.languages)){for(g=0;g<A.languages.length;g++)if(I=A.languages[g],I&&I.length)return C(I)}return null}class fB extends FA{constructor(){super();this.__labelLibraries={},this.__language=RB(),this.__foundLabelLibraries={}}loadLibrary(A,g){const I=A.substring(0,A.lastIndexOf("."));if(this.__foundLabelLibraries[I]=g,A.endsWith(".labels"))_i(g,C=>{this.__labelLibraries[I]=JSON.parse(C),this.emit("labelLibraryLoaded",{library:I})});else if(A.endsWith(".xlsx")){const C=globalThis.XLSX;Xo(g,e=>{const i=new Uint8Array(e),s=C.read(i,{type:"array"}),o={};s.SheetNames.forEach(function(a){C.utils.sheet_to_json(s.Sheets[a],{}).forEach(function(B){const d=B.Identifier;delete B.Identifier,o[d]=B})}),this.__labelLibraries[I]=o,this.emit("labelLibraryLoaded",{library:I})})}}isLibraryFound(A){return A in this.__foundLabelLibraries}isLibraryLoaded(A){return A in this.__labelLibraries}getLabelText(A,g){const I=this.__labelLibraries[A];if(!I)throw new Error("LabelLibrary: '"+A+"' not found in LabelManager. Found: ["+Object.keys(this.__labelLibraries)+"]");const C=I[g];if(!C)throw new Error("Label: '"+g+"' not found in LabelLibrary: '"+A+"'. Found: ["+Object.keys(I)+"]");const e=C[this.__language];if(!e){if(C.En)return C.En;throw new Error("labelText: '"+this.__language+"' not found in Label. Found: ["+Object.keys(C)+"]")}return e}setLabelText(A,g,I){let C=this.__labelLibraries[A];C||(C={},this.__labelLibraries[A]=C);let e=C[g];e||(e={},C[g]=e),e[this.__language]=I}setLanguage(A){this.__language=A}}const te=new fB;function wB(t,A,g,I,C,e,i=!1,s=!0,o){if(typeof s=="undefined"&&(s=!0),typeof e=="undefined"&&(e=5),typeof e=="number")e={tl:e,tr:e,br:e,bl:e};else{const a={tl:0,tr:0,br:0,bl:0};for(const n in a)e[n]=e[n]||a[n]}t.beginPath(),t.moveTo(A+e.tl,g),t.lineTo(A+I-e.tr,g),t.quadraticCurveTo(A+I,g,A+I,g+e.tr),t.lineTo(A+I,g+C-e.br),t.quadraticCurveTo(A+I,g+C,A+I-e.br,g+C),t.lineTo(A+e.bl,g+C),t.quadraticCurveTo(A,g+C,A,g+C-e.bl),t.lineTo(A,g+e.tl),t.quadraticCurveTo(A,g,A+e.tl,g),t.closePath(),i&&t.fill(),s&&(t.lineWidth=o,t.stroke())}class ut extends mt{constructor(A,g){super(A);this.requestedReRender=!1,this.libraryParam=new Zg("Library"),this.textParam=new Zg("Text",""),this.fontColorParam=new ag("FontColor",new W(0,0,0)),this.fontSizeParam=new Y("FontSize",22),this.fontParam=new Zg("Font","Helvetica"),this.borderWidthParam=new Y("BorderWidth",2),this.outlineParam=new RA("Outline",!1),this.outlineColorParam=new ag("OutlineColor",new W(0,0,0)),this.backgroundParam=new RA("Background",!0),this.backgroundColorParam=new ag("BackgroundColor",new W("#FBC02D")),this.fillBackgroundParam=new RA("FillBackground",!0),this.strokeBackgroundOutlineParam=new RA("StrokeBackgroundOutline",!0),this.canvasElem=document.createElement("canvas");const I=22;this.marginParam=new Y("Margin",I*.5),this.borderRadiusParam=new Y("BorderRadius",I*.5),this.addParameter(this.marginParam),this.addParameter(this.borderRadiusParam),this.addParameter(this.libraryParam),this.addParameter(this.textParam),this.addParameter(this.fontColorParam),this.addParameter(this.fontSizeParam),this.addParameter(this.fontParam),this.addParameter(this.borderWidthParam),this.addParameter(this.outlineParam),this.addParameter(this.outlineColorParam),this.addParameter(this.backgroundParam),this.addParameter(this.backgroundColorParam),this.addParameter(this.fillBackgroundParam),this.addParameter(this.strokeBackgroundOutlineParam);const C=()=>{this.loadLabelData()};this.on("nameChanged",C),g&&(this.libraryParam.value=g),this.requestedReRender=!1,this.needsRender=!1,this.loadLabelData()}__parameterValueChanged(A){super.parameterValueChanged(A),this.requestedReRender||(this.requestedReRender=!0,this.loadLabelData())}loadLabelData(){const A=()=>{this.requestedReRender=!1,this.needsRender=!0,this.loaded?this.emit("updated"):(this.loaded=!0,this.emit("loaded"))},g=()=>new Promise(C=>{const e=this.libraryParam.value;if(e==""){C();return}if(!te.isLibraryFound(e)){console.warn("Label Library not found:",e),C();return}const i=()=>{try{const s=this.getName(),o=te.getLabelText(e,s);this.textParam.value=o}catch(s){console.warn(s)}C()};te.isLibraryLoaded(e)?i():te.on("labelLibraryLoaded",s=>{s.library==e&&i()})}),I=()=>new Promise(C=>{if(document.fonts!=null){const e=this.fontParam.value,i=this.fontSizeParam.value;document.fonts.load(i+'px "'+e+'"').then(()=>{C()})}else C()});Promise.all([g(),I()]).then(A)}renderLabelToImage(){const A=this.canvasElem.getContext("2d",{alpha:!0});let g=this.textParam.value;g==""&&(g=this.getName());const I=this.fontParam.value,C=this.fontColorParam.value,e="left",i=this.fontSizeParam.value,s=this.marginParam.value,o=this.borderWidthParam.value,a=this.borderRadiusParam.value,n=this.outlineParam.value,B=this.outlineColorParam.value,d=this.backgroundParam.value,l=this.backgroundColorParam.value,r=this.fillBackgroundParam.value,c=this.strokeBackgroundOutlineParam.value,h=s+o,E=g.split(`
`);A.font=i+'px "'+I+'"';let b=0;E.forEach(G=>{b=Math.max(A.measureText(G).width,b)});const m=i;this.width=Math.ceil(b+h*2),this.height=Math.ceil(m*E.length+h*2),A.canvas.width=this.width,A.canvas.height=this.height,this.canvasElem.width=this.width,this.canvasElem.height=this.height,A.fillStyle="rgba(0, 0, 0, 0.0)",A.fillRect(0,0,this.width,this.height),d&&(A.fillStyle=l.toHex(),A.strokeStyle=B.toHex(),wB(A,o,o,this.width-o*2,this.height-o*2,a,r,c,o)),A.font=i+'px "'+I+'"',A.textAlign=e,A.fillStyle=C.toHex(),A.textBaseline="hanging",E.forEach((G,y)=>{A.fillText(G,h,h+y*m)}),n&&(A.strokeStyle=B.toHex(),A.lineWidth=1.5,A.strokeText(g,h,h)),this.__data=A.getImageData(0,0,this.width,this.height),this.needsRender=!1,this.emit("labelRendered",{width:this.width,height:this.height,data:this.__data})}getParams(){return this.needsRender&&this.renderLabelToImage(),super.getParams()}}p.register("Label",ut);class VB extends Fg{constructor(){super("")}connectWebcam(A,g,I=!1){const C={width:A,height:g,frameRate:{ideal:60,max:60}};I?C.facingMode={exact:"environment"}:C.facingMode={facingMode:"user"};const e=document.createElement("video");e.style.display="none",e.preload="auto",e.crossOrigin="anonymous",document.body.appendChild(e),navigator.mediaDevices.getUserMedia({audio:!1,video:C}).then(i=>{e.srcObject=i,e.onloadedmetadata=s=>{e.play(),this.width=e.videoWidth,this.height=e.videoHeight,console.log("Webcam:["+this.width+", "+this.height+"]"),this.__data=e,this.loaded=!0,this.emit("loaded");let o=0;const a=60,n=()=>{if(e.paused||e.ended)return;const B=Math.floor(e.currentTime*a);o!=B&&(this.emit("updated"),o=B),setTimeout(n,20)};n()}}).catch(function(i){})}setVideoStream(A){this.loaded=!1,this.width=A.videoWidth,this.height=A.videoHeight,this.start(),this.__data=A,this.loaded=!0,this.emit("loaded")}stop(){clearInterval(this.__intervalId)}start(){this.__intervalId=setInterval(()=>{this.emit("updated")},20)}isLoaded(){return this.loaded}getParams(){return{type:this.type,format:this.format,width:this.width,height:this.height,data:this.__data,flipY:!0}}}p.register("VideoStreamImage2D",VB);class wA extends gI{constructor(A,g){super(A);this.__isOpaque=!0,this.__isTextured=!1,this.__shaderName="",g&&this.setShaderName(g)}getShaderName(){return this.__shaderName}setShaderName(A){if(this.__shaderName==A)return;this.__shaderName=A;const I=p.getClassDefinition(A).getMaterialTemplate();if(!I)throw new Error("Error setting Shader. Material template not registered found:"+A);const C={};let e=I.getNumParameters();for(;e--;){const s=I.getParameterByIndex(e);this.getParameter(s.getName())||this.addParameter(s.clone()),C[s.getName()]=!0}for(const s of this.params)C[s.getName()]||this.removeParameter(s.getName());this.__shaderName=A,this.__checkOpacity({});const i=new Rn(A);this.emit("shaderNameChanged",i)}removeAllTextures(){for(const A of this.params)A instanceof VA?A.getImage()&&A.setImage(null):A instanceof PA&&A.getImage()&&A.setImage(null)}getParamTextures(){const A={};for(const g of this.params)g instanceof VA?g.getImage()&&(A[g.getName()]=g.getImage()):g instanceof PA&&g.getImage()&&(A[g.getName()]=g.getImage());return A}isOpaque(){return this.__isOpaque}__checkOpacity(A){let g=!0;try{this.getShaderClass().isOpaque()||(g=!1)}catch{}if(g){const I=this.getParameter("Opacity");if(I&&(I.value<.99||I instanceof PA&&I.getImage()))g=!1;else{const C=this.getParameter("BaseColor");if(C){if(C instanceof VA){const e=C.getImage();e&&e.format=="RGBA"&&(g=!1)}g&&C.value&&C.value.a<1&&(g=!1)}}}if(g!=this.__isOpaque){this.__isOpaque=g;const I=new So(g,!0);this.emit("opacityChanged",I),this.emit("transparencyChanged",I)}}isTextured(){return this.__isTextured}__checkTextures(A){const g=A||{};let I=!1;for(const C of this.params)if(C instanceof VA){if(C.getImage()){I=!0;break}}else if(C instanceof PA&&C.getImage()){I=!0;break}if(I!=this.__isTextured){this.__isTextured=I;let C=new fn(I,g);this.emit("texturedChanged",C)}}parameterValueChanged(A){this.__checkOpacity(A),this.__checkTextures(A),super.parameterValueChanged(A)}getShaderClass(){return p.getClassDefinition(this.getShaderName())}toJSON(A){const g=super.toJSON(A);return g.shader=this.__shaderName,g}fromJSON(A,g={}){if(!A.shader){console.warn("Invalid Material JSON");return}this.setShaderName(A.shader),super.fromJSON(A,g)}readBinary(A,g){let I=A.loadStr();if(I=="StandardMaterial"&&(I="StandardSurfaceShader"),I=="TransparentMaterial"&&(I="StandardSurfaceShader"),this.setShaderName(I),g.versions["zea-engine"].compare([0,0,3])<0)throw`Loading zcad files of version ${g.versions["zea-engine"]} is not longer support`;super.readBinary(A,g),this.__checkOpacity(),this.__checkTextures()}clone(A){const g=new wA("clone","");return g.copyFrom(this,A),g}copyFrom(A,g){this.setShaderName(A.getShaderName()),super.copyFrom(A,g)}}p.register("Material",wA);class Oe extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.opacityParam=new Y("Opacity",1),this.lineThicknessParam=new Y("LineThickness",.01),this.overlayParam=new Y("Overlay",0),this.__shaderName="FatLinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.lineThicknessParam)}}p.register("FatLinesMaterial",Oe);class je extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.pointSizeParam=new Y("PointSize",1),this.roundedParam=new Y("Rounded",1),this.borderWidthParam=new Y("BorderWidth",.2),this.overlayParam=new Y("Overlay",0),this.__shaderName="FatPointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.roundedParam),this.addParameter(this.borderWidthParam),this.addParameter(this.overlayParam)}clone(A){const g=new je;return g.copyFrom(this,A),g}}p.register("FatPointsMaterial",je);class _C extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.overlayParam=new PA("Overlay",0),this.__shaderName="FlatSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.overlayParam)}clone(A){const g=new _C;return g.copyFrom(this,A),g}}p.register("FlatSurfaceMaterial",_C);class Dg extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.opacityParam=new PA("Opacity",.7,[0,1]),this.overlayParam=new PA("Overlay",1e-6),this.hiddenEdgeColorParam=new VA("HiddenEdgeColor",new W(.2,.2,.2,0)),this.__shaderName="LinesShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.overlayParam),this.addParameter(this.hiddenEdgeColorParam)}clone(A){const g=new Dg;return g.copyFrom(this,A),g}}p.register("LinesMaterial",Dg);class qe extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.pointSizeParam=new PA("PointSize",2),this.overlayParam=new PA("Overlay",2e-5),this.__shaderName="PointsShader",this.addParameter(this.baseColorParam),this.addParameter(this.pointSizeParam),this.addParameter(this.overlayParam)}clone(A){const g=new qe;return g.copyFrom(this,A),g}}p.register("PointsMaterial",qe);class $e extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.__shaderName="ScreenSpaceShader",this.addParameter(this.baseColorParam)}clone(A){const g=new $e;return g.copyFrom(this,A),g}}p.register("ScreenSpaceMaterial",$e);class Ai extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.opacityParam=new PA("Opacity",1,[0,1]),this.emissiveStrengthParam=new PA("EmissiveStrength",0,[0,1]),this.__shaderName="SimpleSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.opacityParam),this.addParameter(this.emissiveStrengthParam)}clone(A){const g=new Ai;return g.copyFrom(this,A),g}}p.register("SimpleSurfaceMaterial",Ai);class gi extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.normalParam=new VA("Normal",new W(1,1,.5)),this.ambientOcclusion=new PA("AmbientOcclusion",1,[0,1]),this.metallicParam=new PA("Metallic",.05,[0,1]),this.roughnessParam=new PA("Roughness",.5,[0,1]),this.reflectanceParam=new PA("Reflectance",.5,[0,1]),this.emissiveStrengthParam=new PA("EmissiveStrength",0,[0,1]),this.opacityParam=new PA("Opacity",1,[0,1]),this.edgeColorParam=new VA("EdgeColor",new W(.2,.2,.2)),this.pointColorParam=new VA("PointColor",new W(.1,.1,.1)),this.hiddenEdgeColorParam=new VA("HiddenEdgeColor",new W(.2,.2,.2,0)),this.__shaderName="StandardSurfaceShader",this.addParameter(this.baseColorParam),this.addParameter(this.normalParam),this.addParameter(this.ambientOcclusion),this.addParameter(this.metallicParam),this.addParameter(this.roughnessParam),this.addParameter(this.reflectanceParam),this.addParameter(this.emissiveStrengthParam),this.addParameter(this.opacityParam),this.addParameter(this.edgeColorParam),this.addParameter(this.pointColorParam),this.addParameter(this.hiddenEdgeColorParam)}clone(A){const g=new gi;return g.copyFrom(this,A),g}}p.register("StandardSurfaceMaterial",gi);class SB extends FA{constructor(){super();this.assetItem=null}}class rI extends L{constructor(A){super(A);this.srcTreePath=[],this.srcTree=null}setSrcTree(A){this.srcTree=A;const g=new SB,I=this.srcTree.clone(g);I.localXfoParam.value=new D,this.addChild(I,!1,!1)}getSrcTree(){return this.srcTree}readBinary(A,g){if(super.readBinary(A,g),this.srcTreePath=A.loadStrArray(),this.srcTreePath.length>0)try{g.addPLCB(()=>{g.resolvePath(this.srcTreePath,I=>{this.setSrcTree(I)},I=>{console.warn(`Error loading InstanceItem: ${this.getPath()}, unable to resolve: ${this.srcTreePath}. `+I.message)})})}catch(I){console.warn(`Error loading InstanceItem: ${this.getPath()}: `+I)}}clone(A){const g=new rI;return g.copyFrom(this,A),g}copyFrom(A,g){super.copyFrom(A,g),this.srcTreePath=A.srcTreePath,this.srcTreePath.length>0&&this.getNumChildren()==0&&A.once("childAdded",I=>{const e=I.childItem;this.setSrcTree(e)})}}p.register("InstanceItem",rI);class Pg extends L{constructor(A){super(A);this.materialParam=new kC("Material"),this.overlay=!1,this.__cutAway=!1,this.__cutAwayVector=new f(1,0,0),this.__cutAwayDist=0,this.__layers=[]}setOverlay(A){this.overlay=A}isOverlay(){return this.overlay}addLayer(A){this.__layers.push(A)}getLayers(){return this.__layers}isCutawayEnabled(){return this.__cutAway}setCutawayEnabled(A){this.__cutAway=A,this.emit("cutAwayChanged")}getCutVector(){return this.__cutAwayVector}setCutVector(A){this.__cutAwayVector=A,this.emit("cutAwayChanged")}getCutDist(){return this.__cutAwayDist}setCutDist(A){this.__cutAwayDist=A,this.emit("cutAwayChanged")}readBinary(A,g){if(super.readBinary(A,g),g.versions["zea-engine"].compare([0,0,4])>=0){const I=A.loadStr();let e=g.assetItem.getMaterialLibrary().getMaterial(I,!1);if(e||(e=new wA(I,"SimpleSurfaceShader"),e.getParameter("BaseColor").loadValue(W.random(.25)),g.assetItem.getMaterialLibrary().addMaterial(e)),this.materialParam.loadValue(e),this.__layers=A.loadStrArray(),this.__layers.length>0)for(const i of this.__layers)g.addGeomToLayer(this,i)}}}let Es=!1;class pB extends og{constructor(A,g,I){super("CalcGeomMatOperator");this.globalXfo=new $g("GlobalXfo"),this.geomOffsetXfo=new $g("GeomOffsetXfo"),this.geomMat=new CB("GeomMat"),this.globalXfo.setParam(A),this.geomOffsetXfo.setParam(g),this.geomMat.setParam(I),this.addInput(this.globalXfo),this.addInput(this.geomOffsetXfo),this.addOutput(this.geomMat)}evaluate(){const A=this.globalXfo.getValue().toMat4(),g=this.geomOffsetXfo.getValue().toMat4();this.geomMat.setClean(A.multiply(g))}}class gA extends Pg{constructor(A,g,I,C){super(A);this.listenerIDs={},this.geomIndex=-1,this.assetItem=null,this.cullable=!0,this.geomOffsetXfoParam=new yg("GeomOffsetXfo"),this.geomParam=new Te("Geometry"),this.geomMatParam=new LC("GeomMat"),this.addParameter(this.geomParam),this.addParameter(this.materialParam),this.addParameter(this.geomOffsetXfoParam),this.addParameter(this.geomMatParam);const e=()=>{this.setBoundingBoxDirty()};this.geomParam.on("valueChanged",e),this.geomParam.on("boundingBoxChanged",e),this.calcGeomMatOperator=new pB(this.globalXfoParam,this.geomOffsetXfoParam,this.geomMatParam),g&&this.geomParam.loadValue(g),I&&this.materialParam.loadValue(I),C&&(this.localXfoParam.value=C)}_cleanBoundingBox(){if(this.disableBoundingBox)return new gg;const A=super._cleanBoundingBox();if(this.geomBBox){const g=this.geomMatParam.value;A.addPoint(g.transformVec3(this.geomBBox.p0)),A.addPoint(g.transformVec3(this.geomBBox.p1))}else{const g=this.geomParam.value;if(g)if(Es){const I=this.geomMatParam.value;if(g instanceof xC){const C=g.__buffers.attrBuffers.positions.values,e=i=>{const s=i*3;return new f(C.subarray(s,s+3))};for(let i=0;i<g.getNumVertices();i++)A.addPoint(I.transformVec3(e(i)))}else{const C=g.getVertexAttribute("positions");for(let e=0;e<g.getNumVertices();e++)A.addPoint(I.transformVec3(C.getValueRef(e)))}}else A.addBox3(g.getBoundingBox(),this.geomMatParam.value)}return A}fromJSON(A,g){super.fromJSON(A,g)}readBinary(A,g){super.readBinary(A,g);const I=A.loadUInt8(),C=A.loadUInt32(),e=g.assetItem.getGeometryLibrary();this.geomIndex=C,this.assetItem=g.assetItem;const i=e.getGeom(C);if(i)this.geomParam.loadValue(i);else{const o=n=>{const{range:B}=n;if(C>=B[0]&&C<B[1]){const d=e.getGeom(C);d?this.geomParam.value=d:console.warn("Geom not loaded:",this.getName()),e.removeListenerById("rangeLoaded",a)}},a=e.on("rangeLoaded",o)}const s=1<<2;if(I&s&&(this.geomOffsetXfoParam.value=new D(A.loadFloat32Vec3(),A.loadFloat32Quat(),A.loadFloat32Vec3())),g.versions["zea-engine"].compare([0,0,4])<0)if(I&8){const a=g.assetItem.getMaterialLibrary(),n=A.loadStr();let B=a.getMaterial(n);B||(console.warn("Geom :'"+this.__name+"' Material not found:"+n),B=a.getMaterial("Default")),this.materialParam.loadValue(B)}else this.materialParam.loadValue(g.assetItem.getMaterialLibrary().getMaterial("Default"));g.versions["zea-engine"].compare([3,0,0])<0?A.loadFloat32Vec2():this.geomBBox=new gg(A.loadFloat32Vec3(),A.loadFloat32Vec3())}toString(A){return JSON.stringify(this.toJSON(A),null,2)}clone(A){const g=new gA;return g.copyFrom(this,A),g}copyFrom(A,g){if(super.copyFrom(A,g),!A.geomParam.value&&A.geomIndex!=-1){const I=A.assetItem.getGeometryLibrary();this.assetItem=A.assetItem,this.geomIndex=A.geomIndex,this.geomBBox=A.geomBBox;const C=e=>{const{range:i}=e;if(this.geomIndex>=i[0]&&this.geomIndex<i[1]){const s=I.getGeom(this.geomIndex);s?this.geomParam.value=s:console.warn("Geom not loaded:",this.getName()),I.removeListenerById("rangeLoaded",this.listenerIDs.rangeLoaded)}};this.listenerIDs.rangeLoaded=I.on("rangeLoaded",C)}this.geomMatParam.setDirty(0)}static setCalculatePreciseBoundingBoxes(A){Es=A}}p.register("GeomItem",gA);class Ii extends L{constructor(A){super(A);this.itemsParam=new nt("Items",g=>g instanceof L),this.__itemsEventHandlers=[],this.addParameter(this.itemsParam),this.__itemsParam=this.itemsParam,this.itemsParam.on("itemAdded",g=>{this.bindItem(g.item,g.index)}),this.itemsParam.on("itemRemoved",g=>{this.unbindItem(g.item,g.index)})}setSearchRoot(A){this.searchRoot=A}setOwner(A){(!this.searchRoot||this.searchRoot==this.getOwner())&&(this.searchRoot=A),super.setOwner(A)}bindItem(A,g){if(!(A instanceof L))return;const I={};I.pointerDown=A.on("pointerDown",C=>{this.onPointerDown(C)}),I.pointerUp=A.on("pointerUp",C=>{this.onPointerUp(C)}),I.pointerMove=A.on("pointerMove",C=>{this.onPointerMove(C)}),I.pointerEnter=A.on("pointerEnter",C=>{this.onPointerEnter(C)}),I.pointerLeave=A.on("pointerLeave",C=>{this.onPointerLeave(C)}),this.__itemsEventHandlers.splice(g,0,I)}unbindItem(A,g){if(!(A instanceof L))return;const I=this.__itemsEventHandlers[g];for(let C in I){const e=C.split(".");if(e.length>1){const i=A.getParameter(e[0]);i&&i.removeListenerById(e[1],I[C])}else A.removeListenerById(C,I[C])}this.__itemsEventHandlers.splice(g,1)}addItem(A,g=!0){if(!A){console.warn("Error adding item to group. Item is null");return}this.itemsParam.addItem(A,g)}removeItem(A,g=!0){const I=this.itemsParam.value;if(!I)return;const C=Array.from(I).indexOf(A);C&&this.itemsParam.removeItem(C,g)}clearItems(A=!0){const g=this.itemsParam.value;if(!g)return;const I=Array.from(g);for(let C=I.length-1;C>=0;C--)this.unbindItem(I[C],C);this.itemsParam.clearItems(A)}getItems(){return this.itemsParam.value}setItems(A){this.clearItems(!1),this.itemsParam.setItems(A)}toJSON(A){const g=super.toJSON(A),I=this.itemsParam.value;if(I){const C=Array.from(I),e=[];C.forEach(i=>{const s=i.getPath();e.push(A?A.makeRelative(s):s)}),g.treeItems=e}return g}fromJSON(A,g){if(super.fromJSON(A,g),!A.treeItems){console.warn("Invalid Parameter JSON");return}if(!g)throw new Error("Unable to load JSON on a BaseGroup without a load context");let I=A.treeItems.length;const C=e=>{g.resolvePath(e,i=>{this.addItem(i),I--,I==0&&this.loadDone()},()=>{console.warn("BaseGroup: '"+this.getName()+"'. Unable to load item:"+e)})};for(const e of A.treeItems)C(e)}loadDone(){}}class PC extends Ii{constructor(A){super(A);this.highlightedParam=new RA("Highlighted",!1),this.highlightColorParam=new ag("HighlightColor",new W(.5,.5,1)),this.highlightFillParam=new Y("HighlightFill",0,[0,1]),this.addParameter(this.highlightedParam),this.highlightedParam.on("valueChanged",()=>{this.updateHighlight()}),this.addParameter(this.highlightColorParam),this.highlightColorParam.on("valueChanged",()=>{this.updateHighlight()}),this.addParameter(this.highlightFillParam),this.highlightFillParam.on("valueChanged",()=>{this.updateHighlight()})}updateVisibility(){if(super.updateVisibility()){const A=this.isVisible();return Array.from(this.itemsParam.value).forEach(g=>{g instanceof L&&g.propagateVisibility(A?1:-1)}),!0}return!1}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let A=!1,g;(this.highlightedParam.value||this.isSelected())&&(A=!0,g=this.highlightColorParam.value,g.a=this.highlightFillParam.value);const I="groupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach(C=>{C instanceof L&&(A?C.addHighlight(I,g,!0):C.removeHighlight(I,!0))})}setSelected(A){super.setSelected(A),this.updateHighlight()}bindItem(A,g){super.bindItem(A,g);const I=this.__itemsEventHandlers[g];if(A instanceof L){if(A instanceof L&&this.highlightedParam.value){const C=this.highlightColorParam.value;C.a=this.highlightFillParam.value,A.addHighlight("groupItemHighlight"+this.getId(),C,!0)}this.isVisible()||A.propagateVisibility(-1),I["BoundingBox.valueChanged"]=A.boundingBoxParam.on("valueChanged",C=>{this.setBoundingBoxDirty()})}}unbindItem(A,g){super.unbindItem(A,g),A instanceof L&&(this.highlightedParam.value&&A.removeHighlight("groupItemHighlight"+this.getId(),!0),this.isVisible()||A.propagateVisibility(1),A.traverse(I=>{I instanceof Pg&&I.setCutawayEnabled(!1)},!0))}clone(A){const g=new PC(this.__name+" clone");return g.copyFrom(this,A),g}}p.register("SelectionSet",PC);var FB=it("",null,!1);class XB extends Ho{constructor(){super(!0)}constructWorker(){const A=new FB;return Promise.resolve(A)}}const Qs=new XB;let us=0;class HB extends FA{constructor(A){super();this.listenerIDs={},this.streamInfos={},this.genBuffersOpts={},this.numGeoms=-1,this.geoms=[],this.basePath="",this.loadedCount=0,this.assetItem=A,us++}isLoaded(){return this.numGeoms==-1||this.loadedCount==this.numGeoms}loadGeomFile(A,g=!1){return g&&AA.incrementWorkload(1),new Promise(I=>{const C=this.basePath+A+".zgeoms";AA.loadFile("archive",C,!1).then(e=>{const i=e[Object.keys(e)[0]],s=this.on("streamFileParsed",o=>{o.geomFileID==C&&(g&&AA.incrementWorkDone(1),this.removeListenerById("streamFileParsed",s),I())});this.readBinaryBuffer(C,i.buffer,this.loadContext)})})}loadGeomFilesStream(A,g,I){const C=A.numGeomsPerFile.length;AA.incrementWorkload(C),this.numGeoms=A.numGeoms,this.basePath=g,this.loadContext=I;for(let e=0;e<C;e++)this.loadGeomFile(e,!1)}setGenBufferOption(A,g){this.genBuffersOpts[A]=g}setNumGeoms(A){this.numGeoms=A}getNumGeoms(){return this.numGeoms}getGeom(A){return A>=this.geoms.length?null:this.geoms[A]}readBinaryBuffer(A,g,I){const C=new yC(g,0,vA.isMobileDevice),e=C.loadUInt32(),i=C.loadUInt32();if(this.streamInfos[A]={total:e,done:0},e==0){const a=new Bs(A,0);this.emit("streamFileParsed",a);return}this.numGeoms==-1&&(this.numGeoms=e);const s=C.loadUInt32Array(e),o=g.byteLength>2e7;if(us>1&&!o){const a=[0,e],n=0;Qs.addTask({geomFileID:A,toc:s,byteOffset:n,geomIndexOffset:i,geomsRange:a,isMobileDevice:C.isMobileDevice,bufferSlice:g,genBuffersOpts:this.genBuffersOpts,context:{versions:I.versions}},[g]).then(B=>{this.__receiveGeomDatas(B)})}else{let n=0;for(;n<e;){const B=s[n];let d=0,l=n;for(;l<e&&d<2e6;)l++,d=s[l]-B;let r,c;l>=e?(r=[n,e],c=g.byteLength):(r=[n,l],c=s[r[1]]);const h=n==0&&l==e,E=h?0:s[r[0]],b=h?g:g.slice(B,c);n=l,Qs.addTask({geomFileID:A,toc:s,byteOffset:E,geomIndexOffset:i,geomsRange:r,isMobileDevice:C.isMobileDevice,bufferSlice:b,genBuffersOpts:this.genBuffersOpts,context:{versions:I.versions}},[b]).then(m=>{this.__receiveGeomDatas(m)})}}}__receiveGeomDatas(A){const{geomFileID:g,geomDatas:I,geomIndexOffset:C,geomsRange:e}=A,i=C+e[0],s=[i,C+e[1]];for(let B=0;B<I.length;B++){const d=I[B];if(!d.type)continue;let l;switch(d.type){case"Points":l=new ZI(d);break;case"Lines":l=new pg(d);break;case"Mesh":case"Plane":case"Sphere":case"Cone":l=new _g(d);break;case"CompoundGeom":l=new ZC(d,this.assetItem.getMaterialLibrary());break;default:throw new Error("Unsupported Geom type:")}this.geoms[i+B]=l}const o=new un(s);this.emit("rangeLoaded",o);const a=s[1]-s[0],n=this.streamInfos[g];if(n.done+=a,n.done==n.total){const B=new Bs(g,n.done);this.emit("streamFileParsed",B)}return this.loadedCount+=a,this.loadedCount==this.numGeoms&&this.emit("loaded"),this.loadedCount==this.numGeoms}toJSON(){return{numGeoms:this.geoms.length}}toString(){return JSON.stringify(this.toJSON(),null,2)}loadMetadata(A,g){const I=new yC(A.buffer,0,vA.isMobileDevice),C=I.loadUInt32Array();for(let e=0;e<C.length;e++)try{const i=this.geoms[e];i||console.warn("Error loading metadata for geom that was not yet loaded: ",e),i instanceof ZC&&(I.seek(C[e]),i.loadMetadata(I,g))}catch{console.warn("Error loading geom metadata: ",e)}}}class WB extends FA{constructor(A="MaterialLibrary"){super();this.__images={},this.materials=[],this.__materialsMap={},this.name="",this.__name=A}clear(){this.__images={},this.materials=[],this.__materialsMap={}}getPath(){return[this.__name]}resolvePath(A,g=0){return null}getNumMaterials(){return this.materials.length}getMaterials(){return this.materials}getMaterialNames(){const A=[];return this.materials.forEach(g=>{A.push(g.getName())}),A}hasMaterial(A){return A in this.__materialsMap}addMaterial(A){A.setOwner(this),this.__materialsMap[A.getName()]=this.materials.length,this.materials.push(A)}getMaterial(A,g=!0){const I=this.__materialsMap[A];if(I==null&&g)throw new Error("Material:"+A+" not found in library:"+this.getMaterialNames());return this.materials[I]}hasImage(A){return A in this.__images}addImage(A){A.setOwner(this),this.__images[A.getName()]=A}getImage(A,g=!0){const I=this.__images[A];if(!I&&g)throw new Error("Image:"+A+" not found in library:"+this.getImageNames());return I}getImageNames(){const A=[];for(const g in this.__images)A.push(g);return A}load(A){const g=new XMLHttpRequest;g.open("GET",A,!0),g.ontimeout=()=>{throw new Error("The request for "+A+" timed out.")},g.onload=()=>{g.readyState===4&&(g.status===200?this.fromJSON(JSON.parse(g.responseText)):console.warn(g.statusText))},g.send(null)}toJSON(A={}){return{numMaterials:this.getNumMaterials()}}fromJSON(A,g={}){for(const I in A.textures){const C=new II(I);C.fromJSON(A.textures[I]),this.__images[I]=C}for(const I in A.materials){const C=new wA(I);C.fromJSON(A.materials[I]),this.addMaterial(C)}}readBinary(A,g){this.name=A.loadStr();const I=A.loadUInt32();for(let e=0;e<I;e++){const i=A.loadStr(),s=p.constructClass(i);s.readBinary(A,g),this.__images[s.getName()]=s}const C=A.loadUInt32();if(C>0){const e=A.loadUInt32Array(C);for(let i=0;i<C;i++){const s=A.loadStr();let o;switch(s){case"StandardMaterial":case"TransparentMaterial":case"StandardSurfaceShader":o=p.constructClass("StandardSurfaceMaterial");break;case"SimpleSurfaceShader":case"SimpleSurfaceMaterial":o=p.constructClass("SimpleSurfaceMaterial");break;case"PointsShader":case"PointsMaterial":o=p.constructClass("PointsMaterial");break;case"FatPointsShader":case"FatPointsMaterial":o=p.constructClass("FatPointsMaterial");break;case"LinesShader":case"LinesMaterial":o=p.constructClass("LinesMaterial");break;default:o=new wA("");break}A.seek(e[i]),o.readBinary(A,g),this.materials[i]=o,this.__materialsMap[o.getName()]=i}}this.emit("loaded")}toString(){return JSON.stringify(this.toJSON(),null,2)}}const bs=t=>{switch(t.toLowerCase()){case"millimeters":return .001;case"centimeters":return .01;case"decimeters":return .1;case"meters":return 1;case"kilometers":return 1e3;case"inches":return .0254;case"feet":return .3048;case"miles":return 1609.34}return 1};class cI extends L{constructor(A=""){super(A);this.geomLibrary=new HB(this),this.materialLibrary=new WB,this.loaded=!1,this.unitsScale=1,this.units="meters"}load(A){return Promise.reject(`This method is not implemented for this Asset Item: ${A}`)}isLoaded(){return this.loaded}getEngineDataVersion(){return this.engineDataVersion}getGeometryLibrary(){return this.geomLibrary}getMaterialLibrary(){return this.materialLibrary}getUnitsConversion(){return this.unitsScale}readBinary(A,g){g.assetItem=this,g.units||(g.units="meters"),g.versions["zea-engine"]||(g.versions["zea-engine"]=new bC(A.loadStr())),this.engineDataVersion=g.versions["zea-engine"];const I=()=>{this.units=A.loadStr(),this.addParameter(new Zg("FileUnits",this.units));const s=bs(this.units),o=bs(g.units);this.unitsScale=s/o,g.units=this.units;const a=this.localXfoParam,n=a.value;n.sc.scaleInPlace(this.unitsScale),a.value=n};g.versions["zea-engine"].compare([0,0,6])>0&&I();let C;const e={};g.addGeomToLayer=(s,o)=>{if(!e[o]){C||(C=new L("Layers"),this.addChild(C,!1));const a=new PC(o);C.addChild(a,!1),e[o]=a}e[o].addItem(s)};const i=[];g.resolvePath=(s,o,a)=>{if(!s)throw new Error("Path not specified");try{const n=this.resolvePath(s);o(n)}catch{i.push(()=>{try{const B=this.resolvePath(s);o(B)}catch(B){if(a)a(B);else throw B}})}},g.addPLCB=s=>i.push(s),this.materialLibrary.readBinary(A,g),super.readBinary(A,g),g.versions["zea-engine"].compare([0,0,5])>=0&&g.versions["zea-engine"].compare([0,0,7])<0&&I();for(const s of i)s();this.loaded=!0}toJSON(A={}){return A.makeRelative=I=>{const C=this.getPath(),e=I.slice(0,C.length);for(let s=0;s<e.length-1;s++)if(e[s]!=C[s])return console.warn("Param Path is not relative to the asset. May not be able to be resolved at load time:"+I),I;const i=I.slice(C.length-1);return i[0]=".",i},A.assetItem=this,super.toJSON(A)}fromJSON(A,g={}){g||(g={}),g.assetItem=this,g.version==null&&(g.version=0),g.assetItem=this;const I=[];g.resolvePath=(C,e)=>{if(!C)throw new Error("Path not specified");const i=this.resolvePath(C);i?e(i):I.push(()=>{const s=this.resolvePath(C);s?e(s):console.warn("Path unable to be resolved:"+C)})},g.addPLCB=C=>I.push(C),super.fromJSON(A,g);for(const C of I)C()}clone(A){const g=new cI;return g.copyFrom(this,A),g}copyFrom(A,g){this.geomLibrary=A.geomLibrary,this.materialLibrary=A.materialLibrary,this.loaded=A.loaded,A.loaded||A.once("loaded",I=>{const C=A.localXfoParam.value,e=this.localXfoParam.value;e.sc=C.sc.clone(),this.localXfoParam.value=e,A.getChildren().forEach(i=>{i&&i!=cI&&this.addChild(i.clone(g),!1,!1)}),this.loaded=!0,this.emit("loaded",I)}),super.copyFrom(A,g)}}p.register("AssetItem",cI);class hI extends FA{constructor(A){super();this.units="meters",this.versions={},this.sdk="",this.url="",this.folder="",this.camera=null,this.assetItem=null,this.resources=null,this.xrefs={},this.xrefLoadCallback=null,this.postLoadCallbacks=[],this.asyncCount=0,A&&(this.units=A.units,this.sdk=A.sdk,this.camera=A.camera,this.resources=A.resources,this.xrefs=A.xrefs,this.xrefLoadCallback=A.xrefLoadCallback)}incrementAsync(){this.asyncCount++}decrementAsync(){this.asyncCount--,this.asyncCount==0&&this.emit("done")}resolvePath(A,g,I){try{const C=this.assetItem.resolvePath(A);g(C)}catch{this.postLoadCallbacks.push(()=>{try{const e=this.assetItem.resolvePath(A);g(e)}catch(e){if(I)I(e);else throw new Error(e.message)}})}}addPLCB(A){this.postLoadCallbacks.push(A)}clone(){return new hI(this)}}class RC extends L{constructor(A,g){super(A);this.imageParam=new UC("Image"),this.pixelsPerMeterParam=new Y("PixelsPerMeter",1e3),this.alphaParam=new Y("Alpha",1),this.colorParam=new ag("Color",new W(1,1,1)),this.alignedToCameraParam=new RA("AlignedToCamera",!1),this.drawOnTopParam=new RA("DrawOnTop",!1),this.fixedSizeOnscreenParam=new RA("FixedSizeOnscreen",!1),this.pivotParam=new DC("Pivot",new K(.5,0));const I=this.addParameter(this.imageParam);g&&(I.value=g),this.addParameter(this.pixelsPerMeterParam),this.addParameter(this.alphaParam),this.addParameter(this.colorParam),this.addParameter(this.alignedToCameraParam),this.addParameter(this.drawOnTopParam),this.addParameter(this.fixedSizeOnscreenParam),this.addParameter(this.pivotParam)}}p.register("BillboardItem",RC);class Do extends L{constructor(A="Camera"){super(A);this.isOrthographicParam=new Y("isOrthographic",0),this.fovParam=new Y("fov",1),this.nearParam=new Y("near",.1),this.farParam=new Y("far",1e3),this.focalDistanceParam=new Y("focalDistance",5),this.viewHeight=0,this.__orthoIntervalId=-1,this.__focusIntervalId=-1,this.addParameter(this.isOrthographicParam),this.addParameter(this.fovParam),this.addParameter(this.nearParam),this.addParameter(this.farParam),this.addParameter(this.focalDistanceParam);const g=I=>{this.emit("projectionParamChanged",I)};this.isOrthographicParam.on("valueChanged",g),this.fovParam.on("valueChanged",g),this.nearParam.on("valueChanged",g),this.farParam.on("valueChanged",g),this.setPositionAndTarget(new f(3,3,1.75),new f(0,0,1)),this.setLensFocalLength("28mm"),this.adjustNearAndFarPlanesToFocalDist=!0,this.nearDistFactor=.01,this.farDistFactor=100,this.frameOnBoundingSphere=!1}getNear(){return this.nearParam.value}setNear(A){this.nearParam.value=A}getFar(){return this.farParam.value}setFar(A){this.farParam.value=A}getFov(){return this.fovParam.value}setFov(A){this.fovParam.value=A}getFrustumHeight(){return this.viewHeight}setFrustumHeight(A){this.viewHeight=A,this.emit("projectionParamChanged")}setLensFocalLength(A){const g={"10mm":100.4,"11mm":95,"12mm":90,"14mm":81.2,"15mm":77.3,"17mm":70.4,"18mm":67.4,"19mm":64.6,"20mm":61.9,"24mm":53.1,"28mm":46.4,"30mm":43.6,"35mm":37.8,"45mm":29.9,"50mm":27,"55mm":24.6,"60mm":22.6,"70mm":19.5,"75mm":18.2,"80mm":17.1,"85mm":16.1,"90mm":15.2,"100mm":13.7,"105mm":13,"120mm":11.4,"125mm":11,"135mm":10.2,"150mm":9.1,"170mm":8.1,"180mm":7.6,"210mm":6.5,"300mm":4.6,"400mm":3.4,"500mm":2.7,"600mm":2.3,"800mm":1.7};if(!(A in g)){console.warn("Camera lense focal length not supported:"+A);return}this.fovParam.value=P.degToRad(g[A])}getFocalDistance(){return this.focalDistanceParam.value}setFocalDistance(A){A<1e-4&&console.error("Never set focal distance to zero"),this.focalDistanceParam.value=A,this.adjustNearAndFarPlanesToFocalDist&&(this.nearParam.value=A*this.nearDistFactor,this.farParam.value=A*this.farDistFactor)}isOrthographic(){return this.isOrthographicParam.value==1}setIsOrthographic(A,g=0){if(this.__orthoIntervalId&&clearInterval(this.__orthoIntervalId),A>.5){const I=this.fovParam.value,C=this.focalDistanceParam.value;this.viewHeight=Math.sin(I*.5)*C*2}if(g==0)this.isOrthographicParam.value=A;else{const I=Math.round(g/20);let C=0;const e=this.isOrthographicParam.value,i=()=>{const s=P.lerp(e,A,C/I);this.isOrthographicParam.value=s,C++,C<=I?this.__orthoIntervalId=window.setTimeout(i,20):(this.__orthoIntervalId=-1,this.emit("movementFinished"))};i()}}setPositionAndTarget(A,g){this.setFocalDistance(A.distanceTo(g));const I=new D;I.setLookAt(A,g,new f(0,0,1)),this.globalXfoParam.value=I,this.emit("movementFinished")}getTargetPosition(){const A=this.focalDistanceParam.value,g=this.globalXfoParam.value,I=g.ori.getZaxis();return I.scaleInPlace(-A),I.addInPlace(g.tr),I}frameView(A,g){const I=this.focalDistanceParam.value,C=this.fovParam.value,e=this.globalXfoParam.value.clone(),i=A.getWidth()/A.getHeight(),s=Math.atan(Math.tan(C*.5)*i)*2;let o=I;if(this.frameOnBoundingSphere){const a=new gg;for(const c of g)a.addBox3(c.boundingBoxParam.value);if(!a.isValid()){console.warn("Bounding box not valid.");return}const B=e.ori.getZaxis().scale(-I),d=e.tr.add(B),r=a.center().subtract(d);e.tr.addInPlace(r),o=a.size()/Math.tan(C)}else{const a=[];if(g.forEach(E=>{E.traverse(b=>{if(!(b instanceof L)||b.disableBoundingBox)return!1;if(b instanceof gA){const m=b.geomParam.value;if(m){const G=m.getBoundingBox();if(G.isValid()){const y=b.geomMatParam.value;a.push(y.transformVec3(G.p0)),a.push(y.transformVec3(new f(G.p0.x,G.p0.y,G.p1.z))),a.push(y.transformVec3(new f(G.p0.x,G.p1.y,G.p0.z))),a.push(y.transformVec3(new f(G.p1.x,G.p0.y,G.p0.z))),a.push(y.transformVec3(new f(G.p0.x,G.p1.y,G.p1.z))),a.push(y.transformVec3(new f(G.p1.x,G.p0.y,G.p1.z))),a.push(y.transformVec3(new f(G.p1.x,G.p1.y,G.p0.z))),a.push(y.transformVec3(G.p1));return}}}if(b.getNumChildren()==0){const m=b.boundingBoxParam.value;if(m.isValid()){a.push(new f(m.p0.x,m.p0.y,m.p0.z)),a.push(new f(m.p0.x,m.p0.y,m.p1.z)),a.push(new f(m.p0.x,m.p1.y,m.p0.z)),a.push(new f(m.p1.x,m.p0.y,m.p0.z)),a.push(new f(m.p0.x,m.p1.y,m.p1.z)),a.push(new f(m.p1.x,m.p0.y,m.p1.z)),a.push(new f(m.p1.x,m.p1.y,m.p0.z)),a.push(new f(m.p1.x,m.p1.y,m.p1.z));return}}})}),a.length==0)return;const n=this.isOrthographic()?0:s/2,B=this.isOrthographic()?0:C/2,d={};d.XPos=new f(Math.cos(n),0,Math.sin(n)),d.XNeg=new f(-Math.cos(n),0,Math.sin(n)),d.YPos=new f(0,Math.cos(B),Math.sin(B)),d.YNeg=new f(0,-Math.cos(B),Math.sin(B)),d.ZPos=new f(0,0,1),d.ZNeg=new f(0,0,-1);const l={},r={};for(const E in d)l[E]=e.ori.rotateVec3(d[E]),r[E]=Number.NEGATIVE_INFINITY;const c=new f;a.forEach((E,b)=>{if(!Number.isFinite(E.x)||!Number.isFinite(E.y)||!Number.isFinite(E.z))return;const m=E.subtract(e.tr);for(const G in d){const y=m.dot(l[G]);y>r[G]&&y!=Number.POSITIVE_INFINITY&&(r[G]=y)}c.addInPlace(E)});for(const E in r)if(r[E]==Number.POSITIVE_INFINITY)return;c.scaleInPlace(1/a.length);let h=0;if(this.isOrthographic()){const E=new f((-r.XNeg+r.XPos)*.5,(-r.YNeg+r.YPos)*.5,(-r.ZNeg+r.ZPos)*.5),b=r.ZNeg+r.ZPos;h=b*2,E.z=-r.ZNeg+h,e.tr.addInPlace(e.ori.rotateVec3(E)),o=b*2;const m=r.XPos+r.XNeg,G=r.YPos+r.YNeg;this.viewHeight=Math.max(G,m/i);const y=.1;this.viewHeight+=this.viewHeight*y}else{const E=s/2,b=C/2,m=new K(Math.cos(E)*r.XPos,Math.sin(E)*r.XPos),G=m.add(new K(Math.sin(E),-Math.cos(E))),y=new K(-Math.cos(E)*r.XNeg,Math.sin(E)*r.XNeg),Q=y.add(new K(-Math.sin(E),-Math.cos(E))),u=K.intersectionOfLines(m,G,y,Q),Z=new K(Math.cos(b)*r.YPos,Math.sin(b)*r.YPos),w=Z.add(new K(Math.sin(b),-Math.cos(b))),R=new K(-Math.cos(b)*r.YNeg,Math.sin(b)*r.YNeg),S=R.add(new K(-Math.sin(b),-Math.cos(b))),H=K.intersectionOfLines(Z,w,R,S);if(u===null||H===null){console.warn("xP or yP === null");return}h=Math.max(u.y,H.y);const X=new f(u.x,H.x,h);e.tr.addInPlace(e.ori.rotateVec3(X)),o=c.distanceTo(e.tr);const _=o*.1;e.tr.addInPlace(e.ori.rotateVec3(new f(0,0,_))),h+=_}if(this.adjustNearAndFarPlanesToFocalDist){r.ZPos-=h,r.ZNeg+=h;const E=r.ZNeg*this.nearDistFactor,b=-r.ZPos*this.farDistFactor;this.nearParam.value=E,this.farParam.value=b}}this.setFocalDistance(o),this.globalXfoParam.value=e,this.emit("movementFinished")}updateProjectionMatrix(A,g){const I=this.isOrthographicParam.value,C=this.fovParam.value,e=this.nearParam.value,i=this.farParam.value,s=new NA;if(I>0){const o=this.viewHeight*.5,a=-o,n=o,B=o*-g,d=o*g;s.setOrthographicMatrix(B,d,a,n,e,i)}I<1&&A.setPerspectiveMatrix(C,g,e,i),I==1?A.setFromMat4(s):I>0&&A.set(P.lerp(A.m00,s.m00,I),P.lerp(A.m01,s.m01,I),P.lerp(A.m02,s.m02,I),P.lerp(A.m03,s.m03,I),P.lerp(A.m10,s.m10,I),P.lerp(A.m11,s.m11,I),P.lerp(A.m12,s.m12,I),P.lerp(A.m13,s.m13,I),P.lerp(A.m20,s.m20,I),P.lerp(A.m21,s.m21,I),P.lerp(A.m22,s.m22,I),P.lerp(A.m23,s.m23,I),P.lerp(A.m30,s.m30,I),P.lerp(A.m31,s.m31,I),P.lerp(A.m32,s.m32,I),P.lerp(A.m33,s.m33,I))}}p.register("Camera",Do);class YB extends og{constructor(A,g){super();this.bindXfo=new D,this.invBindXfo=new D,this.groupGlobalXfo=new $g("GroupGlobalXfo"),this.groupTransformXfo=new xe("GroupTransformXfo"),this.groupGlobalXfo.setParam(A),this.groupTransformXfo.setParam(g),this.addInput(this.groupGlobalXfo),this.addOutput(this.groupTransformXfo)}setBindXfo(A){this.bindXfo=A,this.invBindXfo=A.inverse(),this.setDirty()}evaluate(){if(this.invBindXfo){const A=this.groupGlobalXfo.getValue();this.groupTransformXfo.setClean(A.multiply(this.invBindXfo))}else this.groupTransformXfo.setClean(new D)}}class KB extends og{constructor(A,g){super();this.groupTransformXfo=new $g("GroupTransformXfo"),this.memberGlobalXfo=new xe("MemberGlobalXfo",UI.OP_READ_WRITE),this.groupTransformXfo.setParam(A),this.memberGlobalXfo.setParam(g),this.addInput(this.groupTransformXfo),this.addOutput(this.memberGlobalXfo),this._enabled=!0}disable(){this._enabled=!1,this.setDirty()}enable(){this._enabled=!0,this.setDirty()}evaluate(){const A=this.memberGlobalXfo.getValue();if(this._enabled){const g=this.groupTransformXfo.getValue();this.memberGlobalXfo.setClean(g.multiply(A))}else this.memberGlobalXfo.setClean(A)}}const WI={disabled:0,manual:1,first:2,average:3,globalOri:4};class BI extends Ii{constructor(A=""){super(A);this.initialXfoModeParam=new tt("InitialXfoMode",WI.average,["manual","first","average","global"]),this.groupTransformParam=new yg("GroupTransform",new D),this.calculatingGroupXfo=!1,this.memberXfoOps=[],this.addParameter(this.initialXfoModeParam),this.initialXfoModeParam.on("valueChanged",()=>{this.calcGroupXfo()}),this.addParameter(this.groupTransformParam),this.groupTransformOp=new YB(this.globalXfoParam,this.groupTransformParam)}static get INITIAL_XFO_MODES(){return WI}updateHighlight(){setTimeout(()=>{let A=!1,g;this.isSelected()&&(A=!0,g=this.getHighlight(),g.a=.2);const I="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach(C=>{C instanceof L&&(A?C.addHighlight(I,g,!0):C.removeHighlight(I,!0))})},1)}setSelected(A){super.setSelected(A),this.updateHighlight()}calcGroupXfo(){const A=Array.from(this.itemsParam.value);if(A.length==0)return;this.calculatingGroupXfo=!0,this.memberXfoOps.forEach(C=>C.disable());const g=this.initialXfoModeParam.value;let I;if(g==WI.manual)I=this.globalXfoParam.value;else if(g==WI.first&&A[0]instanceof L)I=A[0].globalXfoParam.value;else if(g==WI.average){I=new D,I.ori.set(0,0,0,0);let C=0;A.forEach((e,i)=>{if(e instanceof L){const s=e.globalXfoParam.value;I.tr.addInPlace(s.tr),I.ori.addInPlace(s.ori),C++}}),I.tr.scaleInPlace(1/C),I.ori.normalizeInPlace()}else if(g==WI.globalOri){I=new D;let C=0;A.forEach((e,i)=>{if(e instanceof L){const s=e.globalXfoParam.value;I.tr.addInPlace(s.tr),C++}}),I.tr.scaleInPlace(1/C)}else throw new Error("Invalid GROUP_XFO_MODES.");this.globalXfoParam.value=I,this.groupTransformOp.setBindXfo(I),this.memberXfoOps.forEach(C=>C.enable()),this.calculatingGroupXfo=!1}bindItem(A,g){if(super.bindItem(A,g),A instanceof L){if(this.isSelected()){const I=this.getHighlight();I.a=.2;const C="kinematicGroupItemHighlight"+this.getId();A.addHighlight(C,I,!0)}{const I=A.globalXfoParam,C=new KB(this.groupTransformParam,I);this.memberXfoOps.splice(g,0,C),this.__itemsEventHandlers[g]||(this.__itemsEventHandlers[g]={});const e=this.__itemsEventHandlers[g];e["BoundingBox.valueChanged"]=A.boundingBoxParam.on("valueChanged",i=>{this.setBoundingBoxDirty()})}}}unbindItem(A,g){if(super.unbindItem(A,g),A instanceof L){if(this.isSelected()){const I="kinematicGroupItemHighlight"+this.getId();A.removeHighlight(I,!0)}this.memberXfoOps[g].detach(),this.memberXfoOps.splice(g,1),this.setBoundingBoxDirty()}}addItem(A,g=!0){super.addItem(A,g),g&&this.calcGroupXfo()}removeItem(A,g=!0){super.removeItem(A,g),g&&this.calcGroupXfo()}setItems(A){super.setItems(A),this.calcGroupXfo()}clearItems(A=!0){super.clearItems(A),this.memberXfoOps=[],A&&this.calcGroupXfo()}loadDone(){this.calculatingGroupXfo=!0,this.calcGroupXfo(),this.calculatingGroupXfo=!1}clone(A){const g=new BI;return g.copyFrom(this,A),g}}p.register("KinematicGroup",BI);class bt extends Ii{constructor(A){super(A);this.materialParam=new kC("Material"),this.__backupMaterials={},this.addParameter(this.materialParam),this.materialParam.on("valueChanged",()=>{this.updateMaterial()})}updateHighlight(){this.__updateHighlightHelper()}__updateHighlightHelper(){let A=!1,g;this.isSelected()&&(g=this.getHighlight(),A=!0,g.a=.2);const I="kinematicGroupItemHighlight"+this.getId();Array.from(this.itemsParam.value).forEach(C=>{C instanceof L&&(A?C.addHighlight(I,g,!0):C.removeHighlight(I,!0))})}setSelected(A){super.setSelected(A),this.updateHighlight()}updateOpacity(){super.updateOpacity(),Array.from(this.itemsParam.value).forEach(A=>{A instanceof L&&(A.opacityParam.value=this.opacity)})}updateMaterial(){this.updateMaterialHelper()}updateMaterialHelper(){const A=this.materialParam.value;Array.from(this.itemsParam.value).forEach(g=>{g.traverse(I=>{if(I instanceof Pg){const e=I.materialParam;if(A){const i=e.value;i!=A&&(!i||i.getShaderName()!="LinesShader")&&(this.__backupMaterials[e.getId()]=i,e.value=A)}else this.__backupMaterials[e.getId()]&&(e.value=this.__backupMaterials[e.getId()])}})})}bindItem(A,g){if(super.bindItem(A,g),!(A instanceof L))return;if(this.isSelected()){const C=this.getHighlight();C.a=.2;const e="materialGroupItemHighlight"+this.getId();A.addHighlight(e,C,!0)}const I=this.materialParam.value;I&&A.traverse(C=>{if(C instanceof Pg){const i=C.materialParam;if(I){const s=i.value;s!=I&&(!s||s.getShaderName()!="LinesShader")&&(this.__backupMaterials[i.getId()]=s,i.value=I)}}},!0),A.opacityParam.value=this.opacity}unbindItem(A,g){if(super.unbindItem(A,g),A instanceof L&&this.isSelected()){const I="materialGroupItemHighlight"+this.getId();A.removeHighlight(I,!0)}}clone(A){const g=new bt(this.__name+"clone");return g.copyFrom(this,A),g}}p.register("MaterialGroup",bt);class NB extends og{constructor(A,g){super();this.groupGlobalXfo=new $g("GroupGlobalXfo"),this.cuttingPlane=new IB("CuttingPlane"),this.groupGlobalXfo.setParam(A),this.cuttingPlane.setParam(g),this.addInput(this.groupGlobalXfo),this.addOutput(this.cuttingPlane)}evaluate(){const A=this.groupGlobalXfo.getValue(),g=A.ori.getZaxis(),I=A.tr.dot(g);this.cuttingPlane.setClean(new cA(g.x,g.y,g.z,-I))}}class yt extends Ii{constructor(A=""){super(A);this.cutAwayEnabledParam=new RA("CutAwayEnabled",!1),this.cutPlaneParam=new TI("CutPlane",new cA(1,0,0)),this.addParameter(this.cutAwayEnabledParam),this.addParameter(this.cutPlaneParam),this.cutPlaneOp=new NB(this.globalXfoParam,this.cutPlaneParam),this.cutAwayEnabledParam.on("valueChanged",i=>{this.updateCutaway(i)}),this.cutPlaneParam.on("valueChanged",i=>{this.updateCutaway(i)});const g=new wA("plane","FlatSurfaceShader");g.getParameter("BaseColor").value=new W(1,1,1,.2);const I=new gA("PlaneGeom",new zI(1,1),g);I.setSelectable(!1),this.addChild(I);const C=new wA("border","LinesShader");C.getParameter("BaseColor").value=new W(1,0,0,1);const e=new gA("BorderGeom",new dt(1,1),C);e.setSelectable(!1),this.addChild(e)}updateCutaway(A){const g=this.cutAwayEnabledParam.value,I=this.cutPlaneParam.value,C=I.xyz,e=I.w;A instanceof Pg?(A.setCutawayEnabled(g),A.setCutVector(C),A.setCutDist(e)):Array.from(this.itemsParam.value).forEach(i=>{i.traverse(s=>{s instanceof Pg&&(s.setCutawayEnabled(g),s.setCutVector(C),s.setCutDist(e))},!0)})}bindItem(A,g){if(!(A instanceof L))return;this.cutAwayEnabledParam.value&&this.updateCutaway(A);const C=new gg;Array.from(this.itemsParam.value).forEach(e=>{e instanceof L&&C.addBox3(e.boundingBoxParam.value)});{const e=C.p1.x-C.p0.x,i=C.p1.y-C.p0.y,s=new D;s.sc.set(e,i,1),this.getChild(0).localXfoParam.value=s,this.getChild(1).localXfoParam.value=s}}unbindItem(A,g){A instanceof L&&A.traverse(I=>{I instanceof Pg&&I.setCutawayEnabled(!1)},!0)}clone(A){const g=new yt;return g.copyFrom(this,A),g}}p.register("CuttingPlane",yt);class AI extends cI{constructor(A){super(A);this.cadfileVersion=new bC("0,0,0"),this.metadataLoaded=!1}clone(A){const g=new AI;return g.copyFrom(this,A),g}copyFrom(A,g){super.copyFrom(A,g),A.loaded||A.once("geomsLoaded",I=>{this.emit("geomsLoaded",I)})}getVersion(){return this.cadfileVersion}readRootLevelBinary(A,g){g.versions={},g.versions["zea-cad"]=new bC(A.loadStr()),g.sdk=A.loadStr(),this.sdk=g.sdk,this.cadfileVersion=g.versions["zea-cad"],super.readBinary(A,g)}load(A,g=new hI){return this.loadPromise?this.loadPromise:(this.loadPromise=new Promise((I,C)=>{const e=A.lastIndexOf("/")>-1?A.substring(0,A.lastIndexOf("/"))+"/":"",i=A.lastIndexOf("/")>-1?A.substring(A.lastIndexOf("/")+1):"",s=i.substring(0,i.lastIndexOf("."));this.url=A,g=g.clone(),g.assetItem=this,g.url=A,g.folder=e,g.on("done",()=>{this.loaded=!0,I(),this.emit("loaded");const o=[];this.geomLibrary.isLoaded()||o.push(new Promise(a=>this.geomLibrary.once("loaded",a))),this.traverse(a=>{a instanceof AI&&!a.geomLibrary.isLoaded()&&new Promise(n=>a.once("geomsLoaded",n))}),Promise.all(o).then(()=>{this.emit("geomsLoaded")})}),g.incrementAsync(),AA.incrementWorkload(1),this.geomLibrary.once("loaded",()=>{AA.incrementWorkDone(1)}),AA.loadFile("archive",A).then(o=>{if(!(o.tree2||o.tree)){console.error("Corrupt zcad file. Missing 'tree':",A),AA.incrementWorkDone(1),g.decrementAsync();return}const a=new yC((o.tree2||o.tree).buffer,0,vA.isMobileDevice),n=this.getName();if(this.readRootLevelBinary(a,g),n!=""&&this.setName(n),g.versions["zea-cad"]=this.getVersion(),g.versions["zea-engine"]=this.getEngineDataVersion(),o.geoms)this.geomLibrary.readBinaryBuffer(i,o.geoms.buffer,g),o.geomsdata&&(this.geomLibrary.loadMetadata(o.geomsdata,g),this.metadataLoaded=!0);else if(o["geomLibrary.json"]){const B=JSON.parse(new TextDecoder("utf-8").decode(o["geomLibrary.json"])),d=e+s;B.numGeomFiles==0?(console.error("Corrupt zcad file. Missing 'geoms':",A),AA.incrementWorkDone(1)):this.geomLibrary.loadGeomFilesStream(B,d,g)}else AA.incrementWorkDone(1);g.decrementAsync()},o=>{g.decrementAsync(),AA.incrementWorkDone(1),this.emit("error",o),C(o)})}),this.loadPromise)}loadMetadata(A=""){return this.metadataLoaded?Promise.resolve():this.metadataLoadPromise?this.metadataLoadPromise:(this.metadataLoadPromise=new Promise((g,I)=>{if(this.metadataLoaded&&g(),A==""){const C=this.url;A=C.substring(0,C.lastIndexOf("."))+".zmetadata"}console.log(A),AA.incrementWorkload(),AA.loadFile("archive",A).then(C=>{const e=new hI;e.versions["zea-cad"]=this.getVersion(),e.versions["zea-engine"]=this.getEngineDataVersion(),this.geomLibrary.loadMetadata(C.geomsdata,e),AA.incrementWorkDone(1),this.metadataLoaded=!0,g()},C=>{AA.incrementWorkDone(1),this.emit("error",C),I(C)})}),this.metadataLoadPromise)}}p.register("CADAsset",AI);class Zt extends L{constructor(A){super(A)}clone(A){const g=new Zt;return g.copyFrom(this,A),g}}p.register("CADAssembly",Zt);class Ci extends L{constructor(A){super(A)}clone(A){const g=new Ci;return g.copyFrom(this,A),g}}p.register("CADPart",Ci);class mI extends gA{constructor(A){super(A);this.shattered=!1}setShatterState(A){this.shattered!=A&&(this.shattered=A,this.emit("shatterStateChanged",new Ti(A)))}clone(A){const g=new mI;return g.copyFrom(this,A),g}readBinary(A,g){if(g.versions["zea-engine"].compare([3,9,0])<0){if(Pg.prototype.readBinary.call(this,A,g),A.loadSInt32(),g.versions["zea-cad"].compare([0,0,4])<0){const I=A.loadStr();let e=g.assetItem.getMaterialLibrary().getMaterial(I,!1);e||(e=new wA(I,"SimpleSurfaceShader"),e.getParameter("BaseColor").setValue(W.random(.25)),g.assetItem.getMaterialLibrary().addMaterial(e)),this.materialParam.setValue(e)}if(g.versions["zea-cad"].compare([0,0,2])>=0&&g.versions["zea-cad"].compare([0,0,4])<0){this.__layers=A.loadStrArray();for(const I of this.__layers)g.addGeomToLayer(this,I)}}else super.readBinary(A,g)}}p.register("CADBody",mI);const JB=new _e(1,1,1);let iC=null;class ys extends gA{addHighlight(A,g,I=!1){}removeHighlight(A,g=!1){}}class xg extends L{constructor(A){super(A);this.materialMapping={}}clone(A){const g=new xg;return g.copyFrom(this,A),g}setSelected(A){super.setSelected(A),A?this.activate():this.deactivate()}activate(){}deactivate(){}addHighlight(A,g,I=!1){if(super.addHighlight(A,g,!1),I){const i=g.clone();i.a=1;const s={};this.traverse(o=>{if(o instanceof ys)return!1;if(o instanceof gA){const a=o.materialParam.value;if(this.materialMapping[o.getId()]=a,!(a.getId()in s)){const n=a.clone();if(n.hasParameter("BaseColor")){const B=n.getParameter("BaseColor");B instanceof VA&&(B.colorSpace=cg.Gamma),B.setValue(i)}if(n.hasParameter("EdgeColor")){const B=n.getParameter("EdgeColor");B instanceof VA&&(B.colorSpace=cg.Gamma),B.setValue(i)}n.hasParameter("Overlay")&&n.getParameter("Overlay").setValue(.85),n.__isOpaque=!1,o.materialParam.value=n,s[a.getId()]=n}o.materialParam.value=s[a.getId()]}})}const e=this.getOwner().getOwner().getOwner();if(e){const i={},s={},o=this.getParameter("LinkedEntities");if(o){o.getValue().forEach((n,B)=>{if(n=="")return;const d=n.split(", "),l=d.pop();try{const r=e.resolvePath(d);if(r&&r instanceof mI)if(r.getNumChildren()==0)r.setShatterState(!0),i[r.getId()]||(i[r.getId()]=r,s[r.getId()]=[]),s[r.getId()].push(l);else{const c=r.getChildByName(l);c&&c.addHighlight(A,g,!0)}else console.log("linkedEntity.addHighlight(name, color, true):",d)}catch(r){console.log(B+":"+r.message)}});for(let n in i){const B=i[n],d=s[n];B.addHighlight(A+":"+d.toString(),g,!0)}}}}removeHighlight(A,g=!1){super.removeHighlight(A,!1),g&&this.traverse(e=>{e instanceof gA&&e.getId()in this.materialMapping&&(e.materialParam.value=this.materialMapping[e.getId()],delete this.materialMapping[e.getId()])});const C=this.getOwner().getOwner().getOwner();if(C){const e={},i={},s=this.getParameter("LinkedEntities");if(s){s.getValue().forEach(a=>{if(a=="")return;const n=a.split(", "),B=n.pop();try{const d=C.resolvePath(n);if(d&&d instanceof mI)if(d.getNumChildren()==0)d.setShatterState(!1),e[d.getId()]||(e[d.getId()]=d,i[d.getId()]=[]),i[d.getId()].push(B);else{const l=d.getChildByName(B);l&&l.removeHighlight(A,!0)}else console.log("linkedEntity.addHighlight(name, color, true):failed")}catch(d){console.log(d.message)}});for(let a in e){const n=e[a],B=i[a];n.removeHighlight(A+":"+B.toString(),!0)}}}}readBinary(A,g){super.readBinary(A,g),this.traverse(I=>{if(I instanceof gA){const C=I.materialParam.value;C.getShaderName()=="StandardSurfaceShader"&&C.setShaderName("FlatSurfaceShader"),I.__opacity=.99}}),g.assetItem.getGeometryLibrary().once("loaded",()=>{this.traverse(I=>{if(I.getName().startsWith("Text")){const C=[];return I.traverse(e=>{if(e instanceof gA){const s=e.geomParam.value.getBoundingBox();iC||(iC=new _C("plane"),iC.baseColorParam.value=new W(1,1,0,.001),iC.overlayParam.value=-.001);const o=new ys("plane",JB,iC),a=e.localXfoParam.value.multiply(e.geomOffsetXfoParam.value);a.tr.addInPlace(s.center()),a.sc.multiplyInPlace(s.diagonal()),o.localXfoParam.value=a,C.push(o)}},!1),C.forEach(e=>I.addChild(e,!1)),!1}},!1)})}}p.register("PMIItem",xg);class fe extends xg{constructor(A){super(A);this.camera=null}clone(A){const g=new fe;return g.copyFrom(this,A),g}activate(){super.activate();let A=[];this.hasParameter("GraphicalElements")&&(A=this.getParameter("GraphicalElements").getValue());const I=(()=>{let i=this;for(;i&&!(i instanceof AI);)i=i.getParentItem();return i instanceof AI?i:null})(),C=this.getParentItem().getParentItem(),e=C.getParentItem();if(e){const i=[];C.traverse(s=>{s instanceof fe||s instanceof xg&&i.push(s)}),i.forEach(s=>{const o=A.includes(s.getName());s.setVisible(o)})}if(this.camera){const i=this.localXfoParam.value.clone(),s=this.getParameter("TargetPoint").getValue().clone(),o=this.getParameter("CameraType").getValue();i.tr.scaleInPlace(I.unitsScale),s.scaleInPlace(I.unitsScale);const a=i.tr.distanceTo(s);if(i.sc.set(1,1,1),this.camera.globalXfoParam.value=i,this.camera.setFocalDistance(a),o=="Camera_Orthographic"&&(this.camera.setIsOrthographic(1,0),this.hasParameter("CameraZoom")&&I)){const n=this.getParameter("CameraZoom").getValue(),B=1/n*I.unitsScale*2;this.camera.setFrustumHeight(B)}}if(this.hasParameter("ClippingPlaneOrigin")){const i=this.getParameter("ClippingPlaneOrigin").getValue(),s=this.getParameter("ClippingPlaneNormal").getValue(),o=!0,a=-i.dot(s)*I.unitsScale;e.traverse(n=>{if(n instanceof xg)return!1;n instanceof gA&&(n.setCutawayEnabled(o),n.setCutVector(s),n.setCutDist(a))})}else e.traverse(i=>{if(i instanceof xg)return!1;i instanceof gA&&i.setCutawayEnabled(!1)})}deactivate(){super.deactivate()}readBinary(A,g){super.readBinary(A,g),g.camera&&(this.camera=g.camera)}}p.register("PMIView",fe);class Rt extends AI{constructor(A){super(A)}clone(A){const g=new Rt;return g.copyFrom(this,A),g}readBinary(A,g){A.loadStr();const I=A.loadStr();this.setName(I);let C=A.loadStr();const e=new D;if(g.versions["zea-cad"].compare([3,6,2])>0?(e.tr=A.loadFloat32Vec3(),e.ori=A.loadFloat32Quat(),this.localXfoParam.value=e):I==""&&this.setName(C),g.incrementAsync(),g.xrefs[C]){const i=g.xrefs[C],s=()=>{this.copyFrom(i),this.setName(I),this.localXfoParam.value=e,this.loaded=!0,this.emit("loaded"),g.decrementAsync()};i.loaded?s():i.on("loaded",s)}else{let i;g.resources?g.resources[C]?i=g.resources[C]:(C.includes("/")?C=C.slice(C.lastIndexOf("/")+1):C.includes("\\")&&(C=C.slice(C.lastIndexOf("\\")+1)),g.resources[C]?i=g.resources[C]:g.xrefLoadCallback&&(i=g.xrefLoadCallback.call(g,C,this))):g.xrefLoadCallback?i=g.xrefLoadCallback.call(g,C,this):(C.includes("/")?C=C.slice(C.lastIndexOf("/")+1):C.includes("\\")&&(C=C.slice(C.lastIndexOf("\\")+1)),i=g.folder+C+".zcad"),i?(g.xrefs[C]=this,this.load(i,new hI(g)).then(()=>{g.decrementAsync()},()=>{g.decrementAsync()})):(g.decrementAsync(),console.warn(`While Loading ${this.getPath()} unable to resolve ${C}`))}}}p.register("XRef",Rt);const Bg={OPAQUE:1<<0,TRANSPARENT:1<<1,OVERLAY:1<<2};class vo extends xI{constructor(){super();this.enabled=!0,this.passIndex=-1,this.__gl=null,this.renderer=null,this.__renderer=null,this.enabledParam=new RA("Enabled",!0),this.enabled=!0,this.passIndex=0,this.addParameter(this.enabledParam),this.enabledParam.on("valueChanged",()=>this.enabled=this.enabledParam.value)}parameterValueChanged(A){super.parameterValueChanged(A),this.renderer&&this.renderer.requestRedraw()}init(A,g){if(g==null)throw new Error("Missing constructor argument.");this.__gl=A.gl,this.renderer=A,this.__renderer=A,this.passIndex=g}setPassIndex(A){this.passIndex=A}getPassType(){return Bg.OPAQUE}itemAddedToScene(A,g){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}itemRemovedFromScene(A,g){throw Error(`${this.constructor.name} must implement itemAddedToScene and itemRemovedFromScene`)}startPresenting(){}stopPresenting(){}draw(A){throw Error("draw not implemented on GLPass")}drawHighlightedGeoms(A){}drawGeomData(A){}getGeomItemAndDist(A){throw Error("getGeomItemAndDist not implemented on GLPass")}}class Mo extends L{constructor(A=5,g=50,I=new W("#DCDCDC")){super("GridTree");this.disableBoundingBox=!0,this.setSelectable(!1);const C=new Dg("gridMaterial");C.baseColorParam.value=I,C.overlayParam.value=0;const e=new No(A,A,g,g,!0),i=new gA("GridItem",e,C);i.setSelectable(!1),this.addChild(i,!1);const s=new lg;s.setNumVertices(2),s.setNumSegments(1),s.setSegmentVertexIndices(0,0,1);const o=s.getVertexAttribute("positions");o.getValueRef(0).set(A*-.5,0,0),o.getValueRef(1).set(A*.5,0,0);const a=new Dg("gridXAxisMaterial");a.baseColorParam.value=new W(I.luminance(),0,0),a.overlayParam.value=0;const n=new gA("xAxisLine",s,a);n.setSelectable(!1),this.addChild(n,!1);const B=new Dg("gridYAxisMaterial");B.baseColorParam.value=new W(0,I.luminance(),0),B.overlayParam.value=0;const d=new gA("yAxisLine",s,B);d.setSelectable(!1);const l=new D;l.ori.setFromAxisAndAngle(new f(0,0,1),Math.PI*.5),d.geomOffsetXfoParam.value=l,this.addChild(d,!1)}_cleanBoundingBox(){return new gg}}p.register("GridTreeItem",Mo);const DB=new W("#DCDCDC");class vB{constructor(){this.envMapParam=new UC("EnvMap"),this.displayEnvMapParam=new RA("Display EnvMap",!1),this.envMapLODParam=new Y("EnvMapLOD",0),this.root=new L("root")}getRoot(){return this.root}getResourceLoader(){return AA}setEnvMap(A){this.envMapParam.value=A}setupGrid(A=5,g=50,I=DB){const C=new Mo(A,g,I);return this.root.addChild(C,!1),C}}class Lo extends cI{constructor(A){super(A);this.geomLibrary.on("loaded",()=>{this.emit("geomsLoaded")})}readBinary(A,g){g.versions["zea-engine"]||(g.versions["zea-mesh"]=new bC(A.loadStr()));const I=A.loadUInt32();return super.readBinary(A,g),g.versions["zea-engine"].compare([2,1,0])<0&&A.loadFloat32Vec2(),this.geomLibrary.setNumGeoms(A.loadUInt32()),I}load(A,g=new hI){return new Promise((I,C)=>{const e=A.lastIndexOf("/")>-1?A.substring(0,A.lastIndexOf("/"))+"/":"",i=A.lastIndexOf("/")>-1?A.substring(A.lastIndexOf("/")+1):"",s=i.substring(0,i.lastIndexOf("."));let o=0;g.assetItem=this,g.url=A,g.folder=e,AA.incrementWorkload(1),this.geomLibrary.on("loaded",()=>{AA.incrementWorkDone(1)}),AA.loadFile("archive",A).then(a=>{let n;if(a.tree2)n=new yC(a.tree2.buffer,0,vA.isMobileDevice);else{const B=a.tree?a.tree:a[Object.keys(a)[0]];n=new yC(B.buffer,0,vA.isMobileDevice),g.versions["zea-engine"]=new bC}if(o=this.readBinary(n,g),this.loaded=!0,this.emit("loaded"),o==0&&a.geoms)this.geomLibrary.readBinaryBuffer(i,a.geoms.buffer,g);else{const B=e+s,d={numGeomsPerFile:o,numGeoms:this.geomLibrary.getNumGeoms()};this.geomLibrary.loadGeomFilesStream(d,B,g)}I()},a=>{this.emit("error",a),C(a)})})}}p.register("VLAAsset",Lo);class MB extends cI{constructor(A){super(A);this.splitObjects=new RA("splitObjects",!1),this.splitGroupsIntoObjects=new RA("splitGroupsIntoObjects",!1),this.loadMtlFile=new RA("loadMtlFile",!0),this.unitsConversion=new Y("unitsConversion",1),this.defaultShader=new Zg("defaultShader",""),this.splitObjectsParam=new RA("splitObjects",!1),this.splitGroupsIntoObjectsParam=new RA("splitGroupsIntoObjects",!1),this.loadMtlFileParam=new RA("loadMtlFile",!0),this.unitsConversionParam=new Y("unitsConversion",1),this.defaultShaderParam=new Zg("defaultShader",""),this.addParameter(this.splitObjectsParam),this.addParameter(this.splitGroupsIntoObjectsParam),this.addParameter(this.loadMtlFileParam),this.addParameter(this.unitsConversionParam),this.addParameter(this.defaultShaderParam)}load(A){return this.loaded=!1,new Promise((g,I)=>{const C=A.substring(0,A.lastIndexOf("/"))+"/",e=c=>{const h=c.split(`
`),E=/\s+/;let b;const m=function(y){if(y.length==3)return new W(parseFloat(y[0]),parseFloat(y[1]),parseFloat(y[2]));throw new Error("Unable to parse a color from the following parts:"+y.join("_"))},G=(y,Q)=>{const u=new II(y);return u.load(C+Q),u};for(let y=0;y<h.length;y++){let Q=h[y].trim();if(Q.startsWith("#"))continue;Q.includes("#")&&(Q=Q.substring(0,Q.indexOf("#")).trim());const u=Q.split(E),Z=u.shift(),w=u.join(" ");switch(Z){case"newmtl":b=new wA(w),b.setShaderName("StandardSurfaceShader"),this.materialLibrary.addMaterial(b);break;case"Kd":{const F=b.getParameter("BaseColor");F.value=m(u),F instanceof VA&&F.colorSpace==cg.Linear;break}case"map_Kd":{const F=b.getParameter("BaseColor");F instanceof VA&&F.setImage(G("map_Kd",u[0]));break}case"Ks":const R=(parseFloat(u[0])+parseFloat(u[1])+parseFloat(u[2]))/3;b.getParameter("Roughness").value=1-R,b.getParameter("Reflectance").value=R;break;case"map_Ks":const S=b.getParameter("Roughness");S instanceof PA&&S.setImage(G("map_Ks",u[0])),b.getParameter("Reflectance").value=.2;break;case"d":const H=parseFloat(w);H<1&&(b.setShaderName("TransparentSurfaceShader"),b.getParameter("Opacity").value=H);break;case"map_d":b.getParameter("alpha").value=parseFloat(u[0]);break;case"map_bump":const X=b.getParameter("Normal");X instanceof VA&&X.setImage(G("normal",u[0]));break}}},i=c=>new Promise(h=>{_i(c,E=>{AA.incrementWorkDone(1),e(E),AA.incrementWorkDone(1),h()})}),s=[],o=[],a=[],n={},B=c=>uC(this,void 0,void 0,function*(){const h=c.split(`
`),E=/\s+/;let b,m,G=0;const y=Z=>{if(Z in n){let w=1;for(;Z+String(w)in n;)w++;Z=Z+String(w)}b={verticesRemapping:{},texCoordsRemapping:{},normalsRemapping:{},vertexIndices:[],texCoordIndices:[],normalIndices:[],numVertices:0,numTexCoords:0,numNormals:0,faceCounts:[],material:m},n[Z]=b,G++};y("geom");const Q=this.splitGroupsIntoObjectsParam.value,u=!1;for(let Z=0;Z<h.length&&!u;Z++){let w=h[Z].trim();if(w.startsWith("#"))continue;w.includes("#")&&(w=w.substring(0,w.indexOf("#")).trim());const R=w.split(E),S=R.shift(),H=R.join(" ");switch(S){case"":case"s":continue;case"mtllib":if(!this.loadMtlFileParam.value)continue;AA.incrementWorkload(2);const X=C+H;X&&(yield i(X));break;case"o":y(H);break;case"usemtl":m=H,y(H+Object.keys(n).length);break;case"g":Q&&y(H?R.join("_"):"Group"+G);break;case"v":s.push(R.map(F=>parseFloat(F)));break;case"vt":a.push(R.map(F=>parseFloat(F)));break;case"vn":o.push(R.map(F=>parseFloat(F)));break;case"f":{const F=[],_=[],oA=[];for(let sA=0,x=R.length;sA<x;sA++){const IA=R[sA].split("/").map(iA=>parseInt(iA)-1),q=IA[0];let lA=b.verticesRemapping[q];if(lA==null&&(lA=b.numVertices,b.verticesRemapping[q]=lA,b.numVertices++),F.push(lA),IA.length>1&&!isNaN(IA[1])){const iA=IA[1];_.push(iA)}if(IA.length>2&&!isNaN(IA[2])){const iA=IA[2];oA.push(iA)}}b.vertexIndices.push(F),oA.length>0&&b.normalIndices.push(oA),_.length>0&&b.texCoordIndices.push(_),b.faceCounts[F.length-3]==null&&(b.faceCounts[F.length-3]=[]),b.faceCounts[F.length-3]++;break}default:console.warn("Unhandled line:"+w)}}}),d=()=>{for(const c in n)n[c].numVertices!=0&&l(c,n[c]);this.emit("loaded"),this.getGeometryLibrary().emit("loaded"),this.emit("geomsLoaded"),g()},l=(c,h)=>{for(let R=0;R<h.faceCounts.length;R++)h.faceCounts[R]==null&&(h.faceCounts[R]=0);const E=h.numVertices,b=new yI;b.setDebugName(c),b.setFaceCounts(h.faceCounts),b.setNumVertices(E);const m=b.getVertexAttribute("positions"),G=this.unitsConversionParam.value;for(const R in h.verticesRemapping){const S=Number.parseInt(R),H=h.verticesRemapping[S];m.getValueRef(H).set(s[S][0]*G,s[S][1]*G,s[S][2]*G)}let y,Q;h.normalIndices.length>0&&(y=new hg,b.addVertexAttribute("normals",y)),h.texCoordIndices.length>0&&(Q=new Xg,b.addVertexAttribute("texCoords",Q));const u=Array(h.faceCounts.length).fill(0);for(let R=0;R<h.vertexIndices.length;R++){const S=h.vertexIndices[R];let H=0;for(let X=0;X<S.length-3;++X)h.faceCounts[X]&&(H+=h.faceCounts[X]);if(H+=u[S.length-3],u[S.length-3]++,b.setFaceVertexIndices(H,S),y){const X=h.normalIndices[R];for(let F=0;F<X.length;F++){const _=new f(o[X[F]][0],o[X[F]][1],o[X[F]][2]);y.setFaceVertexValue(H,F,_)}}if(Q&&h.texCoordIndices.length==h.vertexIndices.length){const X=h.texCoordIndices[R];for(let F=0;F<X.length;F++){const _=new K(a[X[F]][0],a[X[F]][1]);Q.setFaceVertexValue(H,F,_)}}}const Z=new gA(c,b),w=b.getBoundingBox().center();{const R=w.negate(),S=b.getVertexAttribute("positions");for(let H=0;H<S.getCount();H++)S.getValueRef(H).addInPlace(R);b.setBoundingBoxDirty()}if(Z.localXfoParam.value=new D(w),h.material!=null&&this.materialLibrary.hasMaterial(h.material))Z.materialParam.value=this.materialLibrary.getMaterial(h.material);else{const R=this.defaultShaderParam.value,S=new wA(c+" mat");S.setShaderName(R!=""?R:"StandardSurfaceShader"),this.materialLibrary.addMaterial(S),Z.materialParam.value=S}this.addChild(Z,!1)};(()=>{AA.incrementWorkload(2),_i(A,c=>{AA.incrementWorkDone(1),B(c).then(()=>{d(),AA.incrementWorkDone(1)})},c=>{this.emit("error",c),I(c)})})()})}}class ft extends xI{constructor(){super();this.__activated=!1}activateTool(){if(this.__activated)throw new Error("Tool already activate");this.__activated=!0,this.emit("activatedChanged",{activated:this.__activated})}deactivateTool(){this.__activated=!1,this.emit("activatedChanged",{activated:this.__activated})}onPointerDown(A){}onPointerMove(A){}onPointerUp(A){}onPointerDoublePress(A){}onPointerEnter(A){}onPointerLeave(A){}onWheel(A){}onKeyDown(A){}onKeyUp(A){}onTouchCancel(A){}}const _A={pan:0,dolly:1,focussing:2,look:3,turntable:4,tumbler:5,trackball:6};class Ee extends ft{constructor(A){super();this.orbitAroundCursor=!1,this.zoomTowardGeomUnderCursor=!1,this.aimFocusOnTouchTap=2,this.aimFocusOnMouseClick=2,this.enabledWASDWalkMode=!1,this.defaultManipulationState=_A.turntable,this.pointerDown=!1,this.dragging=0,this.keyboardMovement=!1,this.keysPressed=[],this.velocity=new f,this.prevVelocityIntegrationTime=-1,this.ongoingTouches={},this.mouseWheelMovementDist=0,this.mouseWheelZoomCount=0,this.mouseWheelZoomId=-1,this.orbitRateParam=new Y("OrbitRate",vA.isMobileDevice?.5:1),this.dollySpeedParam=new Y("DollySpeed",.02),this.mouseWheelDollySpeedParam=new Y("MouseWheelDollySpeed",.1),this.walkSpeedParam=new Y("WalkSpeed",5),this.walkModeCollisionDetection=new RA("WalkModeCollisionDetection",!1),this.appData=A,this.defaultManipulationState=_A.turntable,this.manipulationState=this.defaultManipulationState,this.addParameter(this.orbitRateParam),this.addParameter(this.dollySpeedParam),this.addParameter(this.mouseWheelDollySpeedParam),this.addParameter(this.walkSpeedParam),this.addParameter(this.walkModeCollisionDetection)}activateTool(){super.activateTool(),this.appData&&this.appData.renderer&&(this.prevCursor=this.appData.renderer.getGLCanvas().style.cursor,this.appData.renderer.getGLCanvas().style.cursor="cursor")}deactivateTool(){super.deactivateTool(),this.appData&&this.appData.renderer&&(this.appData.renderer.getGLCanvas().style.cursor=this.prevCursor)}setDefaultManipulationMode(A){if(typeof A=="string"?this.defaultManipulationState=_A[A]:this.defaultManipulationState=A,!Object.values(_A).includes(this.defaultManipulationState))throw new Error("Invalid Camera Manipulation Mode. Must be one of "+Object.keys(_A))}look(A,g){const{viewport:I}=A,C=I.getCamera(),e=this.orbitRateParam.value,i=C.globalXfoParam.value,s=new BA;s.rotateZ(g.x/I.getWidth()*Math.PI*e),i.ori=s.multiply(i.ori);const o=new BA;o.rotateX(g.y/I.getHeight()*Math.PI*e),i.ori.multiplyInPlace(o),C.globalXfoParam.value=i}turntable(A,g){const{viewport:I}=A,C=I.getCamera(),e=this.orbitRateParam.value,i=C.globalXfoParam.value,s=i.ori.inverse().rotateVec3(i.tr.subtract(this.orbitTarget)),o=new BA;o.rotateZ(g.x/I.getWidth()*2*Math.PI*-e),i.ori=o.multiply(i.ori);const a=new BA;a.rotateX(g.y/I.getHeight()*Math.PI*-e),i.ori.multiplyInPlace(a),i.tr=this.orbitTarget.add(i.ori.rotateVec3(s)),C.globalXfoParam.value=i}tumbler(A,g){const{viewport:I}=A,C=I.getCamera(),e=this.orbitRateParam.value,i=C.globalXfoParam.value,s=i.ori.getXaxis(),o=i.ori.getYaxis(),a=i.ori.getZaxis(),B=s.scale(-g.x).add(o.scale(g.y)).cross(a);B.normalizeInPlace();const d=g.length(),l=i.ori.inverse().rotateVec3(i.tr.subtract(this.orbitTarget)),r=new BA;r.setFromAxisAndAngle(B,d/I.getWidth()*Math.PI*-e),i.ori=r.multiply(i.ori),i.tr=this.orbitTarget.add(i.ori.rotateVec3(l)),C.globalXfoParam.value=i}trackball(A,g){const{viewport:I}=A,C=I.getCamera(),e=this.orbitRateParam.value,i=C.globalXfoParam.value,s=i.ori.getXaxis(),o=i.ori.getYaxis(),a=i.ori.getZaxis(),B=s.scale(-g.x).add(o.scale(g.y)).cross(a);B.normalizeInPlace();const d=g.length(),l=i.ori.inverse().rotateVec3(i.tr.subtract(this.orbitTarget)),r=new BA;r.setFromAxisAndAngle(B,d/I.getWidth()*Math.PI*-e),i.ori=r.multiply(i.ori),i.tr=this.orbitTarget.add(i.ori.rotateVec3(l)),C.globalXfoParam.value=i}pan(A,g){const{viewport:I}=A,C=I.getCamera(),e=new D,i=new f(1,0,0),s=new f(0,1,0);if(C.isOrthographic()){const a=C.getFrustumHeight(),n=a*(I.getWidth()/I.getHeight());e.tr=i.scale(-(g.x/I.getWidth())*n),e.tr.addInPlace(s.scale(g.y/I.getHeight()*a))}else{const a=C.getFocalDistance(),n=C.getFov(),B=2*a*Math.tan(.5*n),d=B*(I.getWidth()/I.getHeight());e.tr=i.scale(-(g.x/I.getWidth())*d),e.tr.addInPlace(s.scale(g.y/I.getHeight()*B))}const o=C.globalXfoParam.value;C.globalXfoParam.value=o.multiply(e)}dolly(A,g){const{viewport:I}=A,C=I.getCamera(),e=C.getFocalDistance(),i=()=>{const o=g.y*this.dollySpeedParam.value*e,a=new D;a.tr.set(0,0,o);const n=C.globalXfoParam.value;C.globalXfoParam.value=n.multiply(a)},s=()=>{const o=g.y*this.dollySpeedParam.value,a=C.getFrustumHeight(),n=a*o;C.setFrustumHeight(a+n)};C.isOrthographic()?s():i()}initDrag(A){const{pointerPos:g}=A;A.setCapture(this),this.pointerDown=!0;const C=A.viewport.getCamera(),e=C.globalXfoParam.value;if(this.orbitAroundCursor)if(A.intersectionData!=null&&this.orbitAroundCursor){this.orbitTarget=A.intersectionData.intersectionPos;const i=e.inverse().transformVec3(A.intersectionData.intersectionPos);C.setFocalDistance(-i.z)}else A.pointerRay?this.orbitTarget=A.pointerRay.pointAtDist(C.getFocalDistance()):this.orbitTarget=e.tr.add(e.ori.getZaxis().scale(-C.getFocalDistance()));else this.orbitTarget=e.tr.add(e.ori.getZaxis().scale(-C.getFocalDistance()));this.prevPointerPos=g,this.dragging=1}endDrag(A){A.getCapture()==this&&A.releaseCapture(),this.dragging=0,this.pointerDown=!1}aimFocus(A,g,I=-1,C=400){this.focusIntervalId&&clearInterval(this.focusIntervalId);const e=Math.round(C/20),i=this.manipulationState;let s=0;const o=()=>{const a=A.globalXfoParam.value,n=A.getFocalDistance(),B=g.subtract(a.tr),d=B.normalizeInPlace(),l=a.clone();if(i==_A.turntable||i==_A.look){{const h=a.ori.getZaxis().clone();h.z=0;const E=B.negate();E.z=0;const b=new BA;b.setFrom2Vectors(h,E),l.ori=b.multiply(l.ori)}{const h=a.ori.getXaxis().clone(),E=a.ori.getZaxis().clone(),b=B.negate();b.subtractInPlace(h.scale(b.dot(h))),b.normalizeInPlace();const m=new BA;E.cross(b).dot(h)>0?m.rotateX(E.angleTo(b)):m.rotateX(-E.angleTo(b)),l.ori=l.ori.multiply(m)}{const h=l.ori.getXaxis().clone(),E=h.clone();E.z=0,E.normalizeInPlace();const b=new BA;b.setFrom2Vectors(h,E),l.ori=b.multiply(l.ori)}}else{const h=a.ori.getZaxis().clone(),E=B.negate(),b=new BA;b.setFrom2Vectors(h,E),l.ori=b.multiply(l.ori)}const r=Math.pow(s/e,2),c=a.clone();if(c.ori=a.ori.lerp(l.ori,r),I>0){const h=B.scale(d-I);c.tr.addInPlace(h.scale(r))}A.setFocalDistance(n+(d-n)*r),A.globalXfoParam.value=c,s++,s<=e?this.focusIntervalId=setTimeout(o,20):(this.focusIntervalId=void 0,this.emit("movementFinished"),A.emit("movementFinished"))};o()}orientPointOfView(A,g,I,C=0,e=400){this.focusIntervalId&&clearInterval(this.focusIntervalId);const i=Math.round(e/20);let s=0;const o=()=>{const a=A.globalXfoParam.value,n=A.getTargetPosition(),B=Math.pow(s/i,2),d=g.subtract(a.tr),l=d.normalizeInPlace(),r=d.scale(l-C),c=a.tr.add(r.scale(B)),h=n.lerp(I,B);A.setPositionAndTarget(c,h),s++,s<=i?this.focusIntervalId=setTimeout(o,20):(this.focusIntervalId=void 0,this.emit("movementFinished"),A.emit("movementFinished"))};o()}onPointerDoublePress(A){const g=I=>{const e=A.viewport.getCamera(),s=e.globalXfoParam.value.tr.add(I.dir.scale(A.intersectionData.dist));this.aimFocus(e,s),A.aimTarget=s,A.aimDistance=A.intersectionData.dist,this.emit("aimingFocus",A),e.emit("aimingFocus",A),A.stopPropagation()};if(A.intersectionData&&this.aimFocusOnMouseClick){if(A.pointerType===DA.mouse&&this.aimFocusOnMouseClick==2){const I=A;g(I.pointerRay),I.preventDefault()}A.pointerType===DA.touch&&this.aimFocusOnTouchTap==2&&g(A.pointerRay)}}onPointerDown(A){if(A.pointerType===DA.mouse){this.dragging==1&&this.endDrag(A),this.initDrag(A);const g=A;g.button==2?this.manipulationState=_A.pan:g.ctrlKey&&g.altKey?this.manipulationState=_A.dolly:g.ctrlKey||g.button==2?this.manipulationState=_A.look:this.manipulationState=this.defaultManipulationState,g.preventDefault()}else A.pointerType===DA.touch&&this._onTouchStart(A);A.stopPropagation()}onPointerMove(A){this.dragging!=0&&(A.pointerType===DA.mouse&&this._onMouseMove(A),A.pointerType===DA.touch&&this._onTouchMove(A),this.dragging=2,A.stopPropagation())}_onMouseMove(A){if(!this.pointerDown)return;const g=A.pointerPos,I=g.subtract(this.prevPointerPos);switch(this.manipulationState){case _A.turntable:this.turntable(A,I);break;case _A.tumbler:this.tumbler(A,I);break;case _A.trackball:this.trackball(A,I);break;case _A.look:this.look(A,I);break;case _A.pan:this.pan(A,g.subtract(this.prevPointerPos));break;case _A.dolly:this.dolly(A,I);break}this.prevPointerPos=g,A.preventDefault()}_onTouchMove(A){const g=A.touches;if(g.length==1){const I=g[0],C=new K(I.clientX,I.clientY),e=this.ongoingTouches[I.identifier];if(!e)return;const i=C.subtract(e.pos);switch(this.defaultManipulationState){case _A.look:i.scaleInPlace(6),this.look(A,i);break;case _A.turntable:this.turntable(A,i);break;case _A.tumbler:this.tumbler(A,i);break;case _A.trackball:this.trackball(A,i);break}e.pos=C}else if(g.length==2){const I=g[0],C=this.ongoingTouches[I.identifier],e=g[1],i=this.ongoingTouches[e.identifier];if(!C||!i)return;const s=new K(I.clientX,I.clientY),o=new K(e.clientX,e.clientY),a=i.pos.subtract(C.pos).length(),n=o.subtract(s).length(),B=a-n,d=s.subtract(C.pos),l=o.subtract(i.pos),r=d.add(l);r.scaleInPlace(.5);const c=B*.002,{viewport:h}=A,E=h.getCamera(),b=E.getFocalDistance(),m=E.getFov(),G=new f(1,0,0),y=new f(0,1,0),Q=2*b*Math.tan(.5*m),u=Q*(h.getWidth()/h.getHeight()),Z=new D;Z.tr=G.scale(-(r.x/h.getWidth())*u),Z.tr.addInPlace(y.scale(r.y/h.getHeight()*Q));const w=c*b;switch(E.setFocalDistance(b+w),Z.tr.z+=w,this.defaultManipulationState){case _A.tumbler:case _A.trackball:const S=i.pos.subtract(C.pos),H=o.subtract(s);let X=S.normalize().angleTo(H.normalize());S.cross(H)<0&&(X=-X);const F=new BA;F.rotateZ(X),Z.ori.multiplyInPlace(F);break}const R=E.globalXfoParam.value;E.globalXfoParam.value=R.multiply(Z),C.pos=s,i.pos=o}}onPointerUp(A){if(this.dragging==1){if(this.endDrag(A),A.intersectionData&&(A.pointerType===DA.mouse&&this.aimFocusOnMouseClick==1||A.pointerType===DA.touch&&this.aimFocusOnTouchTap==1)){const I=A.viewport.getCamera(),C=I.globalXfoParam.value,e=(A.pointerType===DA.mouse,A.pointerRay),i=C.tr.add(e.dir.scale(A.intersectionData.dist));this.aimFocus(I,i),A.aimTarget=i,A.aimDistance=A.intersectionData.dist,this.emit("aimingFocus",A),I.emit("aimingFocus",A),A.stopPropagation(),A.pointerType===DA.mouse&&A.preventDefault()}}else if(this.dragging==2){if(A.pointerType===DA.mouse)this.endDrag(A),this.emit("movementFinished"),A.viewport.getCamera().emit("movementFinished");else if(A.pointerType===DA.touch){const g=A,{changedTouches:I,touches:C}=g;for(let e=0;e<I.length;e++)this.__endTouch(I[e]);Object.keys(this.ongoingTouches).length==0?this.endDrag(A):C.length||(this.endDrag(A),this.ongoingTouches={}),g.preventDefault()}A.stopPropagation()}}onPointerLeave(A){this.keysPressed.length>0&&(this.keysPressed=[],this.velocity.set(0,0,0),this.keyboardMovement=!1)}onWheel(A){const I=A.viewport.getCamera(),C=this.mouseWheelDollySpeedParam.value,e=A.shiftKey?.1:.5,i=I.globalXfoParam.value;let s;if(!I.isOrthographic())if(this.zoomTowardGeomUnderCursor)if(A.intersectionData!=null){s=i.tr.subtract(A.intersectionData.intersectionPos),s.normalizeInPlace();const l=i.inverse().transformVec3(A.intersectionData.intersectionPos);I.setFocalDistance(-l.z)}else{const l=A.pointerRay.pointAtDist(I.getFocalDistance());s=i.tr.subtract(l),s.normalizeInPlace()}else s=I.globalXfoParam.value.ori.getZaxis();const o=6,a=A.deltaY<0?-1:1,n=()=>{const l=I.getFocalDistance(),r=l*this.mouseWheelMovementDist;i.tr.addInPlace(s.scale(r)),I.setFocalDistance(l+r),I.globalXfoParam.value=i,this.mouseWheelZoomCount++,this.mouseWheelZoomCount<o?this.mouseWheelZoomId=window.setTimeout(n,10):(this.mouseWheelZoomId=-1,this.emit("movementFinished"),I.emit("movementFinished"))},B=()=>{const l=50*this.mouseWheelMovementDist;new D().tr.set(0,0,l),i.tr.addInPlace(s.scale(l)),I.globalXfoParam.value=i},d=()=>{const l=I.getFrustumHeight(),r=l*this.mouseWheelMovementDist;if(I.setFrustumHeight(l+r),A.intersectionData&&this.zoomTowardGeomUnderCursor){const c=i.tr.subtract(A.intersectionData.intersectionPos),h=i.ori.getZaxis();c.subtractInPlace(h.scale(c.dot(h))),i.tr.addInPlace(c.scale(r/(l+r))),I.globalXfoParam.value=i}this.mouseWheelZoomCount++,this.mouseWheelZoomCount<o?this.mouseWheelZoomId=window.setTimeout(d,10):(this.mouseWheelZoomId=-1,this.emit("movementFinished"),I.emit("movementFinished"))};this.mouseWheelZoomId>0?(this.mouseWheelMovementDist+=a*C*e*.5/o,this.mouseWheelZoomCount=0):(this.mouseWheelMovementDist=a*C*e/o,this.mouseWheelZoomCount=0,I.isOrthographic()?d():A.ctrlKey?B():n()),A.preventDefault(),A.stopPropagation()}integrateVelocityChange(A){const{viewport:g}=A,I=g.getCamera(),C=performance.now();if(this.prevVelocityIntegrationTime>0){const e=(C-this.prevVelocityIntegrationTime)/1e3,i=this.walkSpeedParam.value;if(i>0){const s=new D;s.tr=this.velocity.normalize().scale(i*e);const a=I.globalXfoParam.value.multiply(s);if(this.walkModeCollisionDetection.value){const r=new D(a.tr),c=new rg(a.tr,new f(0,0,-1)),h=g.getRenderer().raycastCluster(r,c,1.5,.5,Bg.OPAQUE);if(h.length>0){let E=0;h.forEach(b=>{E+=b.dist}),E/=h.length,a.tr=c.start.add(c.dir.scale(E-1.5))}}I.globalXfoParam.value=a}}this.prevVelocityIntegrationTime=C}onKeyDown(A){if(!this.enabledWASDWalkMode)return;const g=A.key.toLowerCase();if(!this.keysPressed.includes(g)){switch(g){case"w":this.velocity.z-=1;break;case"s":this.velocity.z+=1;break;case"a":this.velocity.x-=1;break;case"d":this.velocity.x+=1;break;default:return}if(A.stopPropagation(),this.keysPressed.push(g),!this.keyboardMovement){this.keyboardMovement=!0,this.prevVelocityIntegrationTime=performance.now();const I=()=>{this.integrateVelocityChange(A),this.keyboardMovement&&window.requestAnimationFrame(I)};window.requestAnimationFrame(I)}}}onKeyUp(A){const g=A.key.toLowerCase();if(!this.keysPressed.includes(g))return;switch(g){case"w":this.velocity.z+=1;break;case"s":this.velocity.z-=1;break;case"a":this.velocity.x+=1;break;case"d":this.velocity.x-=1;break;default:return}A.stopPropagation();const I=this.keysPressed.indexOf(g);this.keysPressed.splice(I,1),this.keysPressed.length==0&&(this.keyboardMovement=!1)}__startTouch(A){this.ongoingTouches[A.identifier]={identifier:A.identifier,pos:new K(A.clientX,A.clientY)}}__endTouch(A){delete this.ongoingTouches[A.identifier]}_onTouchStart(A){const g=A.changedTouches;for(let I=0;I<g.length;I++)this.__startTouch(g[I]);this.initDrag(A)}onTouchEnd(A){A.preventDefault(),A.stopPropagation();const g=A.changedTouches;for(let I=0;I<g.length;I++)this.__endTouch(g[I]);Object.keys(this.ongoingTouches).length==0&&this.endDrag(A)}onTouchCancel(A){A.preventDefault();const g=A.touches;for(let I=0;I<g.length;I++)this.__endTouch(g[I]);Object.keys(this.ongoingTouches).length==0&&this.endDrag(A)}static get MANIPULATION_MODES(){return _A}}const LB=function(t,A){let g=null;if(A.webglContextType!=null)try{g=t.getContext(A.webglContextType,A),g.name=A.webglContextType}catch{}else{const I=["webgl2","webgl"];for(let C=0;C<I.length;C++){const e=I[C];try{g=t.getContext(e,A),g.name=e}catch{}if(g)break}}if(!g)throw new Error("WebGL not supported on your system");return g.sizeInBytes=function(I){switch(I){case this.BYTE:case this.UNSIGNED_BYTE:return 1;case this.SHORT:case this.UNSIGNED_SHORT:return 2;case this.INT:case this.UNSIGNED_INT:case this.FLOAT:return 4;default:throw new Error("unknown type")}},g.name=="webgl2"?(g.floatTexturesSupported=!0,g.__ext_float_linear=g.getExtension("OES_texture_float_linear"),g.__ext_texture_half_float_linear=g.getExtension("OES_texture_half_float_linear"),g.__ext_color_buffer_float=g.getExtension("EXT_color_buffer_float")):(g.__ext_float=g.getExtension("OES_texture_float"),g.__ext_float?(g.floatTexturesSupported=!0,g.__ext_float_linear=g.getExtension("OES_texture_float_linear")):console.warn("OES_texture_float is not available"),g.__ext_half_float=g.getExtension("OES_texture_half_float"),g.__ext_half_float&&(g.HALF_FLOAT=g.__ext_half_float.HALF_FLOAT_OES,g.floatTexturesSupported=!0,g.__ext_texture_half_float_linear=g.getExtension("OES_texture_half_float_linear")),g.__ext_color_buffer_float=g.getExtension("EXT_color_buffer_float"),g.__ext_std_derivatives=g.getExtension("OES_standard_derivatives"),g.__ext_Inst=g.getExtension("ANGLE_instanced_arrays"),g.__ext_Inst&&(g.vertexAttribDivisor=g.__ext_Inst.vertexAttribDivisorANGLE.bind(g.__ext_Inst),g.drawArraysInstanced=g.__ext_Inst.drawArraysInstancedANGLE.bind(g.__ext_Inst),g.drawElementsInstanced=g.__ext_Inst.drawElementsInstancedANGLE.bind(g.__ext_Inst)),g.__ext_VAO=g.getExtension("OES_vertex_array_object"),g.__ext_VAO&&(g.createVertexArray=g.__ext_VAO.createVertexArrayOES.bind(g.__ext_VAO),g.deleteVertexArray=g.__ext_VAO.deleteVertexArrayOES.bind(g.__ext_VAO),g.bindVertexArray=g.__ext_VAO.bindVertexArrayOES.bind(g.__ext_VAO)),g.__ext_element_index_uint=g.getExtension("OES_element_index_uint"),g.__ext_WEBGL_depth_texture=g.getExtension("WEBGL_depth_texture"),g.__ext_WEBGL_depth_texture&&(g.UNSIGNED_INT_24_8=g.__ext_WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL),g.DRAW_FRAMEBUFFER=g.FRAMEBUFFER),g.__ext_frag_depth=g.getExtension("EXT_frag_depth"),g.setupInstancedQuad=function(){const I=new Float32Array([0,1,2,3]),C=new Uint16Array([0,1,2,2,1,3]);this.__quadVertexIdsBuffer=this.createBuffer(),this.bindBuffer(this.ARRAY_BUFFER,this.__quadVertexIdsBuffer),this.bufferData(this.ARRAY_BUFFER,I,this.STATIC_DRAW),this.__quadIndexBuffer=this.createBuffer(),this.bindBuffer(this.ELEMENT_ARRAY_BUFFER,this.__quadIndexBuffer),this.bufferData(this.ELEMENT_ARRAY_BUFFER,C,this.STATIC_DRAW),this.__quadattrbuffers={vertexIDs:{buffer:this.__quadVertexIdsBuffer,dataType:"Float32",dimension:1,count:I.length,shared:!0}}},g.drawQuad=function(){this.drawElements(this.TRIANGLES,6,this.UNSIGNED_SHORT,0)},g},Uo=function(t,A){if(!A.width||!A.height){if(!A.width)throw new Error("Invalid texture params. 'width' not provided");if(!A.height)throw new Error("Invalid texture params. 'height' not provided")}const g=t.getParameter(t.MAX_TEXTURE_SIZE);if(A.width<=0||A.width>g||A.height<=0||A.height>g)throw new Error("GLTextureParams: Invalid texture size. width:"+A.width+" height:"+A.height+" maxSize:"+g);const I={width:A.width,height:A.height},C=i=>isNaN(i)?t[i]:i,e=(i,s)=>{i in A?I[i]=C(A[i]):s&&(I[i]=C(s))};if(e("format"),e("internalFormat",I.format),e("type",t.UNSIGNED_BYTE),e("minFilter",A.filter?A.filter:t.LINEAR),e("magFilter",A.filter?A.filter:t.LINEAR),e("wrapS",A.wrapS?A.wrapS:t.CLAMP_TO_EDGE),e("wrapT",A.wrapT?A.wrapT:t.CLAMP_TO_EDGE),e("flipY",!1),e("mipMapped",!1),e("depthInternalFormat"),e("depthFormat"),e("depthType"),A.createDepthTexture&&(t.name!="webgl2"&&!t.__ext_WEBGL_depth_texture?I.depthType=t.UNSIGNED_SHORT:(t.name=="webgl2",I.depthFormat=t.DEPTH_COMPONENT,I.depthType=t.UNSIGNED_INT)),I.format==t.FLOAT)if(t.name=="webgl2")I.filter==t.LINEAR&&!t.__ext_float_linear&&(console.warn("Floating point texture filtering not supported on result device"),I.filter=t.NEAREST);else if(t.__ext_float)I.filter==t.LINEAR&&!t.__ext_float_linear&&(console.warn("Floating point texture filtering not supported on result device"),I.filter=t.NEAREST);else if(t.__ext_half_float)I.format=t.HALF_FLOAT,I.filter==t.LINEAR&&!t.__ext_texture_half_float_linear&&(console.warn("Half Float texture filtering not supported on result device"),I.filter=t.NEAREST);else throw new Error("OES_texture_half_float is not available");else if(I.format==t.HALF_FLOAT){if(t.name!="webgl2"){if(t.__ext_half_float)I.filter==t.LINEAR&&!t.__ext_texture_half_float_linear&&(console.warn("Half Float texture filtering not supported on result device"),I.filter=t.NEAREST);else throw new Error("OES_texture_half_float is not available");if(I.channels==t.RGB)throw new Error("OES_texture_half_float onlysupports RGBA textures")}}else if(I.format=="sRGB"&&!t.__ext_sRGB)throw new Error("EXT_sRGB is not available");return I.format!=null&&t.name=="webgl2"&&I.internalFormat==I.format&&(I.type==t.FLOAT?I.format==t.RED?I.internalFormat=t.R32F:I.format==t.RG?I.internalFormat=t.RG32F:I.format==t.RGB?I.internalFormat=t.RGB32F:I.format==t.RGBA&&(I.internalFormat=t.RGBA32F):I.type==t.HALF_FLOAT?I.format==t.RED?I.internalFormat=t.R16F:I.format==t.RGB?I.internalFormat=t.RGB16F:I.format==t.RGBA&&(I.internalFormat=t.RGBA16F):I.type==t.UNSIGNED_BYTE&&(I.format==t.RED&&(I.internalFormat=t.R8),I.format==t.RGB?I.internalFormat=t.RGB8:I.format==t.RGBA&&(I.internalFormat=t.RGBA8))),I.depthFormat!=null&&(t.name=="webgl2"?I.depthType==t.UNSIGNED_SHORT?I.depthInternalFormat=t.DEPTH_COMPONENT16:I.depthType==t.UNSIGNED_INT&&(I.depthInternalFormat=t.DEPTH_COMPONENT24):I.depthInternalFormat=I.depthFormat),I};class KA extends po{constructor(A,g){super();if(this.__image=null,this.__internalFormat=0,this.__type=0,this.__format=0,this.__wrapParam=0,this.params={},this.__minFilter=0,this.__magFilter=0,this.__wrapS=0,this.__wrapT=0,this.__flipY=!1,this.__mipMapped=!1,this.invert=!1,this.alphaFromLuminance=!1,this.__gltex=null,this.__typeParam="",this.__formatParam="",this.__gl=A,this.ready=!1,this.width=0,this.height=0,this.textureType=1,this.textureDesc=[0,0,0,0],this.__loaded=!1,this.__bound=!1,g!=null)if(g instanceof Fg){this.__image=g;const I=()=>{const C=this.__image.getParams(),e=C.width,i=C.height,s=C.data;this.bufferData(s,e,i)};this.__image.on("updated",I),this.__image.isLoaded()?this.configure(this.__image.getParams()):this.__image.on("loaded",()=>{this.configure(this.__image.getParams())})}else this.configure(g)}isLoaded(){return this.__loaded}getImage(){return this.__image}getInternalFormat(){return this.__internalFormat}getType(){return this.__type}getFormat(){return this.__format}getWrap(){return this.__wrapParam}getMipMapped(){return this.__mipMapped}configure(A){const g=this.__gl,I=Uo(g,A);this.params=I,this.__format=I.format,this.__internalFormat=I.internalFormat,this.__type=I.type,this.__minFilter=I.minFilter,this.__magFilter=I.magFilter,this.__wrapS=I.wrapS,this.__wrapT=I.wrapT,this.__flipY="flipY"in A?A.flipY:!1,this.__mipMapped="mipMapped"in A?A.mipMapped:!1,this.invert="invert"in A?A.invert:!1,this.alphaFromLuminance="alphaFromLuminance"in A?A.alphaFromLuminance:!1,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,this.textureType==1&&this.__format==g.RGBA&&(this.textureType=2),this.__gltex&&g.deleteTexture(this.__gltex),this.__gltex=g.createTexture(),this.__updateGLTexParams();const C=I.width,e=I.height,i=A.data;i?this.bufferData(i,C,e,!1,!1):this.resize(C,e,!1,!1),this.__loaded||(this.emit("ready"),this.__loaded=!0)}__updateGLTexParams(){const A=this.__gl;A.bindTexture(A.TEXTURE_2D,this.__gltex),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MAG_FILTER,this.__minFilter),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MIN_FILTER,this.__magFilter),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_S,this.__wrapS),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_T,this.__wrapT)}bufferData(A,g=-1,I=-1,C=!0,e=!0){const i=this.__gl;if(A!=null){if(A instanceof WebGLTexture)this.__gltex=A;else if(A instanceof HTMLImageElement||A instanceof ImageData||A instanceof HTMLCanvasElement||A instanceof HTMLImageElement||A instanceof HTMLVideoElement)C&&i.bindTexture(i.TEXTURE_2D,this.__gltex),i.texImage2D(i.TEXTURE_2D,0,this.__internalFormat,this.__format,this.__type,A),this.width=A.width,this.height=A.height;else{g==-1&&(g=this.width),I==-1&&(I=this.height);const s=g*I;let o;switch(this.__format){case i.RED:case i.RED_INTEGER:case i.ALPHA:case i.LUMINANCE:case i.LUMINANCE_ALPHA:o=1;break;case i.RG:o=2,i.pixelStorei(i.UNPACK_ALIGNMENT,2);break;case i.RGB:o=3;break;case i.RGBA:o=4;break;default:console.warn("Reaching default case: numChannels:=1"),o=1;break}A.length!=s*o&&console.warn("Invalid data for Image width:"+g+" height:"+I+" format:"+this.__formatParam+" type:"+this.__typeParam+" Data Length:"+A.length+" Expected:"+s*o);let a=A;this.__type==i.HALF_FLOAT&&A instanceof Float32Array&&(a=P.convertFloat32ArrayToUInt16Array(A)),C&&i.bindTexture(i.TEXTURE_2D,this.__gltex),i.name=="webgl2"?i.texImage2D(i.TEXTURE_2D,0,this.__internalFormat,g,I,0,this.__format,this.__type,a,0):i.texImage2D(i.TEXTURE_2D,0,this.__internalFormat,g,I,0,this.__format,this.__type,a),this.width=g,this.height=I}this.__mipMapped&&i.generateMipmap(i.TEXTURE_2D)}else C&&i.bindTexture(i.TEXTURE_2D,this.__gltex),i.texImage2D(i.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,null),this.width=g,this.height=I;e&&this.emit("updated")}clear(){const A=this.__gl,g=this.width*this.height;let I;switch(this.__format){case A.RED:case A.RED_INTEGER:case A.ALPHA:case A.LUMINANCE:case A.LUMINANCE_ALPHA:I=1;break;case A.RG:I=2;break;case A.RGB:I=3;break;case A.RGBA:I=4;break;default:throw new Error("Invalid Format")}let C;switch(this.__type){case A.UNSIGNED_BYTE:C=new Uint8Array(g*I);break;case A.HALF_FLOAT:C=new Uint16Array(g*I);break;case A.FLOAT:C=new Float32Array(g*I);break;default:throw new Error("Invalid Type")}A.name=="webgl2"?A.texImage2D(A.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,C,0):A.texImage2D(A.TEXTURE_2D,0,this.__internalFormat,this.width,this.height,0,this.__format,this.__type,C)}resize(A,g,I=!1,C=!0){const e=this.__gl;if(this.width!=A||this.height!=g){const s=e.getParameter(e.MAX_TEXTURE_SIZE);if(A<0||A>s||g<0||g>s)throw new Error("gl-texture2d: Invalid texture size. width:"+A+" height:"+g+" maxSize:"+s);if(I){const o=e.createTexture();e.bindTexture(e.TEXTURE_2D,o),e.texImage2D(e.TEXTURE_2D,0,this.__internalFormat,A,g,0,this.__format,this.__type,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this.__gltex,0),e.bindTexture(e.TEXTURE_2D,o),e.copyTexImage2D(e.TEXTURE_2D,0,this.__internalFormat,0,0,this.width,this.height,0),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteFramebuffer(a),this.__gl.deleteTexture(this.__gltex),this.__gltex=o,this.__updateGLTexParams()}else this.width>0&&this.height>0&&(this.__gl.deleteTexture(this.__gltex),this.__gltex=e.createTexture(),this.__updateGLTexParams()),e.bindTexture(e.TEXTURE_2D,this.__gltex),e.texImage2D(e.TEXTURE_2D,0,this.__internalFormat,A,g,0,this.__format,this.__type,null);if(this.width=A,this.height=g,C){const o=new Ug(A,g);this.emit("resized",o)}}}populate(A,g,I,C=0,e=0,i=!0){const s=this.__gl;i&&s.bindTexture(s.TEXTURE_2D,this.__gltex),s.texSubImage2D(s.TEXTURE_2D,0,C,e,g,I,this.__format,this.__type,A)}getSize(){return[this.width,this.height]}get glTex(){return this.__gltex}getTexHdl(){return this.__gltex}preBind(A,g){return{textureTypeUnif:g[A.name+"Type"],textureDescUnif:g[A.name+"Desc"]}}bindToUniform(A,g,I){if(!this.__loaded)return!1;if(!this.__gltex)throw new Error("Unable to bind non-initialized or deleted texture.");const C=A.boundTextures++,e=this.__gl;return e.activeTexture(e.TEXTURE0+C),e.bindTexture(e.TEXTURE_2D,this.__gltex),e.uniform1i(g.location,C),I&&(I.textureTypeUnif&&e.uniform1i(I.textureTypeUnif.location,this.textureType),I.textureDescUnif&&e.uniform4fv(I.textureDescUnif.location,this.textureDesc)),!0}destroy(){super.destroy(),this.__gl.deleteTexture(this.__gltex),this.__gltex=null}static getCachedGLTexture2D(A){return Zs[A.getId()]}static setCachedGLTexture2D(A,g){Zs[A.getId()]=g}}const Zs={},UB={bool:"Boolean",int:"SInt32",uint:"UInt32",float:"Float32",ivec2:"Vec2",ivec3:"Vec3",ivec4:"Vec4",vec2:"Vec2",vec3:"Vec3",vec4:"Vec4",color:"Color",mat3:"Mat3",mat4:"Mat4",sampler2D:"BaseImage",samplerCube:"BaseImage"},ug=8;let tC=UB;const kB=/\s+/;class xB{constructor(){this.__shaderModules={},this.materialTemplates={}}setShaderModule(A,g){if(!(A in this.__shaderModules)){this.__shaderModules[A]=g;return}}getShaderModule(A){return this.__shaderModules[A]}getShaderModuleNames(){const A=[];for(const g in this.__shaderModules)A.push(g);return A}parseAttr(A,g,I,C){if(!(A[1]in tC))throw new Error(`Error while parsing 
Type not recognized:`+A[1]);const e=A[2].slice(0,A[2].length-1);I.attributes[e]={type:tC[A[1]],instanced:g},A[1]=="color"&&(A[1]="vec4",A.join(" "))}handleImport(A,g,I,C,e){if(I in this.__shaderModules){const i=this.__shaderModules[I];if(!i)throw Error("snippet not loaded or does not exists!");const s=this.parseShaderHelper(g,i,C,e);C.push(I),A.glsl=A.glsl+s.glsl,A.numLines+=s.numLines,A.uniforms=Object.assign(Object.assign({},A.uniforms),s.uniforms),A.attributes=Object.assign(Object.assign({},A.attributes),s.attributes)}else console.log("shaderName: "+g),console.log("SNIPPET NOT FOUND: "+I)}parseShader(A,g){return this.parseShaderHelper(A,g,[],0)}parseShaderHelper(A,g,I,C){const e=(o,a)=>{o.glsl=o.glsl+a+`
`,o.numLines++};I.push(A);const i={glsl:"",numLines:0,uniforms:{},attributes:{}};g=g.toString();const s=g.split(`
`);for(let o=0;o<s.length;o++){let a=s[o];const n=a.trim(),B=n.split(kB);switch(B[0]){case"<%include":case"import":{const l=n.split(/'|"|`/)[1].split("/").pop();I.includes(l)||this.handleImport(i,A,l,I,C);break}case"attribute":{this.parseAttr(B,!1,i,a),e(i,a);break}case"instancedattribute":{this.parseAttr(B,!0,i,a),B[0]="attribute",a=B.join(" "),e(i,a);break}case"uniform":{let l=1;B.length==4&&(l=2);const r=B[l];if(!(r in tC))throw new Error("Error while parsing :"+A+` 
Type not recognized:`+B[1]);const c=B[l+1].slice(0,B[l+1].length-1);c.includes("[")?i.uniforms[c.substring(0,c.indexOf("["))]=tC[r]:i.uniforms[c]=tC[r],i.uniforms[c]=="struct"&&console.log(B),B[1]=="color"&&(B[1]="vec4",a=B.join(" ")),e(i,a);break}default:{e(i,a);break}}}return i}}const SA=new xB;let TB=0;class OA extends gI{constructor(A,g){super(g);A&&(this.__gl=A),this.__shaderStagesGLSL={},this.__shaderStages={},this.__shaderProgramHdls={},this.__gltextures={},this.__id=TB++}setGLContext(A){this.__gl=A}setShaderStage(A,g){this.__shaderStagesGLSL[A]=g,this.clearProgramsCache()}getShaderStage(A){return this.__shaderStagesGLSL[A]}clearProgramsCache(){const A=this.__gl;for(const g in this.__shaderProgramHdls){const I=this.__shaderProgramHdls[g];for(const C in I.shaderHdls)A.deleteShader(I.shaderHdls[C]);A.deleteProgram(I.shaderProgramHdl)}}static isOpaque(){return!0}static isOverlay(){return!1}__compileShaderStage(A,g,I,C){const e=this.__gl;if(C||(C=e.shaderopts),C){if(C.repl)for(const o in C.repl)A=Ig.replaceAll(A,o,C.repl[o]);C.directives&&(A=C.directives.join(`
`)+`
`+A)}let i;e.name=="webgl2"&&(A=Ig.replaceAll(A,"attribute","in"),I=="vertexShader"?A=Ig.replaceAll(A,"varying","out"):A=Ig.replaceAll(A,"varying","in"),A=Ig.replaceAll(A,"texture2D","texture"),i=`#version 300 es
`,A=i+A);const s=e.createShader(g);if(!s)throw Error("shaderHdl not defined");if(e.shaderSource(s,A),e.compileShader(s),!e.getShaderParameter(s,e.COMPILE_STATUS)){console.log("Errors in :"+this.constructor.name);const o=e.getShaderInfoLog(s).split(`
`),a={};for(let d=0;d<o.length;d++){if(o[d].startsWith("'")){o[d-1]=o[d-1]+o[d],delete o[d],d--;continue}const l=o[d].split(":");if(l.length>=2){const r=parseInt(l[2]);isNaN(r)||(a[r]?a[r].push(o[d]):a[r]=[o[d]])}}const n=[],B=A.split(`
`);for(const d in a){const l=Number.parseInt(d)-1;for(let c=Math.max(0,l-4);c<l;c++)n.push((l+1+" ").padStart(3)+B[c]);n.push((l+1+">").padStart(3)+B[l]);for(let c=l+1;c<Math.min(B.length-1,l+5);c++)n.push((l+1+" ").padStart(3)+B[c]);const r=a[d];for(const c of r)n.push(c)}throw new Error(`An error occurred compiling the shader 
=================
`+this.constructor.name+"."+I+`: 

`+n.join(`
`))}return s}__createProgram(A){const g=this.__gl;this.__shaderCompilationAttempted=!0;const I=g.createProgram();if(!I)throw Error("shaderProgramHdl not defined");const C={};this.__shaderStages.VERTEX_SHADER||(this.__shaderStages.VERTEX_SHADER=SA.parseShader("VERTEX_SHADER",this.__shaderStagesGLSL.VERTEX_SHADER));const e=this.__shaderStages.VERTEX_SHADER.glsl;if(e!=null){const o=this.__compileShaderStage(e,g.VERTEX_SHADER,"vertexShader",A);if(!o)return!1;g.attachShader(I,o),C[g.VERTEX_SHADER]=o}this.__shaderStages.FRAGMENT_SHADER||(this.__shaderStages.FRAGMENT_SHADER=SA.parseShader("FRAGMENT_SHADER",this.__shaderStagesGLSL.FRAGMENT_SHADER));const i=this.__shaderStages.FRAGMENT_SHADER.glsl;if(i!=null){const o=Object.assign({},g.shaderopts,A);o.frag&&(o.defines=o.frag.defines+o.defines);const a=this.__compileShaderStage(i,g.FRAGMENT_SHADER,"fragmentShader",o);if(!a)return!1;g.attachShader(I,a),C[g.FRAGMENT_SHADER]=a}if(g.linkProgram(I),!g.getProgramParameter(I,g.LINK_STATUS)){const o=g.getProgramInfoLog(I);if(!o)throw Error("info not defined");if(o.includes("D3D shader compilation failed")){const a=g.getExtension("WEBGL_debug_shaders");if(a){const n=a.getTranslatedShaderSource(C[g.VERTEX_SHADER]);console.log(n)}}throw console.log("vertexShaderGLSL:"+e),console.log("fragmentShaderGLSL:"+i),new Error("Unable to link the shader program:"+this.constructor.name+`
==================
`+o)}const s=this.__extractAttributeAndUniformLocations(I,A);return s.shaderHdls=C,s.shaderProgramHdl=I,s}__extractAttributeAndUniformLocations(A,g){const I=this.__gl,C=this.getAttributes(),e={attrs:{},unifs:{}};for(const s in C){const o=I.getAttribLocation(A,s);if(o==null){console.warn("Shader attribute not found:"+s);continue}const a=C[s];e.attrs[s]={name:s,location:o,type:a.type,instanced:a.instanced}}const i=this.getUniforms();for(let s in i){const o=i[s];if(g&&g.repl)for(const n in g.repl)s=s.replace(n,g.repl[n]);const a=I.getUniformLocation(A,s);a!=null&&(e.unifs[s]={name:s,location:a,type:o})}return e}getAttributes(){const A={};for(const g in this.__shaderStages){const I=this.__shaderStages[g];for(const C in I.attributes)A[C]=I.attributes[C]}return A}getUniforms(){const A={};for(const g in this.__shaderStages){const I=this.__shaderStages[g];for(const C in I.uniforms)A[C]=I.uniforms[C]}return A}isCompiledForTarget(A){const g=A||this.getId();return this.__shaderProgramHdls[g]!=null}compileForTarget(A,g){const I=A||this.getId();let C=this.__shaderProgramHdls[I];return C||(C=this.__createProgram(g||{}),C.shaderkey=I,this.__shaderProgramHdls[I]=C,C)}compile(){this.compileForTarget()}bind(A,g){const I=this.__gl;if(A.glShader!=this){const C=this.compileForTarget(g,A.shaderopts);if(!C)return console.warn(this.constructor.name+" is not compiled for "+g),!1;const e=C.shaderProgramHdl;I.useProgram(e),A.glShader=this,A.shaderkey=C.shaderkey,A.unifs=C.unifs,A.attrs=C.attrs,A.boundTextures=0,A.glGeom=void 0,A.bindRendererUnifs&&A.bindRendererUnifs(C.unifs)}return A.supportsInstancing=!0,!0}unbind(A){return A.glShader=null,A.shaderkey="",A.unifs={},A.attrs={},!0}getGeomDataShaderName(){return""}getSelectedShaderName(){return""}static supportsInstancing(){return!0}static getPackedMaterialData(A){return new Float32Array(4)}static getMaterialTemplate(){throw new Error("Shader does not provide a material template.")}destroy(){const A=this.__gl;for(const g in this.__shaderProgramHdls){const I=this.__shaderProgramHdls[g];A.deleteProgram(I.shaderProgramHdl)}this.__shaderProgramHdls={}}}class wt{constructor(A,g,I=!1){this.colorTextureResizeEventId=-1,this.__depthTexture=null,this.__fbo=null,this.__prevBoundFbo=null,vA.isIOSDevice&&A.name=="webgl"&&(g.getType()==A.FLOAT||g.getType()==A.HALF_FLOAT)&&console.error("IOS devices are unable to render to float textures."),this.__gl=A,this.__colorTexture=g,this.__createDepthTexture=I,this.__clearColor=new W(0,0,0,0),this.__colorTexture&&(this.colorTextureResizeEventId=this.__colorTexture.on("resized",()=>{console.warn("This code path will be deprecated. Instead, resize the GLFbo and it will resize the texture."),this.resize(this.__colorTexture.width,this.__colorTexture.height,!1)})),this.setup()}setClearColor(A){this.__clearColor=A}getWidth(){return this.__colorTexture.width}getHeight(){return this.__colorTexture.height}getSize(){return[this.__colorTexture.width,this.__colorTexture.height]}getColorTexture(){return this.__colorTexture}getDepthTextureGL(){return this.__depthTexture}get width(){return this.__colorTexture.width}get height(){return this.__colorTexture.height}get size(){return[this.__colorTexture.width,this.__colorTexture.height]}get colorTexture(){return this.__colorTexture}setColorTexture(A){const g=this.__gl;this.__colorTexture=A,g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,this.__colorTexture.glTex,0)}get depthTextureGL(){return this.__depthTexture}setup(){const A=this.__gl;this.__fbo=A.createFramebuffer(),A.name=="webgl2"?A.bindFramebuffer(A.DRAW_FRAMEBUFFER,this.__fbo):A.bindFramebuffer(A.FRAMEBUFFER,this.__fbo),this.__colorTexture&&(A.name=="webgl2"?A.framebufferTexture2D(A.DRAW_FRAMEBUFFER,A.COLOR_ATTACHMENT0,A.TEXTURE_2D,this.__colorTexture.glTex,0):A.framebufferTexture2D(A.FRAMEBUFFER,A.COLOR_ATTACHMENT0,A.TEXTURE_2D,this.__colorTexture.glTex,0)),this.__createDepthTexture&&this.createDepthTexture(),we(A,this.width,this.height),A.name=="webgl2"?A.bindFramebuffer(A.DRAW_FRAMEBUFFER,null):A.bindFramebuffer(A.FRAMEBUFFER,null)}createDepthTexture(){const A=this.__gl;if(A.name!="webgl2"&&!A.__ext_WEBGL_depth_texture){const g=A.createRenderbuffer();A.bindRenderbuffer(A.RENDERBUFFER,g),A.renderbufferStorage(A.RENDERBUFFER,A.DEPTH_COMPONENT16,this.width,this.height),A.framebufferRenderbuffer(A.FRAMEBUFFER,A.DEPTH_ATTACHMENT,A.RENDERBUFFER,g)}else A.activeTexture(A.TEXTURE0),this.__depthTexture=A.createTexture(),A.bindTexture(A.TEXTURE_2D,this.__depthTexture),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MAG_FILTER,A.LINEAR),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_MIN_FILTER,A.LINEAR),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_S,A.CLAMP_TO_EDGE),A.texParameteri(A.TEXTURE_2D,A.TEXTURE_WRAP_T,A.CLAMP_TO_EDGE),A.name=="webgl2"?(A.texImage2D(A.TEXTURE_2D,0,A.DEPTH_COMPONENT24,this.width,this.height,0,A.DEPTH_COMPONENT,A.UNSIGNED_INT,null),A.framebufferTexture2D(A.DRAW_FRAMEBUFFER,A.DEPTH_ATTACHMENT,A.TEXTURE_2D,this.__depthTexture,0)):(A.texImage2D(A.TEXTURE_2D,0,A.DEPTH_COMPONENT,this.width,this.height,0,A.DEPTH_COMPONENT,A.UNSIGNED_INT,null),A.framebufferTexture2D(A.FRAMEBUFFER,A.DEPTH_ATTACHMENT,A.TEXTURE_2D,this.__depthTexture,0))}resize(A,g,I=!0){const C=this.__gl;C.bindFramebuffer(C.FRAMEBUFFER,null),C.deleteFramebuffer(this.__fbo),I&&this.__colorTexture.resize(A,g,!1,!1),this.__fbo=C.createFramebuffer(),C.name=="webgl2"?C.bindFramebuffer(C.DRAW_FRAMEBUFFER,this.__fbo):C.bindFramebuffer(C.FRAMEBUFFER,this.__fbo),C.framebufferTexture2D(C.FRAMEBUFFER,C.COLOR_ATTACHMENT0,C.TEXTURE_2D,this.__colorTexture.glTex,0),this.__depthTexture&&(C.deleteTexture(this.__depthTexture),this.createDepthTexture()),we(C,this.width,this.height)}bindForWriting(A){A&&(this.__prevBoundFbo=A.boundRendertarget,A.boundRendertarget=this.__fbo);const g=this.__gl;g.name=="webgl2"?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.__fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__fbo),g.viewport(0,0,this.width,this.height)}unbindForWriting(A){A&&(A.boundRendertarget=this.__prevBoundFbo);const g=this.__gl;g.name=="webgl2"?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.__prevBoundFbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__prevBoundFbo)}bind(A){this.bindForWriting(A)}unbind(A){if(A)this.unbindForWriting(A);else{const g=this.__gl;g.bindFramebuffer(g.FRAMEBUFFER,null)}}bindForReading(A){const g=this.__gl;g.name=="webgl2"?g.bindFramebuffer(g.READ_FRAMEBUFFER,this.__fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.__fbo)}unbindForReading(){const A=this.__gl;A.name=="webgl2"?A.bindFramebuffer(A.READ_FRAMEBUFFER,null):A.bindFramebuffer(A.FRAMEBUFFER,null)}clear(){const A=this.__gl;A.colorMask(!0,!0,!0,!0);const g=this.__clearColor.asArray();A.clearColor(g[0],g[1],g[2],g[3]),this.__createDepthTexture?A.clear(A.COLOR_BUFFER_BIT|A.DEPTH_BUFFER_BIT):A.clear(A.COLOR_BUFFER_BIT)}bindAndClear(A){this.bind(A),this.clear()}destroy(){const A=this.__gl;A.bindFramebuffer(A.FRAMEBUFFER,null),A.deleteFramebuffer(this.__fbo),this.__fbo=null,this.__colorTexture.removeListenerById("resized",this.colorTextureResizeEventId)}}function we(t,A,g){let I;if(t.name=="webgl2"?I=t.checkFramebufferStatus(t.DRAW_FRAMEBUFFER):I=t.checkFramebufferStatus(t.FRAMEBUFFER),I!==t.FRAMEBUFFER_COMPLETE)switch(t.bindTexture(t.TEXTURE_2D,null),t.name=="webgl2"?t.bindFramebuffer(t.DRAW_FRAMEBUFFER,null):t.bindFramebuffer(t.FRAMEBUFFER,null),console.warn("Error creating Fbo width:",A,", height:",g),I){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}class fC extends FA{constructor(A,g){super();this.params={},this.flipY=!1,this.width=0,this.height=0,this.__gl=A,this.textureTargets=[],this.depthTexture=null,this.textureDesc=[0,0,0,0],this.clearColor=new W(0,0,0,0),this.colorMask=[!0,!0,!0,!0],g&&this.configure(g)}configure(A){const g=this.__gl,I=Uo(g,A);this.textureTargets.forEach(e=>{g.deleteTexture(e)}),this.textureTargets=[],this.depthTexture&&(g.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&g.deleteFramebuffer(this.frameBuffer),this.params=I,this.type=I.type,this.format=I.format,this.internalFormat=I.internalFormat,this.minFilter=I.minFilter?I.minFilter:I.filter,this.minFilter=I.magFilter?I.magFilter:I.filter,this.wrap=I.wrap,this.flipY=I.flipY,this.width=I.width,this.height=I.height,this.textureType=1,this.textureDesc[0]=this.width,this.textureDesc[1]=this.height;const C=A.numColorChannels!=null?A.numColorChannels:I.format!=null?1:0;for(let e=0;e<C;e++){g.activeTexture(g.TEXTURE0+1);const i=g.createTexture();g.bindTexture(g.TEXTURE_2D,i),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,I.wrapS),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,I.wrapT),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,I.minFilter),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,I.magFilter),g.texImage2D(g.TEXTURE_2D,0,this.internalFormat,I.width,I.height,0,this.format,this.type,null),this.textureTargets.push(i)}if(I.depthFormat){if(g.name=="webgl"&&!g.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");g.activeTexture(g.TEXTURE0),this.depthTexture=g.createTexture(),g.bindTexture(g.TEXTURE_2D,this.depthTexture),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,I.wrapS),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,I.wrapT),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,I.minFilter),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,I.magFilter),g.texImage2D(g.TEXTURE_2D,0,I.depthInternalFormat,I.width,I.height,0,I.depthFormat,I.depthType,null)}if(this.frameBuffer=g.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&g.name=="webgl"&&g.drawBuffers;const e=[];for(let i=0;i<this.textureTargets.length;i++)g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0+i,g.TEXTURE_2D,this.textureTargets[i],0),e.push(g.COLOR_ATTACHMENT0+i);this.textureTargets.length>1&&g.drawBuffers(e)}this.depthTexture&&g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}checkFramebuffer(){this.bindForWriting();const A=this.__gl,g=A.checkFramebufferStatus(A.DRAW_FRAMEBUFFER);if(g!=A.FRAMEBUFFER_COMPLETE)switch(g){case A.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case A.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case A.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case A.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}this.unbindForWriting()}bindForWriting(A,g=!1){A&&(this.__prevBoundFbo=A.boundRendertarget,A.boundRendertarget=this.frameBuffer);const I=this.__gl;I.name=="webgl2"?I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.frameBuffer):I.bindFramebuffer(I.FRAMEBUFFER,this.frameBuffer),I.viewport(0,0,this.width,this.height),g&&this.clear()}unbindForWriting(A){A&&(A.boundRendertarget=this.__prevBoundFbo);const g=this.__gl;g.bindFramebuffer(g.name=="webgl2"?g.DRAW_FRAMEBUFFER:g.FRAMEBUFFER,this.__prevBoundFbo),this.__prevBoundFbo=null}clear(A=!0){const g=this.__gl,I=this.colorMask;g.colorMask(I[0],I[1],I[2],I[3]);const C=this.clearColor.asArray();g.clearColor(C[0],C[1],C[2],C[3]);let e=0;this.textureTargets.length>0&&(e|=g.COLOR_BUFFER_BIT),this.depthTexture&&(e|=g.DEPTH_BUFFER_BIT),g.clear(e)}bindForReading(){const A=this.__gl;A.name=="webgl2"?A.bindFramebuffer(A.READ_FRAMEBUFFER,this.frameBuffer):A.bindFramebuffer(A.FRAMEBUFFER,this.frameBuffer)}unbindForReading(){const A=this.__gl;A.name=="webgl2"?A.bindFramebuffer(A.READ_FRAMEBUFFER,null):A.bindFramebuffer(A.FRAMEBUFFER,null)}bindColorTexture(A,g,I=0){const C=this.__gl,e=A.boundTextures++;return C.uniform1i(g.location,e),C.activeTexture(C.TEXTURE0+e),C.bindTexture(C.TEXTURE_2D,this.textureTargets[I]),!0}bindDepthTexture(A,g){const I=this.__gl,C=A.boundTextures++;return I.uniform1i(g.location,C),I.activeTexture(I.TEXTURE0+C),I.bindTexture(I.TEXTURE_2D,this.depthTexture),!0}unbind(A){this.unbindForWriting(A)}resize(A,g,I=!1){const C=this.__gl;if(this.width!=A||this.height!=g){const i=C.getParameter(C.MAX_TEXTURE_SIZE);if(A<0||A>i||g<0||g>i)throw new Error(`GLRenderTarget: Invalid texture size. width: ${A} height: ${g} maxSize: ${i}`);I&&this.bindForReading();const s=this.params;for(let o=0;o<this.textureTargets.length;o++){const a=C.createTexture();C.bindTexture(C.TEXTURE_2D,a),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_S,s.wrapS),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_T,s.wrapT),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MIN_FILTER,s.minFilter),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MAG_FILTER,s.magFilter),C.texImage2D(C.TEXTURE_2D,0,this.internalFormat,A,g,0,this.format,this.type,null),I&&C.copyTexImage2D(C.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(A,this.width),Math.min(g,this.height),0),C.deleteTexture(this.textureTargets[o]),this.textureTargets[o]=a}if(s.depthFormat){if(C.name=="webgl"&&!C.__ext_WEBGL_depth_texture)throw new Error("Depth textures not support on this device");C.activeTexture(C.TEXTURE0);const o=C.createTexture();C.bindTexture(C.TEXTURE_2D,o),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_S,s.wrapS),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_T,s.wrapT),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MIN_FILTER,s.minFilter),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MAG_FILTER,s.magFilter),C.texImage2D(C.TEXTURE_2D,0,s.depthInternalFormat,A,g,0,s.depthFormat,s.depthType,null),I&&C.copyTexImage2D(C.TEXTURE_2D,0,this.internalFormat,0,0,Math.min(A,this.width),Math.min(g,this.height),0),C.deleteTexture(this.depthTexture),this.depthTexture=o}if(I&&this.unbindForReading(),this.width=A,this.height=g,this.frameBuffer&&C.deleteFramebuffer(this.frameBuffer),this.frameBuffer=C.createFramebuffer(),this.bindForWriting(),this.textureTargets.length>0){this.textureTargets.length>1&&C.name=="webgl"&&C.drawBuffers;const o=[];for(let a=0;a<this.textureTargets.length;a++)C.framebufferTexture2D(C.DRAW_FRAMEBUFFER,C.COLOR_ATTACHMENT0+a,C.TEXTURE_2D,this.textureTargets[a],0),o.push(C.COLOR_ATTACHMENT0+a);this.textureTargets.length>1&&C.drawBuffers(o)}this.depthTexture&&C.framebufferTexture2D(C.DRAW_FRAMEBUFFER,C.DEPTH_ATTACHMENT,C.TEXTURE_2D,this.depthTexture,0),this.checkFramebuffer()}}bindToUniform(A,g,I){const C=A.boundTextures++,e=this.__gl.TEXTURE0+C,i=this.__gl;return i.activeTexture(e),i.bindTexture(i.TEXTURE_2D,this.textureTargets[0]),i.uniform1i(g.location,C),I&&(I.textureTypeUnif&&i.uniform1i(I.textureTypeUnif.location,this.textureType),I.textureDescUnif&&this.__gl.uniform4fv(I.textureDescUnif.location,this.textureDesc)),!0}destroy(){const A=this.__gl;this.textureTargets.forEach(g=>{A.deleteTexture(g)}),this.textureTargets=[],this.depthTexture&&(A.deleteTexture(this.depthTexture),this.depthTexture=null),this.frameBuffer&&A.deleteFramebuffer(this.frameBuffer)}}var zB=`#define GLSLIFY 1
  
#ifdef ENABLE_ES3
vec3 computeViewNormal(vec3 viewPos) {
  vec3 fdx = dFdx(viewPos);
  vec3 fdy = dFdy(viewPos);
  return normalize(cross(fdx, fdy));
}
#else 
vec3 computeViewNormal(vec3 viewPos) {
  return vec3(0.0, 0.0, 0.0);
}
#endif
`,_B=`#define GLSLIFY 1
import 'GLSLUtils.glsl'
vec3 calcFatLinesViewPos(int vertexID, mat4 modelViewMatrix, inout vec3 viewNormal, inout vec2 texCoord, inout vec3 pos) {

  int seqentialIndex_0 = int(mod(segmentIndices.x, 2.));
  int seqentialIndex_1 = int(mod(segmentIndices.y, 2.));
  int index_0 = int(segmentIndices.x) / 2;
  int index_1 = int(segmentIndices.y) / 2;

  vec3 viewPos;
  vec4 data_0 = fetchTexel(positionsTexture, positionsTextureSize, index_0);
  vec4 data_1 = fetchTexel(positionsTexture, positionsTextureSize, index_1);

  // During XR sessions, there is a scaling applied to the view matrix
  // which causes a distortion to the line width. We extract that scale here
  // and use to correct the distortion.
  // See also: FatPointsShader
  vec3 viewZ = modelViewMatrix[2].xyz;
  float viewScale = length(viewZ);

  vec4 pos_0 = modelViewMatrix * vec4(data_0.xyz, 1.0);
  vec4 pos_1 = modelViewMatrix * vec4(data_1.xyz, 1.0);
  // Note: multiply the per-vertex line thickness with the line thickness uniform value;
  float lineThickness_0 = LineThickness * data_0.w * viewScale;
  float lineThickness_1 = LineThickness * data_1.w * viewScale;

  if (vertexID < 2) {
    pos = data_0.xyz;
    viewPos = pos_0.xyz;
  }
  else {
    pos = data_1.xyz;
    viewPos = pos_1.xyz;
  }
  if (pos_1 != pos_0) {
    vec3 segmentDir = normalize(pos_1.xyz - pos_0.xyz);
    vec3 viewVector = normalize(viewPos);

    if (vertexID < 2) {
      vec3 segmentStartDir = segmentDir;
      if (seqentialIndex_0 != 0) {
        //if index_0 == 0, get the last index in the line as previous
        int index_prev = (index_0 > 0) ? (index_0-1) : (positionsTextureSize-1);
        vec4 data_prev = fetchTexel(positionsTexture, positionsTextureSize, index_prev);
        vec4 pos_prev = modelViewMatrix * vec4(data_prev.xyz, 1.0);
        segmentStartDir = normalize(segmentDir + normalize(pos_0.xyz - pos_prev.xyz));
        // segmentStartDir = segmentDir;
      }
      // vec3 startBiTangent = normalize(cross(segmentStartDir, viewVector));
      // viewNormal = normalize(cross(segmentStartDir, startBiTangent));
      vec3 startBiTangent = normalize(vec3(-segmentStartDir.y, segmentStartDir.x, 0.0));
      viewNormal = normalize(-viewVector);
      // Move the endpoints to overlap a bit more.
      //viewPos -= vec3(segmentStartDir * lineThickness_0 * 0.25);
      if (mod(vertexIDs, 2.0) == 0.0) {
        viewPos += vec3(startBiTangent * lineThickness_0);
        texCoord.x = 1.0;
      }
      else {
        viewPos -= vec3(startBiTangent * lineThickness_0);
        texCoord.x = 0.0;
      }
      texCoord.y = 0.0;
    }
    else {
      vec3 segmentEndDir = segmentDir;
      if (seqentialIndex_1 != 0) {
        //if index_1 == numPoints-1, get the first index in the line as next
        int index_next = (index_1 < (positionsTextureSize-1)) ? (index_1+1) : 0;
        vec4 data_next = fetchTexel(positionsTexture, positionsTextureSize, index_next);
        vec4 pos_next = modelViewMatrix * vec4(data_next.xyz, 1.0);
        segmentEndDir = normalize(segmentDir + normalize(pos_next.xyz - pos_1.xyz));
        // segmentEndDir = segmentDir;
      }
      // vec3 endBiTangent = normalize(cross(segmentEndDir, viewVector));
      // viewNormal = normalize(cross(segmentEndDir, endBiTangent));
      vec3 endBiTangent = normalize(vec3(-segmentEndDir.y, segmentEndDir.x, 0.0));
      viewNormal = normalize(-viewVector);
      // Move the endpoints to overlap a bit more.
      //viewPos += vec3(segmentEndDir * lineThickness_1 * 0.25);
      if (mod(vertexIDs, 2.0) == 0.0) {
        viewPos += vec3(endBiTangent * lineThickness_1);
        texCoord.x = 1.0;
      }
      else {
        viewPos -= vec3(endBiTangent * lineThickness_1);
        texCoord.x = 0.0;
      }
      texCoord.y = 1.0;
    }

    // Move the line towards the viewer by the line thickness.
    // this is to avoid depth issues when lines are rendered over meshes. 
    viewPos.z += (lineThickness_0 + lineThickness_1) * 0.5;
  }

  return viewPos;
}

`,PB=`#define GLSLIFY 1
#define PI 3.141592653589793
#define TwoPI (2.0 * PI)
#define HalfPI (0.5 * PI)

`,OB=`#define GLSLIFY 1

#ifdef ENVMAP_CUBE

uniform samplerCube envMap;

vec4 sampleEnvMap(vec3 dir) {
  return texture(envMap, dir);
}

#else 

uniform sampler2D   envMap;

import 'envmap-octahedral.glsl'

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = dirToSphOctUv(dir);
  vec4 texel = texture2D(envMap, vec2(uv.x, 1.0 - uv.y));
  return vec4(texel.rgb/texel.a, 1.0); // TODO: Check this line. Do we need it?
}

#endif 

vec3 cubeFaceUvToDir(float u, float v, int faceId) {

  // normalize into [-1, 1] range
  float n_u = 2.0 * u - 1.0;
  float n_v = 2.0 * v - 1.0;

  vec3 dir;
  switch (faceId)
  {
  case 0: //TEXTURE_CUBE_MAP_POSITIVE_X:
    dir.x = 1.0f;
    dir.y = n_v;
    dir.z = -n_u;
    break;
  case 1: //TEXTURE_CUBE_MAP_NEGATIVE_X:
    dir.x = -1.0f;
    dir.y = n_v;
    dir.z = n_u;
    break;
  case 3: //TEXTURE_CUBE_MAP_POSITIVE_Y:
    dir.x = n_u;
    dir.y = 1.0f;
    dir.z = -n_v;
    break;
  case 2: //TEXTURE_CUBE_MAP_NEGATIVE_Y:
    dir.x = n_u;
    dir.y = -1.0f;
    dir.z = n_v;
    break;
  case 4: //TEXTURE_CUBE_MAP_POSITIVE_Z:
    dir.x = n_u;
    dir.y = n_v;
    dir.z = 1.0f;
    break;
  case 5: //TEXTURE_CUBE_MAP_NEGATIVE_Z:
    dir.x = -n_u;
    dir.y = n_v;
    dir.z = -1.0f;
    break;
  }
  return normalize(dir);
}

`,jB=`#define GLSLIFY 1
const int GEOMITEM_FLAG_CUTAWAY = 1; // 1<<0;
const int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;
const int GEOMITEM_TRANSPARENT = 4; // 1<<1;

uniform color cutColor;

#ifdef ENABLE_FLOAT_TEXTURES
  vec4 getCutaway(int id) {
    return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 5);
  }

#else

  uniform vec4 cutawayData;

  vec4 getCutaway(int id) {
    return cutawayData;
  }

#endif

#define RAY_EPS 0.0000001
struct Ray {
  vec3 start;
  vec3 dir;
};

float intersectRayPlane(Ray ray, Ray plane) {
  vec3 w = ray.start - plane.start;
  float D = dot(plane.dir, ray.dir);
  float N = dot(-plane.dir, w);

  if (abs(D) < RAY_EPS) {
    // segment is parallel to plane
    if (N == 0.0)
      return -1.0; // segment lies in plane
    else
      return -1.0; // no intersection
  }
  // they are not parallel
  // compute intersect param
  float sI = N / D;
  if (sI < -RAY_EPS) {
    return -1.0; // no intersection
  }
  return sI;
}

bool cutaway(vec3 worldPos, vec3 planeNormal, float planeDist) {

  vec3 planePos = planeNormal * planeDist;
  vec3 planeDir = worldPos + planePos;
  float planeOffset = dot(planeDir, planeNormal);
  if (planeOffset > 0.0) {
    return true;
  }
  return false;
}
`,qB=`#define GLSLIFY 1
import 'GLSLUtils.glsl'

vec3 getDebugColor(float id) {
  int sel = int(round(mod(round(id), 16.0)));
  
  if (sel==0)
    return vec3(0.0, 1.0, 1.0);
  else if (sel==1)
    return vec3(0.0, 1.0, 0.0);
  else if (sel==2)
    return vec3(1.0, 0.0, 1.0);
  else if (sel==3)
    return vec3(0.75, 0.75, 0.0);
  else if (sel==4)
    return vec3(0.0, 0.75, 0.75);
  else if (sel==5)
    return vec3(0.75, 0.0, 0.75);
  else if (sel==6)
    return vec3(0.45, 0.95, 0.0);
  else if (sel==7)
    return vec3(0.0, 0.45, 0.95);
  else if (sel==8)
    return vec3(0.95, 0.0, 0.45);
  else if (sel==9)
    return vec3(0.95, 0.45, 0.0);
  else if (sel==10)
    return vec3(0.0, 0.95, 0.45);
  else if (sel==11)
    return vec3(0.45, 0.0, 0.95);
  else if (sel==12)
    return vec3(0.45, 0.45, 0.95);
  else if (sel==13)
    return vec3(0.0, 0.0, 0.45);
  else if (sel==14)
    return vec3(0.0, 0.45, 0.45);
  else if (sel==15)
    return vec3(0.45, 0.0, 0.45);
  else return vec3(0.2, 0.2, 0.2);
}

`,ko=`#define GLSLIFY 1

#ifdef ENABLE_MULTI_DRAW

// On some mobile GPUs the sampler2D defaults to lowp, which implies a maximum
// resolution of 255. This caused rendering artifacts on larger scenes on mobile
// devices.
uniform highp sampler2D drawIdsTexture;

#ifdef EMULATE_MULTI_DRAW
uniform int drawId;
#endif // EMULATE_MULTI_DRAW

int getGeomItemId() {
#ifndef EMULATE_MULTI_DRAW
  int drawId = gl_DrawID;
#endif // EMULATE_MULTI_DRAW

  ivec2 texSize = textureSize(drawIdsTexture, 0);
  ivec2 texelCoords = ivec2(drawId % texSize.x, drawId / texSize.x);
  return int(texelFetch(drawIdsTexture, texelCoords, 0).r + 0.5);
}

vec4 getDrawItemIds() {
#ifndef EMULATE_MULTI_DRAW
  int drawId = gl_DrawID;
#endif // EMULATE_MULTI_DRAW

  ivec2 texSize = textureSize(drawIdsTexture, 0);
  ivec2 texelCoords = ivec2(drawId % texSize.x, drawId / texSize.x);
  vec4 color = texelFetch(drawIdsTexture, texelCoords, 0);
  // Note: A 0 value in the texture means no sub-geom index is being rendered.
  // subtract off 1 to get the true sub-geom index.
  return vec4(color.r, color.g - 1.0, color.b, color.a);
}

#else // ENABLE_MULTI_DRAW

uniform int geomItemId;

#ifdef ENABLE_FLOAT_TEXTURES

attribute float instancedIds;    // instanced attribute..
uniform int instancedDraw;

int getGeomItemId() {
  if (instancedDraw == 0) {
    return geomItemId;
  }
  else {
    return int(instancedIds);
  }
}

vec4 getDrawItemIds() {
  if (instancedDraw == 0) {
    return vec4(float(geomItemId), 0.0, -1.0, -1.0);
  }
  else {
    return vec4(float(instancedIds), 0.0, -1.0, -1.0);
  }
}

#else

int getGeomItemId() {
  return geomItemId;
}

vec4 getDrawItemIds() {
    return vec4(float(geomItemId), 0.0, -1.0, -1.0);
}

#endif // ENABLE_FLOAT_TEXTURES
#endif // ENABLE_MULTI_DRAW

// For backwards compatibility with older plugins (UX.HandleShader)
int getDrawItemId() {
  return getGeomItemId();
}
`,$B=`#define GLSLIFY 1

const int TRIANGLES = 0;
const int LINES = 1;
const int POINTS = 2;`,Al=`#define GLSLIFY 1
import 'GLSLUtils.glsl'

#ifdef ENABLE_FLOAT_TEXTURES

uniform sampler2D instancesTexture;
uniform highp int instancesTextureSize;

// See also: src\\Renderer\\GLSLConstants.js
// const pixelsPerGLGeomItem = 8
const int pixelsPerItem = 8;

vec4 getInstanceData(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 0);
}

#else

uniform vec4 drawItemData;

vec4 getInstanceData(int id) {
  return drawItemData;
}

#endif

`,gl=`#define GLSLIFY 1

vec2 dualfisheyeUVsFromDir(vec3 dir) {
  vec2 result;
  float angle = 0.465;
  if (dir.x < 0.0) {
    result = vec2(((dir.z * -angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);
  }
  else {
    result = vec2( 0.5 + ((dir.z * angle) + 0.5) * 0.5, (dir.y * angle) + 0.5);
  }
  return result;
}

`,Il=`#define GLSLIFY 1 
import 'constants.glsl'

vec2 latLongUVsFromDir(vec3 dir) {
  // Math function taken from...
  // http://gl.ict.usc.edu/Data/HighResProbes/
  // Note: Scaling from u=[0,2], v=[0,1] to u=[0,1], v=[0,1]
  float phi = acos(dir.z);
  float theta = atan(dir.x, dir.y);
  return vec2((1.0 + theta / PI) / 2.0, phi / PI);
}

// Note: when u == 0.5 z = 1.0
vec3 dirFromLatLongUVs(float u, float v) {
  // http://gl.ict.usc.edu/Data/HighResProbes/
  float theta = PI*((u * 2.0) - 1.0);
  float phi = PI*v;
  return vec3(sin(phi)*sin(theta), sin(phi)*cos(theta), cos(phi));
}

vec3 dirFromPolar(vec2 polar) {
  float u = polar.x / (PI * 2.0);
  float v = polar.y / PI;
  return dirFromLatLongUVs(u, v);
}

`,Cl=`#define GLSLIFY 1
import 'constants.glsl'
import 'GLSLUtils.glsl'
#define sectorize(value) step(0.0, (value))*2.0-1.0
#define sum(value) dot(clamp((value), 1.0, 1.0), (value))

vec2 dirToSphOctUv(vec3 normal) {
  normal = normalize(normal);
  vec3 aNorm = abs(normal);
  vec3 sNorm = sectorize(normal);
  
  vec2 dir = aNorm.xy;
  float orient = atan(dir.x, max(dir.y,0.0000000000000001))/HalfPI;

  dir = vec2(aNorm.z, length(aNorm.xy));
  float pitch = atan(dir.y, dir.x)/HalfPI;

  vec2 uv = vec2(sNorm.x*orient, sNorm.y*(1.0-orient))*pitch;

  if (normal.z < 0.0) {
    uv = sNorm.xy - abs(uv.ts)*sNorm.xy;
  }
  vec2 res = uv*0.5+0.5;
  // Flip-v
  // return res;
  return vec2(res.x, 1.0 - res.y);
}

vec3 sphOctUvToDir(vec2 uv) {
  uv = uv*2.0-1.0;
  // Flip-v
  uv.y = -uv.y;
  vec2 suv = sectorize(uv);
  float sabsuv = sum(abs(uv));
  float pitch = sabsuv*HalfPI;

  if (pitch <= 0.0) {
    return vec3(0.0, 0.0, 1.0);
  }
  if (abs(pitch - PI) < 0.000001) {
    return vec3(0.0, 0.0, -1.0);
  }
  if (sabsuv > 1.0) {
    uv = (1.0-abs(uv.ts))*suv;
  }

  float orient = (abs(uv.s)/sabsuv)*HalfPI;
  float sOrient = sin(orient);
  float cOrient = cos(orient);
  float sPitch = sin(pitch);
  float cPitch = cos(pitch);

  return vec3(
    sOrient*suv.s*sPitch,
    cOrient*suv.t*sPitch,
    cPitch
  );
}

`,el=`#define GLSLIFY 1
    
/////////////////////////////////////////////////////////////////
// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js
float shift_right(float v, float amt) {
  v = floor(v) + 0.5;
  return floor(v / exp2(amt));
}
float shift_left(float v, float amt) {
  return floor(v * exp2(amt) + 0.5);
}

float mask_last(float v, float bits) {
  return mod(v, shift_left(1.0, bits));
}
float extract_bits(float num, float from, float to) {
  from = floor(from + 0.5);
  to = floor(to + 0.5);
  return mask_last(shift_right(num, from), to - from);
}

/////////////////////////////////////////////////////////////////
// https://stackoverflow.com/questions/18453302/how-do-you-pack-one-32bit-int-into-4-8bit-ints-in-glsl-webgl

const vec4 bitEnc = vec4(1.,255.,65025.,16581375.);
const vec4 bitDec = 1./bitEnc;
vec4 EncodeFloatRGBA (float v) {
  vec4 enc = bitEnc * v;
  enc = fract(enc);
  enc -= enc.yzww * vec2(1./255., 0.).xxxy;
  return enc;
}
float DecodeFloatRGBA (vec4 v) {
  return dot(v, bitDec);
}

/////////////////////////////////////////////////////////////////
// https://gist.github.com/Flexi23/1713774
// 
vec2 encode16BitFloatInto2xUInt8(float v) {
  vec2 c = vec2(0.);

  int signum = (v >= 0.) ? 128 : 0;
  v = abs(v);
  int exponent = 15;
  float limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)
  for(int exp = 15; exp > 0; exp--) {
    if ( v < limit) {
      limit /= 2.;
      exponent--;
    }
  }

  float rest;
  if (exponent == 0) {
    rest = v / limit / 2.;      // "subnormalize" implicite preceding 0. 
  } 
  else {
    rest = (v - limit)/limit;   // normalize accordingly to implicite preceding 1.
  }

  int mantissa = int(rest * 2048.);   // 2048 = 2^11 for the (split) 11 bit mantissa
  int msb = mantissa / 256;           // the most significant 3 bits go into the lower part of the first byte
  int lsb = mantissa - msb * 256;     // there go the other 8 bit of the lower significance

  c.x = float(signum + exponent * 8 + msb) / 255.;    // color normalization for texture2D
  c.y = float(lsb) / 255.;

  if (v >= 2048.) {
    c.y = 1.;
  }

  return c;
}

float decode16BitFloatFrom2xUInt8(vec2 c) {
  float v = 0.;

  int ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)
  int iy = int(c.y*255.); // 2nd byte: 8 bit mantissa (LSB)

  int s = (c.x >= 0.5) ? 1 : -1;
  ix = (s > 0) ? ix - 128 : ix;   // remove the signum bit from exponent
  int iexp = ix / 8;              // cut off the last 3 bits of the mantissa to select the 4 exponent bits
  int msb = ix - iexp * 8;        // subtract the exponent bits to select the 3 most significant bits of the mantissa

  int norm = (iexp == 0) ? 0 : 2048;          // distinguish between normalized and subnormalized numbers
  int mantissa = norm + msb * 256 + iy;       // implicite preceding 1 or 0 added here
  norm = (iexp == 0) ? 1 : 0;                 // normalization toggle
  float exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa 
  v = float( s * mantissa ) * exponent;

  return v;
}

// TODO : Encoding Float32 to 4x UInt8
// http://concord-consortium.github.io/lab/experiments/webgl-gpgpu/script.js
// http://ultraist.hatenablog.com/entry/20110608/1307539319

`,il=`#define GLSLIFY 1

int ftoi(float val) {
  return int(floor(val + 0.5));
}
ivec2 ftoi(vec2 v2) {
  return ivec2(ftoi(v2.x), ftoi(v2.y));
}
ivec3 ftoi(vec3 v4) {
  return ivec3(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z));
}
ivec4 ftoi(vec4 v4) {
  return ivec4(ftoi(v4.x), ftoi(v4.y), ftoi(v4.z), ftoi(v4.w));
}

#ifdef ENABLE_ES3

int imod(int x, int y) {
  return x % y;
}

void setFlag(inout int flags, int flag) {
  flags |= flag;
}

void clearFlag(inout int flags, int flag) {
  flags &= ~flag;
}

bool testFlag(int flags, int flag) {
  return (flags & flag) != 0;
}

// private function: Mangle me...
ivec2 _pixelIndexToUV(int index, int textureWidth) {
  return ivec2(index % textureWidth, index / textureWidth);
}

vec4 fetchTexel(sampler2D texture, int textureWidth, int index) {
  return texelFetch(texture, _pixelIndexToUV(index, textureWidth), 0);
}

vec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {
  return texelFetch(texture, texCoord, 0);
}

vec4 fetchTexel(sampler2D texture, ivec2 textureSize, int index) {
    return texelFetch(texture, _pixelIndexToUV(index, textureSize.x), 0);
}

#else

// TODO: integrate: https://gist.github.com/mattatz/70b96f8c57d4ba1ad2cd

int max(int a, int b) {
  return a > b ? a : b;
}
int min(int a, int b) {
  return a < b ? a : b;
}

float round(float val) {
  return floor(val + 0.4);
}

int imod(int x, int y) {
  return x-y*(x/y);
}

void setFlag(inout int flags, int flag) {
  flags += flag;
}
void clearFlag(inout int flags, int flag) {
  flags -= flag;
}

bool testFlag(int flags, int flag) {
  return imod(flags / flag, 2) != 0;
}

// private function: Mangle me...
vec2 _pixelIndexToUV(int index, int textureSize) {
  float flTexSize = float(textureSize);
  float x = (float(imod(index, textureSize))+0.5)/flTexSize;
  float y = (floor(float(index / textureSize))+0.5)/flTexSize;
  return vec2(x, y);
}

vec4 fetchTexel(sampler2D texture, int textureSize, int index) {
  vec2 texCoord = _pixelIndexToUV(index, textureSize);
  return texture2D(texture, texCoord);
}

vec4 fetchTexel(sampler2D texture, ivec2 textureSize, ivec2 texCoord) {
  vec2 ftextureSize = vec2(textureSize);
  return texture2D(texture, (vec2(texCoord) + 0.5) / ftextureSize);
}

#endif // ENABLE_ES3

int uvToPixelIndex(vec2 uv, int textureSize) {
  return int(uv.x * float(textureSize)) + (int(floor(uv.y * float(textureSize))) * textureSize);
}

`,tl=`#define GLSLIFY 1
float RadicalInverse_VdC(uint bits) 
{
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
vec2 Hammersley(uint i, uint N)
{
  return vec2(float(i)/float(N), RadicalInverse_VdC(i));
} 
`,sl=`#define GLSLIFY 1
import 'constants.glsl'

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
  float a = roughness*roughness;

  float phi = 2.0 * PI * Xi.x;
  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
  float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

  // from spherical coordinates to cartesian coordinates
  vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

  // from tangent-space vector to world-space sample vector
  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
  vec3 tangent   = normalize(cross(up, N));
  vec3 bitangent = cross(N, tangent);

  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
  return normalize(sampleVec);
} 
`,ol=`#define GLSLIFY 1
import 'GLSLUtils.glsl'
import 'gamma.glsl'

#ifdef ENABLE_MULTI_DRAW
 
uniform sampler2D materialsTexture;
uniform highp ivec2 materialsTextureSize;

vec4 getMaterialValue(vec2 materialCoords, int valueIndex) {
  int index = ftoi(materialCoords.x) + valueIndex;
  ivec2 texelCoords = ivec2(imod(index, materialsTextureSize.x), index / materialsTextureSize.x);
  
  return fetchTexel(materialsTexture, materialsTextureSize, texelCoords);
}

#else // ENABLE_MULTI_DRAW

////////////////////////
// Material Param Helpers.

vec4 getColorParamValue(vec4 value, sampler2D tex, int texType, vec2 texCoord) {
  if (texType == 0) {
    return value;
  }
  else if (texType == 1 || texType == 2) {
    // Note: we assume textures are always in gamma space, and must be converted
    // to linear. I cann't find evidence that 8-bit textures can be in linear space.
    // TODO: Use SRGB textures.
    return toLinear(texture2D(tex, texCoord));
  }
  else if (texType == 3) {
    // Float HDR Texture. We assume these textures are in linear space.
    return texture2D(tex, texCoord);
  }
  else
    return value;
}

float luminanceFromRGB(vec3 rgb) {
  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;
}

float getLuminanceParamValue(float value, sampler2D tex, int texType, vec2 texCoord) {
  if (texType == 0)
    return value;
  else
    return luminanceFromRGB(texture2D(tex, texCoord).rgb);
}

#endif // ENABLE_MULTI_DRAW
`,al=`#define GLSLIFY 1
#ifdef ENABLE_FLOAT_TEXTURES
import 'GLSLUtils.glsl'
import 'transpose.glsl'
mat4 getMatrix(sampler2D texture, int textureSize, int index) {
  // Unpack 3 x 4 matrix columns into a 4 x 4 matrix.
  vec4 col0 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 1);
  vec4 col1 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 2);
  vec4 col2 = fetchTexel(texture, textureSize, (index * pixelsPerItem) + 3);
  mat4 result = transpose(mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0)));
  return result;
}

mat4 getModelMatrix(int id) {
  return getMatrix(instancesTexture, instancesTextureSize, id);
}

#else

uniform mat4 modelMatrix;

mat4 getModelMatrix(int id) {
  return modelMatrix;
}

#endif

`,nl=`#define GLSLIFY 1
import 'GLSLUtils.glsl'
const int ENVMAP_FLAG_HEADLIGHT =  1; // 1<<0;

struct MaterialParams {
  vec3 baseColor;
  float ambientOcclusion;
  float metallic;
  float roughness;
  float reflectance;
  float opacity;
  float emission;
};

#ifndef ENABLE_PBR

vec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {
  vec3 irradiance = vec3(dot(normal, viewVector));
  float ao = material.ambientOcclusion; 
  return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);

  // return vec4(material.baseColor * ao * irradiance , material.opacity);
}

#else

uniform int envMapFlags;
uniform samplerCube irradianceMap;
uniform samplerCube prefilterMap;
uniform sampler2D brdfLUT;

vec3 sampleIrradiance(vec3 dir) {
  return texture(irradianceMap, dir).rgb;
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {
  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

float luminance(vec3 color) {
  return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

vec4 pbrSurfaceRadiance(in MaterialParams material, vec3 normal, in vec3 viewVector) {
  if (envMapFlags == -1) {
    vec3 irradiance = vec3(dot(normal, viewVector));
    float ao = material.ambientOcclusion; 
    return vec4(material.baseColor * ao * irradiance + (material.emission * material.baseColor), material.opacity);
  }

  vec3 N = normal;
  vec3 V = viewVector;
  vec3 R = reflect(-V, N);
  float roughness = material.roughness * material.roughness;
  vec3 diffuseColor = (1.0 - material.metallic) * material.baseColor;

  // Note: The specular reflectance of metallic surfaces is chromatic
  // https://google.github.io/filament/Filament.html#listing_fnormal
  vec3 F0 = 0.16 * material.reflectance * material.reflectance * (1.0 - material.metallic) + material.baseColor * material.metallic;

  float NdotV = dot(N, V);

  vec3 F = fresnelSchlickRoughness(max(NdotV, 0.0), F0, roughness);

  vec3 kS = F;
  vec3 kD = 1.0 - kS;
  kD *= 1.0 - material.metallic;
  float ao = material.ambientOcclusion; 
  
  vec3 irradiance;
  vec3 irradianceSampleDir = normal;
  
  bool headLightMode = testFlag(envMapFlags, ENVMAP_FLAG_HEADLIGHT);
  if (headLightMode) {
    irradianceSampleDir = viewVector;
  }
  irradiance = sampleIrradiance(irradianceSampleDir);
  // vec3 irradiance = shGetIrradianceAt(shCoefficients, N);
  vec3 diffuse    = irradiance * diffuseColor;
  
  const float MAX_REFLECTION_LOD = 4.0;
  vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;   
  vec2 envBRDF  = texture(brdfLUT, vec2(max(NdotV, 0.0), roughness)).rg;
  vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
  
  vec3 radiance = (kD * diffuse + specular) * ao;
  
  // Now handle semi-transparent objects. We need to be able to linearly interpolate
  // opacity to make objects disappear, so we need a continuous change.
  float opacity = material.opacity;
  vec4 transparent = vec4((radiance * opacity) + specular, opacity + luminance(specular) + luminance(F));
  vec4 result = mix(transparent, vec4(radiance, 1.0), opacity);

  // Add emission on as the final component.
  // Note: emission allows a material to blend off its specular component, 
  // which can also be used to make an object completely disappear if also transparent.
  return mix(result, vec4(material.baseColor, opacity), material.emission);
}

#endif // ENABLE_PBR
`,Bl=`#define GLSLIFY 1
uniform vec3 shCoeffs[9];

vec3 sampleSHCoeffs(vec3 dir) {
  // dir is assumed to have unit length
  float x = dir.x, y = dir.y, z = dir.z;
  // band 0
  vec3 result = shCoeffs[ 0 ] * 0.886227;
  // band 1
  result += shCoeffs[ 1 ] * 2.0 * 0.511664 * y;
  result += shCoeffs[ 2 ] * 2.0 * 0.511664 * z;
  result += shCoeffs[ 3 ] * 2.0 * 0.511664 * x;
  // band 2
  result += shCoeffs[ 4 ] * 2.0 * 0.429043 * x * y;
  result += shCoeffs[ 5 ] * 2.0 * 0.429043 * y * z;
  result += shCoeffs[ 6 ] * ( 0.743125 * z * z - 0.247708 );
  result += shCoeffs[ 7 ] * 2.0 * 0.429043 * x * z;
  result += shCoeffs[ 8 ] * 0.429043 * ( x * x - y * y );
  return result;
}
`,ll=`#define GLSLIFY 1
const float gamma_const = 2.2;

float toLinear(float v) {
  return pow(v, gamma_const);
}

vec2 toLinear(vec2 v) {
  return pow(v, vec2(gamma_const));
}

vec3 toLinear(vec3 v) {
  return pow(v, vec3(gamma_const));
}

vec4 toLinear(vec4 v) {
  return vec4(toLinear(v.rgb), v.a);
}

float toGamma(float v) {
  return pow(v, 1.0 / gamma_const);
}

vec2 toGamma(vec2 v) {
  return pow(v, vec2(1.0 / gamma_const));
}

vec3 toGamma(vec3 v) {
  return pow(v, vec3(1.0 / gamma_const));
}

vec4 toGamma(vec4 v) {
  return vec4(toGamma(v.rgb), v.a);
}

float toGamma(float v, float gamma) {
  return pow(v, 1.0 / gamma);
}

vec2 toGamma(vec2 v, float gamma) {
  return pow(v, vec2(1.0 / gamma));
}

vec3 toGamma(vec3 v, float gamma) {
  return pow(v, vec3(1.0 / gamma));
}

vec4 toGamma(vec4 v, float gamma) {
  return vec4(toGamma(v.rgb, gamma), v.a);
}

`,dl=`#define GLSLIFY 1

#ifndef ENABLE_ES3

float inverse(float m) {
  return 1.0 / m;
}

mat2 inverse(mat2 m) {
  return mat2(m[1][1],-m[0][1],
             -m[1][0], m[0][0]) / (m[0][0]*m[1][1] - m[0][1]*m[1][0]);
}

mat3 inverse(mat3 m) {
  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];
  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];
  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];

  float b01 = a22 * a11 - a12 * a21;
  float b11 = -a22 * a10 + a12 * a20;
  float b21 = a21 * a10 - a11 * a20;

  float det = a00 * b01 + a01 * b11 + a02 * b21;

  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),
              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),
              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;
}

mat4 inverse(mat4 m) {
  float
      a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],
      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],
      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],
      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3],

      b00 = a00 * a11 - a01 * a10,
      b01 = a00 * a12 - a02 * a10,
      b02 = a00 * a13 - a03 * a10,
      b03 = a01 * a12 - a02 * a11,
      b04 = a01 * a13 - a03 * a11,
      b05 = a02 * a13 - a03 * a12,
      b06 = a20 * a31 - a21 * a30,
      b07 = a20 * a32 - a22 * a30,
      b08 = a20 * a33 - a23 * a30,
      b09 = a21 * a32 - a22 * a31,
      b10 = a21 * a33 - a23 * a31,
      b11 = a22 * a33 - a23 * a32,

      det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  return mat4(
      a11 * b11 - a12 * b10 + a13 * b09,
      a02 * b10 - a01 * b11 - a03 * b09,
      a31 * b05 - a32 * b04 + a33 * b03,
      a22 * b04 - a21 * b05 - a23 * b03,
      a12 * b08 - a10 * b11 - a13 * b07,
      a00 * b11 - a02 * b08 + a03 * b07,
      a32 * b02 - a30 * b05 - a33 * b01,
      a20 * b05 - a22 * b02 + a23 * b01,
      a10 * b10 - a11 * b08 + a13 * b06,
      a01 * b08 - a00 * b10 - a03 * b06,
      a30 * b04 - a31 * b02 + a33 * b00,
      a21 * b02 - a20 * b04 - a23 * b00,
      a11 * b07 - a10 * b09 - a12 * b06,
      a00 * b09 - a01 * b07 + a02 * b06,
      a31 * b01 - a30 * b03 - a32 * b00,
      a20 * b03 - a21 * b01 + a22 * b00) / det;
}

#endif

`,rl=`#define GLSLIFY 1

#ifndef ENABLE_ES3

float transpose(float m) {
  return m;
}

mat2 transpose(mat2 m) {
  return mat2(m[0][0], m[1][0],
              m[0][1], m[1][1]);
}

mat3 transpose(mat3 m) {
  return mat3(m[0][0], m[1][0], m[2][0],
              m[0][1], m[1][1], m[2][1],
              m[0][2], m[1][2], m[2][2]);
}

mat4 transpose(mat4 m) {
  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],
              m[0][1], m[1][1], m[2][1], m[3][1],
              m[0][2], m[1][2], m[2][2], m[3][2],
              m[0][3], m[1][3], m[2][3], m[3][3]);
}

#endif

`,cl=`#define GLSLIFY 1
attribute float vertexIDs;

vec2 getQuadVertexPositionFromID() {
  int vertexID = int(vertexIDs);
  if (vertexID == 0)
    return vec2(-0.5, -0.5);
  else if (vertexID == 1)
    return vec2(0.5, -0.5);
  else if (vertexID == 2)
    return vec2(-0.5, 0.5);
  else if (vertexID == 3)
    return vec2(0.5, 0.5);
  return vec2(0,0);
}
`,hl=`#define GLSLIFY 1

vec3 decodeHDR(const in vec3 ldrPixel, const in float cdmAlpha) {
  float avg = (cdmAlpha * 16.0 - 8.0);
  float scl = 1.0;
  vec3 color;
  color.x = (tan((ldrPixel.x-0.5)*1.5)/scl)+avg;
  color.y = (tan((ldrPixel.y-0.5)*1.5)/scl)+avg;
  color.z = (tan((ldrPixel.z-0.5)*1.5)/scl)+avg;

  // convert from logarithmic curve to linear curve.
  // subtract the epsilon that was added during encoding.
  const float eps = 0.001;
  color.x = pow(10.0, color.x) - eps;
  color.y = pow(10.0, color.y) - eps;
  color.z = pow(10.0, color.z) - eps;
  return color;
}

vec3 decodeHDR(sampler2D ldrSampler, sampler2D cdmSampler, vec2 texCoord) {
#ifdef ENABLE_ES3
  float cdm = texture2D(cdmSampler, texCoord).r;
#else
  float cdm = texture2D(cdmSampler, texCoord).a;
#endif
  return decodeHDR(texture2D(ldrSampler, texCoord).rgb, cdm);
}

`,ml=`#define GLSLIFY 1
  uniform int floatGeomBuffer;
  uniform int passId;
  uniform int occlusionCulling;

  import 'GLSLBits.glsl'
  
  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float geomItemId, float elemItemId, int isOrthographic){
    vec4 fragColor;

    float viewDist;
    if (isOrthographic > 0) {
      viewDist = abs(v_viewPos.z);
    } else {
      viewDist = length(v_viewPos);
    }
    if (floatGeomBuffer != 0) {
      fragColor.r = float(passId); 
      fragColor.g = float(geomItemId);
      fragColor.b = elemItemId;
      fragColor.a = viewDist;
    }
    else {
      ///////////////////////////////////
      // UInt8 buffer
      fragColor.r = mod(geomItemId, 256.) / 255.;
      fragColor.g = (floor(geomItemId / 256.) + float(passId) * 32.) / 255.;

      // encode the dist as a 16 bit float
      vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);
      fragColor.b = float16bits.x;
      fragColor.a = float16bits.y;
    }

#ifdef ENABLE_ES3
    if (occlusionCulling != 0) {
      // Calculate a simple stochastic transparency to reduce the cost of the reduction shader.
      // We only need one pixel to be visible to consider the geometry visible, so here we 
      // keep only one in 7x7 (49) pixels. This signficatly reduces the cost of reducing the scene
      // to the reduction data buffer.
      // Note: this is not a stochastic transparency, as we are simply setting black pixels to 
      // reduce the number of reduction points for this geometry. The black pixels (not discarded)
      // still occlude other geometries, but during reduction count to nothing.
      int x = int(gl_FragCoord.x * 1000.0);
      int y = int(gl_FragCoord.y * 1000.0);
      if (x % 7 != 0 || y % 7 != 0) {
        fragColor = vec4(0.0, 0.0, 0.0, 1.0);
      };
    }
#endif // ENABLE_ES3

    return fragColor;
  }

  // Note: the older code imported drawItemId.glsl and newer code is importing geomItemId.glsl
  // This code keeps compatibility with the older shaders.
  vec4 setFragColor_geomData(vec3 v_viewPos, int floatGeomBuffer, int passId, float geomItemId, int isOrthographic){
    return setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, geomItemId, -1.0, isOrthographic);
  }`,Gl=`#define GLSLIFY 1
import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else

uniform vec4 highlightColor;

vec4 getHighlightColor(int id) {
    return highlightColor;
}

#endif

vec4 setFragColor_highlight(float v_geomItemId){
  vec4 fragColor; 
  int geomItemId = int(v_geomItemId + 0.5);
  fragColor = getHighlightColor(geomItemId);
  return fragColor;
}
`,El=`#define GLSLIFY 1
// Note: On mobile, I can't seem to pass around a stuct containing sampler2D.
// I have to unpack the struct and pass its members. :(
// struct ImageAtlas {
//     sampler2D layout;
//     sampler2D image;
//     vec4 desc;
// };

import 'GLSLUtils.glsl'

vec4 getSubImageLayout(int index, in sampler2D atlasLayout, in vec4 atlasDesc){
    return fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
}
vec2 calcSubImageTexCoords(vec2 texCoord, int index, in sampler2D atlasLayout, in vec4 atlasDesc){
    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
    // The following line is a hack to fix artifacts in our PBR lighting
    // We were seeing loads of lighting garbage on some sufaces that were orthogonal
    // to the world. The UV coordinates would have been landing right on the edges
    // of our subimages and were often sampling outside the image. This couuld
    // have been because of filtering, or an error in the uv coords. 
    texCoord = clamp(texCoord, vec2(0.01, 0.01), vec2(0.99, 0.99));
    vec2 subimageTexel = texCoord * layoutData.zw;
    // subimageTexel = clamp(subimageTexel, vec2(0.0, 0.0), vec2(1.0, 1.0));
    return subimageTexel + layoutData.xy;
}
vec4 sampleSubImage(vec2 texCoord, int index, in sampler2D atlasLayout, in sampler2D atlasImage, in vec4 atlasDesc){
    vec4 layoutData = fetchTexel(atlasLayout, int(floor(atlasDesc.z+0.5)), index);
    vec2 atlasCoords = calcSubImageTexCoords(texCoord, index, atlasLayout, atlasDesc);
    return texture2D(atlasImage, atlasCoords);
}`;SA.setShaderModule("imageAtlas.glsl",El);SA.setShaderModule("surfaceGeomData.glsl",ml);SA.setShaderModule("surfaceHighlight.glsl",Gl);SA.setShaderModule("computeViewNormal.glsl",zB);SA.setShaderModule("calcFatLinesViewPos.glsl",_B);SA.setShaderModule("constants.glsl",PB);SA.setShaderModule("convolve-helpers.glsl",OB);SA.setShaderModule("cutaways.glsl",jB);SA.setShaderModule("debugColors.glsl",qB);SA.setShaderModule("drawItemId.glsl",ko);SA.setShaderModule("geomItemId.glsl",ko);SA.setShaderModule("geomType.glsl",$B);SA.setShaderModule("drawItemTexture.glsl",Al);SA.setShaderModule("envmap-dualfisheye.glsl",gl);SA.setShaderModule("envmap-equirect.glsl",Il);SA.setShaderModule("envmap-octahedral.glsl",Cl);SA.setShaderModule("GLSLBits.glsl",el);SA.setShaderModule("GLSLUtils.glsl",il);SA.setShaderModule("Hammersley.glsl",tl);SA.setShaderModule("ImportanceSampleGGX.glsl",sl);SA.setShaderModule("materialparams.glsl",ol);SA.setShaderModule("modelMatrix.glsl",al);SA.setShaderModule("PBRSurfaceRadiance.glsl",nl);SA.setShaderModule("SHCoeffs.glsl",Bl);SA.setShaderModule("gamma.glsl",ll);SA.setShaderModule("inverse.glsl",dl);SA.setShaderModule("transpose.glsl",rl);SA.setShaderModule("quadVertexFromID.glsl",cl);SA.setShaderModule("unpackHDR.glsl",hl);var Ql=` 
precision highp float;
#define GLSLIFY 1

varying vec2 v_texCoord;
uniform sampler2D ldrSampler;
uniform sampler2D cdmSampler;
uniform vec4 srcRegion; // pos, and size of the source region

import 'unpackHDR.glsl'

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec2 srcUv = srcRegion.xy + (v_texCoord * srcRegion.zw);

  fragColor = vec4(decodeHDR(ldrSampler, cdmSampler, srcUv), 1.0);

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`,ul=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`;class bl extends OA{constructor(A){super(A,"UnpackHDRShader");this.setShaderStage("VERTEX_SHADER",ul),this.setShaderStage("FRAGMENT_SHADER",Ql)}}const Vt=(t,A)=>{let g,I,C;switch(A){case"UInt8":g=1,I=4,C=t.UNSIGNED_BYTE;break;case"SInt8":g=1,I=4,C=t.BYTE;break;case"UInt16":g=1,I=4,C=t.UNSIGNED_SHORT;break;case"SInt16":g=1,I=4,C=t.SHORT;break;case"UInt32":g=1,I=4,C=t.UNSIGNED_INT;break;case"SInt32":g=1,I=4,C=t.INT;break;case"Float32":g=1,I=4,C=t.FLOAT;break;case"Vec2":g=2,I=4,C=t.FLOAT;break;case"Vec3":g=3,I=4,C=t.FLOAT;break;case"Vec4":case"Color":g=4,I=4,C=t.FLOAT;break;case"RGBA":g=4,I=1,C=t.UNSIGNED_BYTE;break;default:throw"Unhandled Type"}return{dimension:g,elementSize:I,dataType:C}};class xo{}class yl extends xo{constructor(A,g,I,C){super();this.gl=A,this.shaderAttrs=g,this.glattrbuffers=I,this.indexBuffer=C}bind(A){const g=this.gl;for(const I in this.shaderAttrs){if(I=="instancedIds")continue;const C=this.shaderAttrs[I],e=C.location;if(e==-1)continue;const i=this.glattrbuffers[I];if(!i){g.disableVertexAttribArray(e);continue}const s=Vt(this.gl,i.dataType),o=s.dimension*s.elementSize,a=i.offset!=null?i.offset*s.dimension*s.elementSize:0,n=i.normalized==!0,B=C.instanced;g.enableVertexAttribArray(e),g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.vertexAttribPointer(e,s.dimension,s.dataType,n,o,a),g.vertexAttribDivisor&&(B==!0?g.vertexAttribDivisor(e,1):g.vertexAttribDivisor(e,0))}return g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const A=this.gl;for(const g in this.shaderAttrs){const I=this.shaderAttrs[g],C=I.location;C==-1&&A.enableVertexAttribArray(C),I.instanced&&A.vertexAttribDivisor(C,0)}A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,null)}destroy(){}}class Zl extends xo{constructor(A,g,I,C){super();this.gl=A,this.vao=A.createVertexArray(),A.bindVertexArray(this.vao);for(const e in g){if(e=="instancedIds")continue;const i=g[e],s=i.location;if(s==-1)continue;let o=I[e];if(!o&&(e.endsWith("Next")&&(o=I[e.substring(0,e.length-4)],i.offset=1),!o)){A.disableVertexAttribArray(s);continue}const a=Vt(A,o.dataType),n=a.dimension*a.elementSize,B=i.offset!=null?i.offset*a.dimension*a.elementSize:0,d=o.normalized==!0,l=i.instanced;A.enableVertexAttribArray(s),A.bindBuffer(A.ARRAY_BUFFER,o.buffer),A.vertexAttribPointer(s,a.dimension,a.dataType,d,n,B),A.vertexAttribDivisor&&(l==!0?A.vertexAttribDivisor(s,1):A.vertexAttribDivisor(s,0))}this.indexBuffer=C,this.indexBuffer&&A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,this.indexBuffer)}bind(A){const g=this.gl;return g.bindVertexArray(this.vao),this.indexBuffer&&g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.indexBuffer),!0}unbind(){const A=this.gl;A.bindVertexArray(null),this.indexBuffer&&A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,null)}destroy(){const A=this.gl;this.indexBuffer&&(A.bindVertexArray(this.vao),A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,null)),A.deleteVertexArray(this.vao)}}function dg(t,A,g,I){return t.createVertexArray==null?new yl(t,A,g,I):new Zl(t,A,g,I)}class PI{constructor(A){this.stack=[],this.gl=A,this.pushGLStack()}pushGLStack(){this.top={enabled:new Set,disabled:new Set,functions:{}},this.stack.push(this.top)}popGLStack(){const A=this.top;this.top=this.stack.pop(),this.stack.length>0&&(A.enabled.forEach(g=>{let I;for(I=this.stack.length-1;I>=0;I--){const C=this.stack[I];if(C.enabled.has(g))break;if(C.disabled.has(g)){this.gl.disable(g);break}}I<0&&this.gl.disable(g)}),A.disabled.forEach(g=>{let I;for(I=this.stack.length-1;I>=0;I--){const C=this.stack[I];if(C.disabled.has(g))break;if(C.enabled.has(g)){this.gl.enable(g);break}}I<0&&this.gl.enable(g)}))}glEnable(A){this.gl.enable(A),this.top.enabled.add(A)}glDisable(A){this.gl.disable(A),this.top.disabled.add(A)}setGLParam(A,g){this.top[A]=g,Array.isArray(g)?this.gl[A](...g):this.gl[A](g)}}class Rl extends PI{}class Gg extends PI{toHighlightRenderState(){const A=new Rl(this.gl);return A.boundRendertarget=this.boundRendertarget,A.viewXfo=this.viewXfo,A.viewScale=this.viewScale,A.region=this.region,A.cameraMatrix=this.cameraMatrix,A.viewport=this.viewport,A.viewports=this.viewports,A.vrPresenting=this.vrPresenting,A}}class wC extends PI{}class OC extends KA{constructor(A,g){super(A);this.listenerIDs={},this.fbo=null,this.srcLDRTex=null,this.srcCDMTex=null,this.unpackHDRShader=null,this.shaderBinding=null,this.hdrImage=g;const I=()=>{this.__unpackHDRImage(this.hdrImage.getParams())};this.listenerIDs.updated=this.hdrImage.on("updated",I),this.hdrImage.isLoaded()?I():this.listenerIDs.loaded=this.hdrImage.on("loaded",I)}getImage(){return this.hdrImage}__unpackHDRImage(A){const g=this.__gl,I=A.data.ldr,C=A.data.cdm;if(this.fbo)this.srcLDRTex.bufferData(I),this.srcCDMTex.bufferData(C);else{this.configure({format:"RGBA",type:"FLOAT",width:I.width,height:I.height,filter:"LINEAR",wrap:"CLAMP_TO_EDGE"}),this.fbo=new wt(this.__gl,this),this.fbo.setClearColor(new W(0,0,0,0)),this.srcLDRTex=new KA(this.__gl,{format:"RGB",type:"UNSIGNED_BYTE",width:I.width,height:I.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:I}),this.srcCDMTex=new KA(this.__gl,{format:g.name=="webgl2"?"RED":"ALPHA",type:"UNSIGNED_BYTE",width:I.width,height:I.height,filter:"NEAREST",mipMapped:!1,wrap:"CLAMP_TO_EDGE",data:C}),this.unpackHDRShader=new bl(this.__gl);const s=this.unpackHDRShader.compileForTarget("GLHDRImage",{directives:["#define ENABLE_ES3"]});this.shaderBinding=dg(this.__gl,s.attrs,g.__quadattrbuffers,g.__quadIndexBuffer)}this.fbo.bindAndClear();const e=new PI(g);this.unpackHDRShader.bind(e,"GLHDRImage"),this.shaderBinding.bind(e);const i=e.unifs;this.srcLDRTex.bindToUniform(e,i.ldrSampler),this.srcCDMTex.bindToUniform(e,i.cdmSampler),g.uniform4fv(i.srcRegion.location,[0,0,1,1]),g.drawQuad(),this.fbo.unbind(),this.emit("updated")}bindToUniform(A,g,I){return super.bindToUniform(A,g,I)}destroy(){super.destroy(),this.fbo&&(this.fbo.destroy(),this.srcLDRTex.destroy(),this.srcCDMTex.destroy()),this.unpackHDRShader&&this.unpackHDRShader.destroy(),this.shaderBinding&&this.shaderBinding.destroy(),"loaded"in this.listenerIDs&&this.hdrImage.removeListenerById("loaded",this.listenerIDs.loaded),this.hdrImage.removeListenerById("updated",this.listenerIDs.updated)}}var fl=`
precision highp float;
#define GLSLIFY 1

varying vec2 v_texCoord;

import 'GLSLUtils.glsl'
import 'Hammersley.glsl'
import 'ImportanceSampleGGX.glsl'

float GeometrySchlickGGX(float NdotV, float roughness)
{
  float a = roughness;
  float k = (a * a) / 2.0;

  float nom   = NdotV;
  float denom = NdotV * (1.0 - k) + k;

  return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
  float NdotV = max(dot(N, V), 0.0);
  float NdotL = max(dot(N, L), 0.0);
  float ggx2 = GeometrySchlickGGX(NdotV, roughness);
  float ggx1 = GeometrySchlickGGX(NdotL, roughness);

  return ggx1 * ggx2;
}

vec2 IntegrateBRDF(float NdotV, float roughness)
{
  vec3 V;
  V.x = sqrt(1.0 - NdotV*NdotV);
  V.y = 0.0;
  V.z = NdotV;

  float A = 0.0;
  float B = 0.0;

  vec3 N = vec3(0.0, 0.0, 1.0);

  for(uint i = 0u; i < SAMPLE_COUNT; ++i)
  {
    vec2 Xi = Hammersley(i, SAMPLE_COUNT);
    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
    vec3 L  = normalize(2.0 * dot(V, H) * H - V);

    float NdotL = max(L.z, 0.0);
    float NdotH = max(H.z, 0.0);
    float VdotH = max(dot(V, H), 0.0);

    if (NdotL > 0.0)
    {
      float G = GeometrySmith(N, V, L, roughness);
      float G_Vis = (G * VdotH) / (NdotH * NdotV);
      float Fc = pow(1.0 - VdotH, 5.0);

      A += (1.0 - Fc) * G_Vis;
      B += Fc * G_Vis;
    }
  }
  A /= float(SAMPLE_COUNT);
  B /= float(SAMPLE_COUNT);
  return vec2(A, B);
}

out vec2 fragColor;
void main(void) {
  vec2 integratedBRDF = IntegrateBRDF(v_texCoord.x, v_texCoord.y);
  fragColor = integratedBRDF;
}

`,wl=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`;class Vl extends OA{constructor(A){super(A,"PreComputeBRDFShader");this.setShaderStage("VERTEX_SHADER",wl),this.setShaderStage("FRAGMENT_SHADER",fl)}}var Sl=`
precision highp float;
#define GLSLIFY 1
import 'constants.glsl'
import 'convolve-helpers.glsl'

uniform float roughness;
uniform int faceId;
varying vec2 v_texCoord;

out vec4 fragColor;
void main(void) {

  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   

  vec3 irradiance = vec3(0.0);

  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
  vec3 tangent   = normalize(cross(up, N));
  vec3 bitangent = cross(N, tangent);

  float nrSamples = 0.0; 
  for(float phi = 0.0; phi < 2.0 * PI; phi += SAMPLE_DELTA)
  {
    for(float theta = 0.0; theta < 0.5 * PI; theta += SAMPLE_DELTA)
    {
      // spherical to cartesian (in tangent space)
      // from spherical coordinates to cartesian coordinates
      vec3 H = vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
      // tangent space to world
      vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;

      irradiance += sampleEnvMap(normalize(sampleVec)).rgb * cos(theta) * sin(theta);
      nrSamples++;
    }
  }
  irradiance = PI * irradiance * (1.0 / float(nrSamples));

  fragColor = vec4(irradiance, 1.0);
}
`,pl=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`;class Fl extends OA{constructor(A){super(A,"ConvolveIrradianceShader");this.setShaderStage("VERTEX_SHADER",pl),this.setShaderStage("FRAGMENT_SHADER",Sl)}}var Xl=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(position*2.0, 0.0, 1.0);
}
`,Hl=`precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'ImportanceSampleGGX.glsl'
import 'convolve-helpers.glsl'
import 'Hammersley.glsl'
  
  
uniform float roughness;
uniform int faceId;
varying vec2 v_texCoord;

out vec4 fragColor;
void main(void) {

  vec3 N = cubeFaceUvToDir(v_texCoord.x, v_texCoord.y, faceId);   

  vec3 R = N;
  vec3 V = R;

  float totalWeight = 0.0;   
  vec3 prefilteredColor = vec3(0.0);     
  for(uint i = 0u; i < SAMPLE_COUNT; ++i)
  {
    vec2 Xi = Hammersley(i, SAMPLE_COUNT);
    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
    vec3 L  = normalize(2.0 * dot(V, H) * H - V);

    float NdotL = max(dot(N, L), 0.0);
    if (NdotL > 0.0)
    {
      prefilteredColor += sampleEnvMap(L).rgb * NdotL;
      totalWeight      += NdotL;
    }
  }
  prefilteredColor = prefilteredColor / totalWeight;

  fragColor = vec4(prefilteredColor, 1.0);
}
`;class Wl extends OA{constructor(A){super(A,"ConvolveSpecularShader");this.setShaderStage("VERTEX_SHADER",Xl),this.setShaderStage("FRAGMENT_SHADER",Hl)}}class Yl extends FA{constructor(A,g){super();this.__gl=A;const I=A;this.maxFragmentShaderTextureUnits=A.getParameter(this.__gl.MAX_TEXTURE_IMAGE_UNITS),I.__quadVertexIdsBuffer||I.setupInstancedQuad(),this.textureType=1,this.textureDesc=[0,0,0,0],this.__convolved=!1,this.__fbos=[]}convolveProbe(A){const g=this.__gl,I=new PI(g);I.shaderopts={directives:["#define ENABLE_ES3","#define ENABLE_FLOAT_TEXTURES"]},vA.deviceCategory=="Low"?(I.shaderopts.directives.push("#define SAMPLE_DELTA 0.1"),I.shaderopts.directives.push("#define SAMPLE_COUNT 64u")):vA.deviceCategory=="Medium"?(I.shaderopts.directives.push("#define SAMPLE_DELTA 0.08"),I.shaderopts.directives.push("#define SAMPLE_COUNT 256u")):(I.shaderopts.directives.push("#define SAMPLE_DELTA 0.025"),I.shaderopts.directives.push("#define SAMPLE_COUNT 1024u")),this.brdfLUTTexture=g.createTexture(),g.bindTexture(g.TEXTURE_2D,this.brdfLUTTexture),g.texImage2D(g.TEXTURE_2D,0,g.RG16F,512,512,0,g.RG,g.FLOAT,null),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,g.LINEAR);const C=new Vl(this.__gl),e=C.compileForTarget("GLProbe",I.shaderopts),i=dg(this.__gl,e.attrs,g.__quadattrbuffers,g.__quadIndexBuffer),s=g.createFramebuffer();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,s),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,this.brdfLUTTexture,0),C.bind(I),i.bind(I),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT),g.viewport(0,0,512,512),g.drawQuad(),g.bindFramebuffer(g.DRAW_FRAMEBUFFER,null),g.deleteFramebuffer(s),C.unbind(I),C.destroy();{const o=new Fl(this.__gl),a=o.compileForTarget("GLProbe",I.shaderopts),n=dg(this.__gl,a.attrs,g.__quadattrbuffers,g.__quadIndexBuffer);o.bind(I,"GLProbe"),n.bind(I);const B=I.unifs;A.bindToUniform(I,B.envMap);const d=64;this.irradianceCubeTex=g.createTexture(),g.bindTexture(g.TEXTURE_CUBE_MAP,this.irradianceCubeTex),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR_MIPMAP_LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_R,g.CLAMP_TO_EDGE);for(let r=0;r<6;r++)g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+r,0,g.RGBA32F,d,d,0,g.RGBA,g.FLOAT,null);const l=g.createFramebuffer();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,l);for(let r=0;r<6;++r)g.uniform1i(B.faceId.location,r),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_CUBE_MAP_POSITIVE_X+r,this.irradianceCubeTex,0),g.viewport(0,0,d,d),g.clearColor(1,0,0,1),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT),g.drawQuad();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,null),g.deleteFramebuffer(l),g.generateMipmap(g.TEXTURE_CUBE_MAP)}{const o=new Wl(this.__gl),a=o.compileForTarget("GLProbe",I.shaderopts),n=dg(this.__gl,a.attrs,g.__quadattrbuffers,g.__quadIndexBuffer);o.bind(I,"GLProbe"),n.bind(I);const B=I.unifs;A.bindToUniform(I,B.envMap),this.specularCubetex=g.createTexture(),g.bindTexture(g.TEXTURE_CUBE_MAP,this.specularCubetex),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MAG_FILTER,g.LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_MIN_FILTER,g.LINEAR_MIPMAP_LINEAR),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE),g.texParameteri(g.TEXTURE_CUBE_MAP,g.TEXTURE_WRAP_R,g.CLAMP_TO_EDGE);const d=256;for(let r=0;r<6;r++)g.texImage2D(g.TEXTURE_CUBE_MAP_POSITIVE_X+r,0,g.RGBA32F,d,d,0,g.RGBA,g.FLOAT,null);g.generateMipmap(g.TEXTURE_CUBE_MAP);const l=5;for(let r=0;r<l;++r){const c=d*Math.pow(.5,r),h=d*Math.pow(.5,r),E=g.createFramebuffer();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,E),g.viewport(0,0,c,h);const b=r/(l-1);g.uniform1f(B.roughness.location,b);for(let m=0;m<6;++m)g.uniform1i(B.faceId.location,m),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_CUBE_MAP_POSITIVE_X+m,this.specularCubetex,r),g.drawQuad();g.bindFramebuffer(g.DRAW_FRAMEBUFFER,null),g.deleteFramebuffer(E)}o.destroy()}this.__convolved=!0}bind(A){const g=this.__gl,{irradianceMap:I,prefilterMap:C,brdfLUT:e,envMapFlags:i}=A.unifs;if(!this.__convolved)return I&&g.uniform1i(I.location,this.maxFragmentShaderTextureUnits-1),C&&g.uniform1i(C.location,this.maxFragmentShaderTextureUnits-1),i&&g.uniform1i(i.location,-1),!1;if(e){const s=A.boundTextures++;g.activeTexture(this.__gl.TEXTURE0+s),g.bindTexture(g.TEXTURE_2D,this.brdfLUTTexture),g.uniform1i(e.location,s)}if(I){const s=A.boundTextures++,o=this.__gl.TEXTURE0+s;g.activeTexture(o),g.bindTexture(g.TEXTURE_CUBE_MAP,this.irradianceCubeTex),g.uniform1i(I.location,s)}if(C){const s=A.boundTextures++,o=this.__gl.TEXTURE0+s;g.activeTexture(o),g.bindTexture(g.TEXTURE_CUBE_MAP,this.specularCubetex),g.uniform1i(C.location,s)}return i&&g.uniform1i(i.location,0),!0}destroy(){}}var Kl=`
precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'gamma.glsl'
import 'constants.glsl'

uniform float focus;
uniform float exposure;

/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;

#define ENABLE_INLINE_GAMMACORRECTION

#define ENV_MAP_LATLONG 0
#define ENV_MAP_OCT 1
#define ENV_MAP_CUBE 2
#define ENV_MAP_irradianceMap 8
#define ENV_MAP_prefilterMap 3
#define ENV_MAP_STEREO_LATLONG 4
#define ENV_MAP_DUALFISHEYE 5
#define ENV_MAP_SH 6
#define ENV_MAP_BRDF_LUT 7

#define ENV_MAPTYPE ENV_MAP_OCT

#if (ENV_MAPTYPE == ENV_MAP_LATLONG)  

import 'envmap-equirect.glsl'

uniform sampler2D backgroundImage;

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = latLongUVsFromDir(normalize(dir));
  vec4 texel = texture2D(backgroundImage, uv) * exposure;
  return vec4(texel.rgb/texel.a, 1.0);
}

#elif (ENV_MAPTYPE == ENV_MAP_OCT)  

import 'envmap-octahedral.glsl'

uniform sampler2D   envMap;

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = dirToSphOctUv(normalize(dir));
  if (false) {
    vec4 texel = texture2D(envMap, uv);
    return vec4(texel.rgb/texel.a, 1.0);
  }
  else {
    return texture2D(envMap, uv) * exposure;
  }
}

#elif (ENV_MAPTYPE == ENV_MAP_CUBE)

uniform samplerCube cubeMap;

vec4 sampleEnvMap(vec3 dir) {
  return texture(cubeMap, dir, 0.0);// * exposure;
  // return textureLod(cubeMap, dir, exposure);
}

#elif (ENV_MAPTYPE == ENV_MAP_irradianceMap)

uniform samplerCube irradianceMap;

vec4 sampleEnvMap(vec3 dir) {
  return textureLod(irradianceMap, dir, exposure);
}

#elif (ENV_MAPTYPE == ENV_MAP_prefilterMap)

uniform samplerCube prefilterMap;

vec4 sampleEnvMap(vec3 dir) {
  return textureLod(prefilterMap, dir, exposure);
}

#elif (ENV_MAPTYPE == ENV_MAP_STEREO_LATLONG)  

import 'envmap-equirect.glsl'
uniform int eye;// L = 0, R = 1;
uniform sampler2D backgroundImage;

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = latLongUVsFromDir(normalize(v_worldDir));
  uv.y *= 0.5;
  if (eye == 1) {
    uv.y += 0.5;
  }
  vec4 texel = texture2D(backgroundImage, uv) * exposure;
  fragColor = vec4(texel.rgb/texel.a, 1.0);
}

#elif (ENV_MAPTYPE == ENV_MAP_DUALFISHEYE)

import 'envmap-dualfisheye.glsl'

vec4 sampleEnvMap(vec3 dir) {
  vec2 uv = dualfisheyeUVsFromDir(dir);
  return texture2D(backgroundImage, uv) * exposure;
}

#elif (ENV_MAPTYPE == ENV_MAP_SH)

import 'SHCoeffs.glsl'

vec4 sampleEnvMap(vec3 dir) {
	return vec4(sampleSHCoeffs(dir) * exposure, 1.0);
}

#elif (ENV_MAPTYPE == ENV_MAP_BRDF_LUT)

uniform sampler2D brdfLUT;

vec4 sampleEnvMap(vec3 dir) {
  return texture2D(brdfLUT, v_texCoord);
}
#endif

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = sampleEnvMap(normalize(v_worldDir));

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb);
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,Nl=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

import 'inverse.glsl'
import 'transpose.glsl'

/* VS Outputs */
varying vec3 v_worldDir;
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID() * 2.0;
  v_texCoord = position * 0.5 + 0.5;

  mat4 inverseProjection = inverse(projectionMatrix);
  mat3 inverseModelview = transpose(mat3(viewMatrix));

  // transform from the normalized device coordinates back to the view space
  vec3 unprojected = (inverseProjection * vec4(position, 0, 1)).xyz;

  // transfrom from the view space back to the world space
  // and use it as a sampling vector
  v_worldDir = inverseModelview * unprojected;

  gl_Position = vec4(position, 0, 1);
}
`;class To extends OA{constructor(A){super(A,"EnvMapShader");this.setShaderStage("VERTEX_SHADER",Nl),this.setShaderStage("FRAGMENT_SHADER",Kl)}}class Jl extends Yl{constructor(A,g){super(A.gl,"EnvMap");this.__srcGLTex=null,this.__envMapShader=null,this.__envMapShaderBinding=null,this.__renderer=A,this.__envMap=g,this.__backgroundFocus=0,this.__envMap.isLoaded()?this.init():this.__envMap.once("loaded",I=>{this.init()})}init(){const A=this.__renderer.gl;A.__quadVertexIdsBuffer||A.setupInstancedQuad(),this.__srcGLTex=new OC(A,this.__envMap),this.__envMapShader=new To(A);const g=this.__envMapShader.compileForTarget("GLEnvMap",{directives:["#define ENABLE_ES3"]});this.__envMapShaderBinding=dg(A,g.attrs,A.__quadattrbuffers,A.__quadIndexBuffer);const I=this.__envMap.headlightModeParam,C=()=>{I.value?this.textureDesc[3]|=1:this.textureDesc[3]&=-2};C(),I.on("valueChanged",()=>{C(),this.emit("updated")}),this.convolveProbe(this.__srcGLTex),this.emit("updated")}getEnvMap(){return this.__envMap}getBackgroundFocus(){return this.__backgroundFocus}setBackgroundFocus(A){this.__backgroundFocus=A,this.__renderer.requestRedraw()}draw(A){if(this.__envMap.isLoaded()){const g=this.__gl;{this.__envMapShader.bind(A,"GLEnvMap");const I=A.unifs,{envMap:C,focus:e,exposure:i}=A.unifs;C&&this.__srcGLTex.bindToUniform(A,C),e&&g.uniform1f(e.location,this.__backgroundFocus),i&&g.uniform1f(i.location,A.exposure),this.__envMapShaderBinding.bind(A),g.depthMask(!1),A.bindViewports(I,()=>{g.drawQuad()}),g.depthMask(!0)}}}destroy(){super.destroy(),this.__srcGLTex&&this.__srcGLTex.destroy()}}function Ve(t){var A=typeof t;return t!=null&&(A=="object"||A=="function")}var Dl=typeof global=="object"&&global&&global.Object===Object&&global,vl=typeof self=="object"&&self&&self.Object===Object&&self,zo=Dl||vl||Function("return this")(),Zi=function(){return zo.Date.now()},Ml=/\s/;function Ll(t){for(var A=t.length;A--&&Ml.test(t.charAt(A)););return A}var Ul=/^\s+/;function kl(t){return t&&t.slice(0,Ll(t)+1).replace(Ul,"")}var Se=zo.Symbol,_o=Object.prototype,xl=_o.hasOwnProperty,Tl=_o.toString,sC=Se?Se.toStringTag:void 0;function zl(t){var A=xl.call(t,sC),g=t[sC];try{t[sC]=void 0;var I=!0}catch{}var C=Tl.call(t);return I&&(A?t[sC]=g:delete t[sC]),C}var _l=Object.prototype,Pl=_l.toString;function Ol(t){return Pl.call(t)}var jl="[object Null]",ql="[object Undefined]",Rs=Se?Se.toStringTag:void 0;function $l(t){return t==null?t===void 0?ql:jl:Rs&&Rs in Object(t)?zl(t):Ol(t)}function Ad(t){return t!=null&&typeof t=="object"}var gd="[object Symbol]";function Id(t){return typeof t=="symbol"||Ad(t)&&$l(t)==gd}var fs=0/0,Cd=/^[-+]0x[0-9a-f]+$/i,ed=/^0b[01]+$/i,id=/^0o[0-7]+$/i,td=parseInt;function ws(t){if(typeof t=="number")return t;if(Id(t))return fs;if(Ve(t)){var A=typeof t.valueOf=="function"?t.valueOf():t;t=Ve(A)?A+"":A}if(typeof t!="string")return t===0?t:+t;t=kl(t);var g=ed.test(t);return g||id.test(t)?td(t.slice(2),g?2:8):Cd.test(t)?fs:+t}var sd="Expected a function",od=Math.max,ad=Math.min;function nd(t,A,g){var I,C,e,i,s,o,a=0,n=!1,B=!1,d=!0;if(typeof t!="function")throw new TypeError(sd);A=ws(A)||0,Ve(g)&&(n=!!g.leading,B="maxWait"in g,e=B?od(ws(g.maxWait)||0,A):e,d="trailing"in g?!!g.trailing:d);function l(Q){var u=I,Z=C;return I=C=void 0,a=Q,i=t.apply(Z,u),i}function r(Q){return a=Q,s=setTimeout(E,A),n?l(Q):i}function c(Q){var u=Q-o,Z=Q-a,w=A-u;return B?ad(w,e-Z):w}function h(Q){var u=Q-o,Z=Q-a;return o===void 0||u>=A||u<0||B&&Z>=e}function E(){var Q=Zi();if(h(Q))return b(Q);s=setTimeout(E,c(Q))}function b(Q){return s=void 0,d&&I?l(Q):(I=C=void 0,i)}function m(){s!==void 0&&clearTimeout(s),a=0,I=o=C=s=void 0}function G(){return s===void 0?i:b(Zi())}function y(){var Q=Zi(),u=h(Q);if(I=arguments,C=this,o=Q,u){if(s===void 0)return r(o);if(B)return clearTimeout(s),s=setTimeout(E,A),l(o)}return s===void 0&&(s=setTimeout(E,A)),i}return y.cancel=m,y.flush=G,y}var Bd="Expected a function";function ld(t,A,g){var I=!0,C=!0;if(typeof t!="function")throw new TypeError(Bd);return Ve(g)&&(I="leading"in g?!!g.leading:I,C="trailing"in g?!!g.trailing:C),nd(t,A,{leading:I,maxWait:A,trailing:C})}var dd=`
precision highp float;
#define GLSLIFY 1

uniform sampler2D image;
uniform vec4 color;
uniform int isTextured;

varying vec2 v_texCoord;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  if (isTextured != 0)
    fragColor = texture2D(image, v_texCoord);
  else 
    fragColor = color;

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,rd=`
precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

uniform vec2 pos;
uniform vec2 size;

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * abs(size) * 2.0), 0.0, 1.0);
  if (size.x < 0.0)
    v_texCoord.x = 1.0 - v_texCoord.x;
  if (size.y < 0.0)
    v_texCoord.y = 1.0 - v_texCoord.y;
}
`;class cd extends OA{constructor(A){super(A,"ScreenQuadShader");this.setShaderStage("VERTEX_SHADER",rd),this.setShaderStage("FRAGMENT_SHADER",dd)}}class hd{constructor(A,g){this.__gl=A,this.__pos=[0,0],this.__size=[1,1],this.flipY=!0,this.__glshader=new cd(A),A.__quadVertexIdsBuffer||A.setupInstancedQuad();const I=this.__glshader.compileForTarget("GLScreenQuad",g);this.__quadBinding=dg(this.__gl,I.attrs,A.__quadattrbuffers,A.__quadIndexBuffer),this.ready=!0}bind(A,g,I,C){const e=A.unifs,i=this.__gl;g&&g instanceof KA?(i.uniform1i(e.isTextured.location,1),g.bindToUniform(A,A.unifs.image)):g&&g instanceof W&&(i.uniform1i(e.isTextured.location,0),i.uniform4fv(e.color.location,g.asArray()));{const s=e.pos;if(s){let o=I?I instanceof K?I.asArray():I:this.__pos;i.uniform2fv(s.location,o)}}{const s=e.size;if(s){let o=C?C instanceof K?C.asArray():C:this.__size;i.uniform2fv(s.location,o)}}this.__quadBinding.bind(A)}bindShader(A){return this.__glshader.bind(A,"GLScreenQuad")}draw(A,g,I,C){this.bind(A,g,I,C);const e=this.__gl;e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)}}class St extends po{constructor(A,g){super();this.genBufferOpts={},this.__indexBuffer=null,this.__gl=A,this.__geom=g,this.__glattrbuffers={},this.__shaderBindings={},this.buffersDirty=!0;const I=e=>{this.dirtyBuffers(e)};this.__geom.on("geomDataChanged",I);const C=e=>{this.clearBuffers(),this.dirtyBuffers(e)};this.__geom.on("geomDataTopologyChanged",C)}getGeom(){return this.__geom}dirtyBuffers(A){this.genBufferOpts=A,this.buffersDirty=!0,this.emit("updated")}genBuffers(A){}updateBuffers(A){this.genBuffers(A),this.buffersDirty=!1}bind(A){if(this.__destroyed)throw new Error("Error binding a destroyed geom");this.buffersDirty&&this.updateBuffers();let g=this.__shaderBindings[A.shaderkey];if(!g){const I=this.__gl;g=dg(I,A.attrs,this.__glattrbuffers,this.__indexBuffer),this.__shaderBindings[A.shaderkey]=g}g.bind(A)}unbind(A){const g=this.__shaderBindings[A.shaderkey];g&&g.unbind(A)}draw(A){throw new Error("Not implemented. Implement this method in a derived class.")}drawInstanced(A,g){throw new Error("Not implemented. Implement this method in a derived class.")}bindAndDraw(A){this.bind(A),this.draw(A)}clearBuffers(){const A=this.__gl;for(const g in this.__glattrbuffers){const I=this.__glattrbuffers[g];I.shared||A.deleteBuffer(I.buffer)}this.__glattrbuffers={};for(const g in this.__shaderBindings)this.__shaderBindings[g].destroy();this.__shaderBindings={}}destroy(){this.__geom.deleteMetadata("glgeom"),this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}class ei extends St{constructor(A,g){super(A,g);this.__numTriIndices=0,this.__indexDataType=0,this.__numVertices=0,this.__numTriangles=0,this.__numRenderVerts=0}genBuffers(){super.genBuffers();const A=this.__gl,g=this.__geom.genBuffers(),I=g.indices;this.__numTriIndices=g.indices.length,I instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),I instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),I instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT),this.__numVertices=this.__geom.getNumVertices(),this.__numTriangles=I.length/3,this.__numRenderVerts=g.numRenderVerts,this.__indexBuffer&&A.deleteBuffer(this.__indexBuffer),this.__indexBuffer=A.createBuffer(),A.bindBuffer(A.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),A.bufferData(A.ELEMENT_ARRAY_BUFFER,g.indices,A.STATIC_DRAW);for(const C in g.attrBuffers){const e=g.attrBuffers[C];this.__glattrbuffers[C]&&this.__glattrbuffers[C].buffer&&A.deleteBuffer(this.__glattrbuffers[C].buffer);const i=A.createBuffer();A.bindBuffer(A.ARRAY_BUFFER,i),A.bufferData(A.ARRAY_BUFFER,e.values,A.STATIC_DRAW),this.__glattrbuffers[C]={buffer:i,dataType:e.dataType,normalized:e.normalized},C=="textureCoords"&&(this.__glattrbuffers.texCoords=this.__glattrbuffers.textureCoords)}}updateBuffers(A){const g=this.__gl;if(this.__numVertices!=this.__geom.getNumVertices()){this.genBuffers();return}const I=this.__geom.genBuffers({includeIndices:!1});for(const C in I.attrBuffers){const e=I.attrBuffers[C],i=this.__glattrbuffers[C];g.bindBuffer(g.ARRAY_BUFFER,i.buffer),g.bufferData(g.ARRAY_BUFFER,e.values,g.STATIC_DRAW)}this.buffersDirty=!1}clearBuffers(){this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,super.clearBuffers()}draw(A){this.__gl.drawElements(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0)}drawInstanced(A,g){this.__gl.drawElementsInstanced(this.__gl.TRIANGLES,this.__numTriIndices,this.__indexDataType,0,g)}destroy(){super.destroy(),this.__gl.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null}}const eg={MSAA_RENDERBUFFER:0,COLORBUFFER:1,DEPTHBUFFER:2};class Po extends xI{constructor(A){super();this.__fbo=null,this.offscreenBuffer=null,this.depthTexture=null,this.__backgroundTexture=null,this.__backgroundGLTexture=null,this.offscreenBufferFbo=null,this.__width=0,this.__height=0,this.__canvasWidth=0,this.__canvasHeight=0,this.fb=null,this.depthBuffer=null,this.EXT_frag_depth=null,this.depthRange=[0,0],this.backgroundColorParam=new ag("BackgroundColor",new W("#eeeeee")),this.doubleClickTimeParam=new Y("DoubleClickTimeMS",200),this.renderer=A,this.__renderer=A,this.addParameter(this.doubleClickTimeParam);const g=this.__renderer.gl;this.__gl=g,this.quad=new ei(g,new zI(1,1)),g.name=="webgl2"&&(this.offscreenBuffer=new KA(g,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"LINEAR",width:4,height:4}),this.depthTexture=new KA(g,{type:g.UNSIGNED_INT_24_8,format:g.DEPTH_STENCIL,internalFormat:g.name=="webgl2"?g.DEPTH24_STENCIL8:g.DEPTH_COMPONENT,filter:g.NEAREST,wrap:g.CLAMP_TO_EDGE,width:4,height:4})),this.highlightedGeomsBuffer=new KA(g,{type:"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:4,height:4}),this.highlightedGeomsBufferFbo=new wt(g,this.highlightedGeomsBuffer,!0),this.highlightedGeomsBufferFbo.setClearColor(new W(0,0,0,0));const I=()=>{const C=this.backgroundColorParam.value;C instanceof Fg?C instanceof Gt?(this.__backgroundTexture=C,this.__backgroundGLTexture=new OC(g,C)):(this.__backgroundTexture=C,this.__backgroundGLTexture=new KA(g,C)):C instanceof W?(this.__backgroundGLTexture&&(this.__backgroundGLTexture.destroy(),this.__backgroundGLTexture=null,this.__backgroundTexture=null),this.offscreenBufferFbo&&this.offscreenBufferFbo.setClearColor(new W(C.asArray()))):console.warn("Invalid background:"+C),this.emit("updated")};I(),this.backgroundColorParam.on("valueChanged",I)}getRenderer(){return this.renderer}getWidth(){return this.__width}getHeight(){return this.__height}resize(A,g){if(this.__canvasWidth==A&&this.__canvasHeight==g)return;this.__canvasWidth=A,this.__canvasHeight=g,this.__width=A,this.__height=g,this.resizeRenderTargets(A,g);const I=new Ug(this.__width,this.__height);this.emit("resized",I)}resizeRenderTargets(A,g){this.highlightedGeomsBuffer&&this.highlightedGeomsBufferFbo.resize(A,g);const I=this.__renderer.gl;if(this.renderer.outlineThickness>0&&this.renderer.outlineMethod=="image"){if(vA.browserName=="Safari"||I.name=="webgl"){console.warn("Disabling outlines on Safari due to a regression in WebKit",vA);return}this.fb&&(I.deleteFramebuffer(this.fb[eg.MSAA_RENDERBUFFER]),I.deleteFramebuffer(this.fb[eg.COLORBUFFER]),I.deleteFramebuffer(this.fb[eg.DEPTHBUFFER]),this.colorRenderbuffer&&I.deleteRenderbuffer(this.colorRenderbuffer),this.depthBuffer&&I.deleteRenderbuffer(this.depthBuffer)),this.offscreenBuffer.resize(A,g),this.depthTexture.resize(A,g),this.fb=[],this.fb[eg.MSAA_RENDERBUFFER]=I.createFramebuffer(),I.bindFramebuffer(I.FRAMEBUFFER,this.fb[eg.MSAA_RENDERBUFFER]),this.colorRenderbuffer=I.createRenderbuffer(),I.bindRenderbuffer(I.RENDERBUFFER,this.colorRenderbuffer),this.renderer.multiSampledScreenBuffer?I.renderbufferStorage(I.RENDERBUFFER,I.RGBA8,A,g):I.renderbufferStorageMultisample(I.RENDERBUFFER,4,I.RGBA8,A,g),I.framebufferRenderbuffer(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.RENDERBUFFER,this.colorRenderbuffer),this.depthBuffer=I.createRenderbuffer(),I.bindRenderbuffer(I.RENDERBUFFER,this.depthBuffer),this.renderer.multiSampledScreenBuffer?I.renderbufferStorage(I.RENDERBUFFER,I.DEPTH24_STENCIL8,A,g):I.renderbufferStorageMultisample(I.RENDERBUFFER,4,I.DEPTH24_STENCIL8,A,g),I.framebufferRenderbuffer(I.FRAMEBUFFER,I.DEPTH_ATTACHMENT,I.RENDERBUFFER,this.depthBuffer),this.fb[eg.COLORBUFFER]=I.createFramebuffer(),I.bindFramebuffer(I.FRAMEBUFFER,this.fb[eg.COLORBUFFER]),I.framebufferTexture2D(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,this.offscreenBuffer.glTex,0),I.bindFramebuffer(I.FRAMEBUFFER,null),this.fb[eg.DEPTHBUFFER]=I.createFramebuffer(),I.bindFramebuffer(I.FRAMEBUFFER,this.fb[eg.DEPTHBUFFER]),I.framebufferTexture2D(I.FRAMEBUFFER,I.DEPTH_ATTACHMENT,I.TEXTURE_2D,this.depthTexture.glTex,0),I.bindFramebuffer(I.FRAMEBUFFER,null);const e=I.checkFramebufferStatus(I.name=="webgl2"?I.DRAW_FRAMEBUFFER:I.FRAMEBUFFER);if(e!==I.FRAMEBUFFER_COMPLETE)switch(e){case I.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw new Error("The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete.");case I.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw new Error("There is no attachment.");case I.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("Height and width of the attachment are not the same.");case I.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw new Error("The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer.");case 36061:throw new Error("The framebuffer is unsupported");default:throw new Error("Incomplete Frambuffer")}}}draw(A){const g=this.__renderer.gl;A.pushGLStack();const I=A.boundRendertarget;if(this.renderer.outlineThickness>0&&this.renderer.outlineMethod=="image")if(vA.browserName=="Safari"||g.name=="webgl")console.warn("Disabling outlines on Safari due to a regression in WebKit",vA);else{this.fb||this.resizeRenderTargets(this.__width,this.__height);const i=this.fb[eg.MSAA_RENDERBUFFER];g.bindFramebuffer(g.name=="webgl2"?g.DRAW_FRAMEBUFFER:g.FRAMEBUFFER,i),A.boundRendertarget=i}else A.boundRendertarget||g.bindFramebuffer(g.FRAMEBUFFER,null);A.glEnable(g.DEPTH_TEST),this.__renderer.drawScene(A);const C=A.toHighlightRenderState();if(this.drawHighlights(C),C.stack.length!=1&&console.warn(" corrupt highlightRenderState.stack.length:",C.stack.length),this.fb){const e=g;e.bindFramebuffer(e.READ_FRAMEBUFFER,this.fb[eg.MSAA_RENDERBUFFER]),e.bindFramebuffer(e.DRAW_FRAMEBUFFER,this.fb[eg.COLORBUFFER]),e.clearBufferfv(e.COLOR,0,[0,0,0,0]),e.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,e.COLOR_BUFFER_BIT,e.LINEAR),g.bindFramebuffer(g.DRAW_FRAMEBUFFER,I),A.boundRendertarget=I,g.viewport(0,0,this.__width,this.__height),g.disable(g.DEPTH_TEST);const i=this.__renderer.screenQuad;i.bindShader(A),i.draw(A,this.offscreenBuffer),g.enable(g.DEPTH_TEST)}A.popGLStack(),this.renderer.emit("redrawOccurred")}drawSilhouettes(A){A.pushGLStack();const g=this.__renderer.gl,I=g;I.bindFramebuffer(I.READ_FRAMEBUFFER,this.fb[eg.MSAA_RENDERBUFFER]),I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.fb[eg.DEPTHBUFFER]),I.clearBufferfv(I.COLOR,0,[1,1,1,1]),I.blitFramebuffer(0,0,this.__width,this.__height,0,0,this.__width,this.__height,I.DEPTH_BUFFER_BIT,I.NEAREST),I.bindFramebuffer(I.DRAW_FRAMEBUFFER,this.fb[eg.MSAA_RENDERBUFFER]),A.boundRendertarget=this.fb[eg.MSAA_RENDERBUFFER],I.viewport(0,0,this.__width,this.__height),A.glEnable(g.BLEND),A.glDisable(g.DEPTH_TEST),I.blendEquation(I.FUNC_ADD),I.blendFunc(I.SRC_ALPHA,I.ONE_MINUS_SRC_ALPHA),I.depthMask(!1),this.renderer.silhouetteShader.bind(A);const C=A.unifs;this.depthTexture.bindToUniform(A,C.depthTexture),I.uniform2f(C.screenSize.location,this.__width,this.__height),I.uniform1f(C.outlineThickness.location,this.renderer.outlineThickness*window.devicePixelRatio);const e=this.renderer.outlineColor.asArray();I.uniform4f(C.outlineColor.location,e[0],e[1],e[2],e[3]),I.uniform1f(C.outlineSensitivity.location,this.renderer.outlineSensitivity),I.uniform1f(C.outlineDepthBias.location,this.renderer.outlineDepthBias),I.uniform2f(C.depthRange.location,this.depthRange[0],this.depthRange[1]),this.quad.bindAndDraw(A),I.depthMask(!0),A.popGLStack()}drawHighlights(A){if(this.highlightedGeomsBufferFbo){const g=this.__renderer.gl;this.highlightedGeomsBufferFbo.bindForWriting(A),this.highlightedGeomsBufferFbo.clear(),A.pushGLStack(),A.glEnable(g.CULL_FACE),A.glEnable(g.DEPTH_TEST),A.glDisable(g.BLEND),g.depthFunc(g.LESS),g.depthMask(!0),A.glShader=null,this.__renderer.drawHighlightedGeoms(A),this.highlightedGeomsBufferFbo.unbindForWriting(A),g.viewport(0,0,this.__width,this.__height);{this.renderer.highlightsShader.bind(A),A.pushGLStack(),A.glEnable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA);const I=A.unifs;g.uniform1f(I.outlineThickness.location,this.renderer.highlightOutlineThickness),this.highlightedGeomsBuffer.bindToUniform(A,I.highlightDataTexture),g.uniform2f(I.highlightDataTextureSize.location,A.region[2],A.region[3]),this.quad.bindAndDraw(A),A.popGLStack()}A.popGLStack()}}getManipulator(){return this.manipulator}setManipulator(A){this.manipulator!=A&&(this.manipulator&&this.manipulator.deactivateTool&&this.manipulator.deactivateTool(),this.manipulator=A,this.manipulator.activateTool&&this.manipulator.activateTool())}onPointerDown(A){console.warn("@GLBaseViewport#onPointerDown - Implement me!")}onPointerUp(A){console.warn("@GLBaseViewport#onPointerUp - Implement me!")}onPointerMove(A){console.warn("@GLBaseViewport#onPointerMove - Implement me!")}onPointerEnter(A){console.warn("@GLBaseViewport#onPointerEnter - Implement me!")}onPointerLeave(A){console.warn("@GLBaseViewport#onPointerLeave - Implement me!")}onMouseLeave(A){}onKeyDown(A){}onKeyUp(A){}}class md extends Po{constructor(A,g,I,C){super(A);this.__geomDataBufferSizeFactor=1,this.debugGeomDataBuffer=!1,this.debugOcclusionBuffer=!1,this.debugReductionBuffer=!1,this.debugHighlightedGeomsBuffer=!1,this.__x=0,this.__y=0,this.region=[0,0,0,0],this.__cameraXfo=new D,this.__cameraMat=new NA,this.__viewMat=new NA,this.__geomDataBufferInvalid=!0,this.__screenPos=null,this.__name=g,this.__projectionMatrix=new NA,this.__frustumDim=new K,this.__bl=new K(0,0),this.__tr=new K(1,1),this.__prevDownTime=0;const e=this.__renderer.gl;this.__geomDataBuffer=new KA(e,{type:A.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:I<=1?1:Math.floor(I/this.__geomDataBufferSizeFactor),height:C<=1?1:Math.floor(C/this.__geomDataBufferSizeFactor)}),this.__geomDataBufferFbo=new wt(e,this.__geomDataBuffer,!0),this.__geomDataBufferFbo.setClearColor(new W(0,0,0,0)),this.__camera=new Do("DefaultCamera"),this.setCamera(this.__camera),this.setManipulator(new Ee({renderer:A})),this.resize(I,C)}getBl(){return this.__bl}setBl(A){this.__bl.x=A,this.__bl.y=A,this.resize(this.__canvasWidth,this.__canvasHeight)}getTr(){return this.__tr}setTr(A){this.__tr.x=A,this.__tr.y=A,this.resize(this.__canvasWidth,this.__canvasHeight)}getPosX(){return this.__x}getPosY(){return this.__y}resize(A,g){if(this.__canvasWidth==A&&this.__canvasHeight==g)return;this.__canvasWidth=A,this.__canvasHeight=g,this.__x=A*this.__bl.x,this.__y=A*this.__bl.y,this.__width=A*this.__tr.x-A*this.__bl.x,this.__height=g*this.__tr.y-g*this.__bl.y,this.region=[this.__x,this.__y,this.__width,this.__height],this.__camera&&this.__updateProjectionMatrix(),this.resizeRenderTargets(this.__width,this.__height);const I=new Ug(this.__width,this.__height);this.emit("resized",I)}resizeRenderTargets(A,g){super.resizeRenderTargets(A,g),this.__geomDataBufferFbo&&(this.__geomDataBufferFbo.resize(Math.floor(this.__width/this.__geomDataBufferSizeFactor),Math.floor(this.__height/this.__geomDataBufferSizeFactor)),this.renderGeomDataFbo())}getCamera(){return this.__camera}setCamera(A){this.__camera=A,this.depthRange=[this.__camera.getNear(),this.__camera.getFar()];const g=A.globalXfoParam,I=()=>{this.__cameraXfo=g.value,this.__cameraMat=this.__cameraXfo.toMat4(),this.__viewMat=this.__cameraMat.inverse()};I(),g.on("valueChanged",()=>{I(),this.invalidateGeomDataBuffer(),this.emit("updated");const C=new et("CameraAndPointer",this.__cameraXfo);this.emit("viewChanged",C)}),this.__camera.on("projectionParamChanged",()=>{this.__updateProjectionMatrix(),this.depthRange=[this.__camera.getNear(),this.__camera.getFar()],this.emit("updated")}),this.__updateProjectionMatrix()}__updateProjectionMatrix(){const A=this.__width/this.__height;this.__camera.updateProjectionMatrix(this.__projectionMatrix,A);const g=Math.tan(this.__camera.getFov()/2)*this.__camera.getNear()*2,I=g*A;this.__frustumDim.set(I,g)}getProjectionMatrix(){return this.__projectionMatrix}getViewMatrix(){return this.__viewMat}frameView(A){this.__width>0&&this.__height>0?this.__camera.frameView(this,A):this.once("resized",()=>this.frameView())}calcScreenPosFromWorldPos(A){const I=this.__projectionMatrix.multiply(this.__viewMat).transformVec4(new cA(A.x,A.y,A.z,1));return I.x/=I.w,I.y/=I.w,new K((I.x*.5+.5)*this.__width,(I.y*-.5+.5)*this.__height)}calcRayFromScreenPos(A){const g=this.__canvasHeight*(1-this.__tr.y);let I=(A.x-this.__x)/this.__width,C=(A.y-g)/this.__height;I=I*2-1,C=C*2-1;const e=this.__cameraMat,i=this.__projectionMatrix.inverse();if(i==null)return console.warn(`Unable to generate Ray from screen pos:${A.toString()} in region ${this.region}`),new rg;let s,o;if(this.__camera.isOrthographic()){const a=i.transformVec3(new f(I,-C,-1));a.z=0,s=e.transformVec3(a),o=new f(0,0,-1)}else s=e.translation,o=i.transformVec3(new f(I,-C,-1));return o=e.rotateVec3(o).normalize(),new rg(s,o)}renderGeomDataFbo(){if(this.__geomDataBufferFbo){const A=new wC(this.renderer.__gl);this.initRenderState(A),A.geomDataFbo=this.__geomDataBufferFbo,this.__geomDataBufferFbo.bindAndClear(A),this.__renderer.drawSceneGeomData(A),this.__geomDataBufferInvalid=!1,this.__geomDataBufferFbo.unbind()}}invalidateGeomDataBuffer(){this.__geomDataBufferInvalid=!0}getGeomDataAtPos(A,g){if(this.__geomDataBufferFbo){if(this.__geomDataBufferInvalid&&(this.renderGeomDataFbo(),this.__screenPos=null),A===this.__screenPos)return this.__intersectionData;this.__screenPos=A,this.__intersectionData=null;const I=this.__renderer.gl;I.finish(),this.__geomDataBufferFbo.bindForReading();const C=this.__geomDataBufferFbo.width,e=this.__geomDataBufferFbo.height,i=Math.floor(A.x*(C/this.__width)),s=Math.floor(A.y*(e/this.__height));let o,a;if(this.__renderer.floatGeomBuffer){if(a=new Float32Array(4),I.readPixels(i,e-s-1,1,1,I.RGBA,I.FLOAT,a),a[3]==0)return null;o=Math.round(a[0])&64-1}else{if(a=new Uint8Array(4),I.readPixels(i,e-s-1,1,1,I.RGBA,I.UNSIGNED_BYTE,a),I.bindFramebuffer(I.FRAMEBUFFER,null),a[0]==0&&a[1]==0)return;o=Math.floor(a[1]/32)}this.__geomDataBufferFbo.unbind();const n=this.__renderer.getPass(o);if(!n)return console.warn("Geom data buffer returns invalid pass id:",o),null;const B=n.getGeomItemAndDist(a);if(B){if(!B.geomItem.isSelectable())return null;g||(g=this.calcRayFromScreenPos(A));const d=g.start.add(g.dir.scale(B.dist));this.__intersectionData=new hn(A,g,d,a,B)}return this.__intersectionData}return null}getGeomItemsInRect(A,g){var I;if(this.__geomDataBufferFbo){const C=this.__renderer.gl;C.finish();const e=this.__geomDataBufferFbo.width,i=this.__geomDataBufferFbo.height,s=e/this.__width,o=i/this.__height,a=Math.round(A.x*s),n=Math.round(A.y*o),B=Math.round(g.x*s),d=Math.round(g.y*o),l=Math.round(i-d),r=Math.round(a),c=Math.round(B-a),h=Math.round(d-n),E=c*h;this.__geomDataBufferFbo.bindForReading();let b;this.__renderer.floatGeomBuffer?(b=new Float32Array(4*E),C.readPixels(r,l,c,h,C.RGBA,C.FLOAT,b)):(b=new Uint8Array(4*E),C.readPixels(r,l,c,h,C.RGBA,C.UNSIGNED_BYTE,b)),C.bindFramebuffer(C.FRAMEBUFFER,null);const m=new Set;for(let G=0;G<E;G++){let y;const Q=b.subarray(G*4,(G+1)*4);if(this.__renderer.floatGeomBuffer){if(Q[3]==0)continue;y=Math.round(Q[0])}else{if(Q[0]==0&&Q[1]==0)continue;y=Math.floor(Q[1]/64)}const u=(I=this.__renderer.getPass(y))===null||I===void 0?void 0:I.getGeomItemAndDist(Q);if(u){if(!u.geomItem.isSelectable())continue;m.add(u.geomItem)}}return m}return new Set}__getPointerPos(A,g){return new K((A-this.getPosX())*window.devicePixelRatio,(g-this.getPosY())*window.devicePixelRatio)}prepareUIEvent(A){A.viewport=this}onPointerDown(A){if(this.prepareUIEvent(A),A.pointerType===DA.mouse){const I=A;I.pointerPos=this.__getPointerPos(I.rendererX,I.rendererY),I.pointerRay=this.calcRayFromScreenPos(I.pointerPos),I.intersectionData=this.getGeomDataAtPos(I.pointerPos,I.pointerRay)}else if(A.pointerType===DA.touch){const I=A;if(I.touches.length==1){const C=I.touches[0];I.pointerPos=this.__getPointerPos(C.rendererX,C.rendererY),I.pointerRay=this.calcRayFromScreenPos(I.pointerPos),I.intersectionData=this.getGeomDataAtPos(I.pointerPos,I.pointerRay)}}const g=Date.now();if(g-this.__prevDownTime<this.doubleClickTimeParam.value&&(A instanceof wg||A instanceof kg&&A.touches.length==1)){if(this.manipulator&&(this.manipulator.onPointerDoublePress(A),!A.propagating)||(this.emit("pointerDoublePressed",A),!A.propagating))return}else this.__prevDownTime=g;A.getCapture()&&(A.getCapture().onPointerDown(A),!A.propagating)||A.intersectionData!=null&&(A.intersectionData.geomItem.onPointerDown(A),!A.propagating)||(this.emit("pointerDown",A),!!A.propagating&&this.manipulator&&(this.manipulator.onPointerDown(A),A.propagating))}onPointerUp(A){if(this.prepareUIEvent(A),A.pointerType===DA.mouse){const g=A;g.pointerPos=this.__getPointerPos(g.rendererX,g.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay)}else if(A.pointerType===DA.touch){const g=A;if(g.touches.length==0&&g.changedTouches.length==1){const I=g.changedTouches[0];g.pointerPos=this.__getPointerPos(I.rendererX,I.rendererY),g.pointerRay=this.calcRayFromScreenPos(g.pointerPos),g.intersectionData=this.getGeomDataAtPos(g.pointerPos,g.pointerRay)}}A.getCapture()&&(A.getCapture().onPointerUp(A),!A.propagating)||A.intersectionData!=null&&(A.intersectionData.geomItem.onPointerUp(A),!A.propagating)||(this.emit("pointerUp",A),!!A.propagating&&this.manipulator&&(this.manipulator.onPointerUp(A),A.propagating))}onPointerMove(A){if(this.prepareUIEvent(A),A.pointerType===DA.mouse){const g=A,I=this.__getPointerPos(g.rendererX,g.rendererY);g.pointerPos=I,g.pointerRay=this.calcRayFromScreenPos(I)}else if(A.pointerType===DA.touch){const g=A;for(let I=0;I<g.touches.length;I++){const C=g.touches[I];C.touchPos=this.__getPointerPos(C.rendererX,C.rendererY),C.touchRay=this.calcRayFromScreenPos(C.touchPos)}g.pointerPos=g.touches[0].touchPos,g.pointerRay=g.touches[0].touchRay}if(!(A.getCapture()&&(A.getCapture().onPointerMove(A),!A.propagating))){if(A.intersectionData=this.getGeomDataAtPos(A.pointerPos,A.pointerRay),A.intersectionData){if(A.intersectionData.geomItem!=this.pointerOverItem){if(this.pointerOverItem&&(A.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(A),A.propagating&&this.emit("pointerLeaveGeom",A)),A.propagating=!0,this.pointerOverItem=A.intersectionData.geomItem,this.pointerOverItem.onPointerEnter(A),!A.propagating)return;this.emit("pointerOverGeom",A)}if(A.propagating=!0,A.intersectionData.geomItem.onPointerMove(A),!A.propagating)return}else if(this.pointerOverItem){if(A.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(A),this.pointerOverItem=null,!A.propagating)return;this.emit("pointerLeaveGeom",A)}this.emit("pointerMove",A),!!A.propagating&&this.manipulator&&(this.manipulator.onPointerMove(A),A.propagating)}}onPointerEnter(A){this.prepareUIEvent(A),this.emit("pointerEnter",A),!!A.propagating&&this.manipulator&&this.manipulator.onPointerEnter&&(this.manipulator.onPointerEnter(A),A.propagating)}onPointerLeave(A){this.prepareUIEvent(A),this.emit("pointerLeave",A),!!A.propagating&&this.manipulator&&this.manipulator.onPointerLeave&&(this.manipulator.onPointerLeave(A),A.propagating)}onKeyDown(A){this.prepareUIEvent(A),!(this.manipulator&&(this.manipulator.onKeyDown(A),!A.propagating))&&this.emit("keyDown",A)}onKeyUp(A){this.prepareUIEvent(A),!(this.manipulator&&(this.manipulator.onKeyUp(A),!A.propagating))&&this.emit("keyUp",A)}onWheel(A){if(this.prepareUIEvent(A),A.pointerPos=this.__getPointerPos(A.rendererX,A.rendererY),A.pointerRay=this.calcRayFromScreenPos(A.pointerPos),A.intersectionData=this.getGeomDataAtPos(A.pointerPos,A.pointerRay),!(A.intersectionData!=null&&(A.intersectionData.geomItem.onWheel(A),!A.propagating))){if(this.manipulator){this.manipulator.onWheel(A);return}this.emit("mouseWheel",A)}}onTouchCancel(A){this.prepareUIEvent(A),!(A.getCapture()&&(A.getCapture().onTouchCancel(A),!A.propagating))&&(this.manipulator&&(this.manipulator.onTouchCancel(A),!A.propagating)||this.emit("touchCancel",A))}initRenderState(A){A.viewXfo=this.__cameraXfo,A.viewScale=1,A.region=this.region,A.cameraMatrix=this.__cameraMat,A.viewport=this,A.viewports=[{region:this.region,viewMatrix:this.__viewMat,projectionMatrix:this.__projectionMatrix,viewportFrustumSize:this.__frustumDim,isOrthographic:this.__camera.isOrthographic()?1:0,fovY:this.__camera.getFov()}]}draw(A){const g=this.__renderer.gl;this.initRenderState(A),A.pushGLStack(),A.glDisable(g.BLEND),A.glEnable(g.DEPTH_TEST),A.glEnable(g.CULL_FACE),g.viewport(0,0,this.__width,this.__height);const I=this.backgroundColorParam.value.asArray();if(g.clearColor(I[0],I[1],I[2],I[3]),g.colorMask(!0,!0,!0,!1),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT),super.draw(A),A.popGLStack(),this.debugGeomDataBuffer){this.renderGeomDataFbo();const C=new Gg(this.__renderer.gl),e=this.__renderer.screenQuad;e.bindShader(C),e.draw(C,this.__geomDataBuffer,new K(0,0),new K(1,1))}if(this.debugHighlightedGeomsBuffer){const C=new Gg(this.__renderer.gl),e=this.__renderer.screenQuad;e.bindShader(C),e.draw(C,this.highlightedGeomsBuffer,new K(0,0),new K(1,1))}if(this.debugOcclusionBuffer){const C=this.__renderer.glGeomItemLibrary.occlusionDataBuffer,e=this.__renderer.screenQuad;e.bindShader(A);const i=A.unifs.image;C.bindColorTexture(A,i);const s=this.__renderer.gl;s.enable(s.BLEND),s.blendEquation(s.FUNC_ADD),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA),e.draw(A,null,new K(0,0),new K(1,1)),s.disable(s.BLEND)}if(this.debugReductionBuffer){const C=this.__renderer.glGeomItemLibrary.reductionDataBuffer,e=this.__renderer.screenQuad;e.bindShader(A);const i=A.unifs.image;C.bindColorTexture(A,i);const s=this.__renderer.gl;s.enable(s.BLEND),s.blendEquation(s.FUNC_ADD),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA),e.draw(A,null,new K(0,0),new K(1,1)),s.disable(s.BLEND)}}}class Gd{constructor(A,g){this.__xrvp=A,this.__treeItem=new L("XRHead"),g.addChild(this.__treeItem),this.__mat4=new NA,this.__localXfo=new D}setVisible(A){if(A&&!this.hmdGeomItem){const g=this.__xrvp.getAsset();if(!g)return;const I=g.getChildByName("HMD");if(!I)return;this.hmdGeomItem=I.clone({assetItem:g}),this.hmdGeomItem&&(this.hmdGeomItem.localXfoParam.value=new D(new f(0,-.035,-.03),new BA(0,1,0,Math.PI),new f(.001,.001,.001)),this.__treeItem.addChild(this.hmdGeomItem,!1))}this.hmdGeomItem&&(this.hmdGeomItem.visibleParam.value=A)}update(A){this.__mat4.setDataArray(A.transform.matrix),this.__localXfo.setFromMat4(this.__mat4),this.__treeItem.localXfoParam.value=this.__localXfo}getTreeItem(){return this.__treeItem}getXfo(){return this.__localXfo}}class Ed extends FA{constructor(A,g,I){super();if(this.pressedButtons=[],this.raycastTick=5,this.raycastArea=.005,this.raycastDist=.04,this.pointerRay=new rg,this.raycastAreaCache=0,this.raycastDistCache=0,this.rayCastRenderTargetProjMatrix=new NA,this.capturedItem=null,this.xrvp=A,this.inputSource=g,this.id=I,this.buttonPressed=!1,this.inputSource.gamepad.buttons.forEach((C,e)=>{e!=0&&(this.pressedButtons[e]=C.pressed)}),this.mat4=new NA,this.xfo=new D,this.treeItem=new L("XRController:"+g.handedness+I),!vA.isMobileDevice){this.tipItem=new L("Tip");const C=new D;if(C.tr.set(0,-.05,-.13),this.tipItem.localXfoParam.value=C,this.treeItem.addChild(this.tipItem,!1),A.getTreeItem().addChild(this.treeItem),g.targetRayMode=="tracked-pointer"){switch(g.profiles[0]){case"htc-vive":localStorage.setItem("ZeaEngine_XRDevice","Vive");break;case"oculus-touch":case"oculus-touch-v2":case"oculus-touch-v3":localStorage.setItem("ZeaEngine_XRDevice","Oculus");break}A.loadHMDResources().then(e=>{if(!e)return;const i=new D;i.ori.setFromAxisAndAngle(new f(0,1,0),Math.PI),i.sc.set(.001,.001,.001);let s;if(g.profiles[0]=="htc-vive")s=e.getChildByName("Controller"),i.tr.set(0,-.035,-.085);else switch(g.handedness){case"left":s=e.getChildByName("LeftController"),i.tr.set(0,-.035,-.085),i.sc.scaleInPlace(.85);break;case"right":s=e.getChildByName("RightController"),i.tr.set(0,-.035,-.085),i.sc.scaleInPlace(.85);break;case"none":case"left-right":case"left-right-none":s=e.getChildByName("Controller");break}if(s){const o=s.clone({assetItem:e});o.localXfoParam.value=i,this.treeItem.addChild(o,!1)}})}}this.tick=0}getHandedness(){return this.inputSource.handedness}getId(){return this.id}getTreeItem(){return this.treeItem}getTipItem(){return this.tipItem}getTipXfo(){return this.tipItem.globalXfoParam.value}getTouchPadValue(){return this.touchpadValue}isButtonPressed(){return this.buttonPressed}getControllerStageLocalXfo(){return this.xfo}getControllerTipStageLocalXfo(){return this.xfo.multiply(this.tipItem.localXfoParam.value)}updatePose(A,g,I){const C=g.getPose(I.gripSpace,A);if(!(!C||!C.transform)){if(this.mat4.setDataArray(C.transform.matrix),this.xfo.setFromMat4(this.mat4),this.treeItem.localXfoParam.value=this.xfo,this.hitTested=!1,this.raycastDist>0&&this.raycastTick>0&&this.tick%this.raycastTick==0){const e=this.getGeomItemAtTip();if(e!=null){const i=new nI(this.xrvp,this,0,this.buttonPressed?1:0);i.intersectionData=e,i.pointerRay=this.pointerRay,e.geomItem!=this.pointerOverItem&&(this.pointerOverItem&&(i.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(i),i.propagating&&this.xrvp.emit("pointerLeaveGeom",i)),i.propagating=!0,this.pointerOverItem=e.geomItem,this.pointerOverItem.onPointerEnter(i),i.propagating&&this.xrvp.emit("pointerOverGeom",i)),e.geomItem.onPointerMove(i)}else if(this.pointerOverItem){const i=new nI(this.xrvp,this,0,this.buttonPressed?1:0);i.pointerRay=this.pointerRay,i.leftGeometry=this.pointerOverItem,this.pointerOverItem.onPointerLeave(i),this.pointerOverItem=null}}this.inputSource.gamepad.buttons.forEach((e,i)=>{if(i!=0){if(e.pressed&&!this.pressedButtons[i]){this.pressedButtons[i]=!0;const s=new nI(this.xrvp,this,i,1);s.intersectionData=this.getGeomItemAtTip(),s.pointerRay=this.pointerRay,this.emit("buttonPressed",s)}else if(!e.pressed&&this.pressedButtons[i]){this.pressedButtons[i]=!1;const s=new nI(this.xrvp,this,i,0);this.emit("buttonReleased",s)}}}),this.tick++}}getGeomItemAtTip(){if(this.hitTested)return this.intersectionData;if(this.hitTested=!0,this.raycastDist==0)return null;const A=this.xrvp.getRenderer(),g=this.tipItem.globalXfoParam.value.clone();g.sc.set(1,1,1),this.pointerRay.start=g.tr,this.pointerRay.dir=g.ori.getZaxis().negate();const I=this.raycastDist*this.xrvp.stageScale,C=this.raycastArea*this.xrvp.stageScale;return(I!=this.raycastDistCache||C!=this.raycastAreaCache)&&(this.rayCastRenderTargetProjMatrix.setOrthographicMatrix(C*-.5,C*.5,C*-.5,C*.5,0,I),this.raycastDistCache=I,this.raycastAreaCache=C),this.intersectionData=A.raycastWithProjection(g,this.rayCastRenderTargetProjMatrix,this.pointerRay),this.intersectionData}}class Qd extends ft{constructor(A){super();this.listenerIDs={},this.__controllerTriggersHeld=[],this.xrvp=A,this.vrControllerToolTip=new _I(.02*.75),this.vrControllerToolTipMat=new wA("Cross","FlatSurfaceShader"),this.vrControllerToolTipMat.getParameter("BaseColor").value=new W("#03E3AC"),this.listenerIDs={}}addIconToController(A){const g=new gA("HandleToolTip",this.vrControllerToolTip,this.vrControllerToolTipMat);g.setSelectable(!1),A.getTipItem().removeAllChildren(),A.getTipItem().addChild(g,!1)}activateTool(){super.activateTool();for(const A of this.xrvp.getControllers())this.addIconToController(A);this.listenerIDs.controllerAdded=this.xrvp.on("controllerAdded",A=>{this.addIconToController(A.controller)})}deactivateTool(){super.deactivateTool();for(const A of this.xrvp.getControllers())A.getTipItem().removeAllChildren();this.xrvp.removeListenerById("controllerAdded",this.listenerIDs.controllerAdded)}__initMoveStage(){if(this.__controllerTriggersHeld.length==1)this.__grabPos=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr.clone(),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__invOri=this.stageXfo__GrabStart.ori.inverse();else if(this.__controllerTriggersHeld.length==2){const A=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,g=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr;this.__grabDir=g.subtract(A),this.__grabPos=A.lerp(g,.5),this.__grabDir.y=0,this.__grabDist=this.__grabDir.length(),this.__grabDir.scaleInPlace(1/this.__grabDist),this.stageXfo__GrabStart=this.xrvp.getXfo().clone(),this.__grab_to_stage=this.__grabPos.subtract(this.stageXfo__GrabStart.tr)}}onVRControllerButtonDown(A){if(A.button!=0)return;this.__controllerTriggersHeld.indexOf(A.controller)==-1&&(this.__controllerTriggersHeld.push(A.controller),this.__initMoveStage(),A.stopPropagation())}onVRControllerButtonUp(A){if(A.button!=0)return;const g=this.__controllerTriggersHeld.indexOf(A.controller);g!=-1&&(this.__controllerTriggersHeld.splice(g,1),this.__initMoveStage(),A.stopPropagation())}onVRControllerDoubleClicked(A){console.log("onVRControllerDoubleClicked:",this.__controllerTriggersHeld.length);const g=this.xrvp.getXfo().clone();g.sc.set(1,1,1),this.xrvp.setXfo(g)}onVRPoseChanged(A){if(this.__controllerTriggersHeld.length==1){const g=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,I=new D;I.tr=this.__grabPos.subtract(g);const C=this.stageXfo__GrabStart.multiply(I);this.xrvp.setXfo(C)}else if(this.__controllerTriggersHeld.length==2){const g=this.__controllerTriggersHeld[0].getControllerTipStageLocalXfo().tr,I=this.__controllerTriggersHeld[1].getControllerTipStageLocalXfo().tr,C=g.lerp(I,.5),e=I.subtract(g);e.y=0;const i=e.length();if(i<1e-4)return;e.scaleInPlace(1/i);const s=new D,o=Math.max(Math.min(this.__grabDist/i,10),.1);s.sc.set(o,o,o);let a=this.__grabDir.angleTo(e);this.__grabDir.cross(e).y>0&&(a=-a),s.ori.rotateY(a);const n=s.ori.rotateVec3(this.__grabPos);s.tr.addInPlace(this.__grabPos.subtract(n));const B=this.__grabPos.scale(1-o);s.tr.addInPlace(s.ori.rotateVec3(B));const d=this.__grabPos.subtract(C).scale(o);s.tr.addInPlace(s.ori.rotateVec3(d));const l=this.stageXfo__GrabStart.multiply(s);this.xrvp.setXfo(l)}}onPointerDown(A){A.pointerType===DA.xr&&this.onVRControllerButtonDown(A)}onPointerMove(A){A.pointerType===DA.xr&&this.onVRPoseChanged(A)}onPointerUp(A){A.pointerType===DA.xr&&this.onVRControllerButtonUp(A)}onPointerDoublePress(A){A.pointerType===DA.xr&&this.onVRControllerDoubleClicked(A)}}class ud extends Po{constructor(A,g){super(A);this.viewXfo=new D,this.stageXfo=new D,this.invStageMatrix=new NA,this.session=null,this.hmd="",this.region=[],this.projectionMatrices=[],this.viewMatrices=[],this.cameraMatrices=[],this.___sessionMode="immersive-vr",this.doubleClickTimeParam.value=300,this.___sessionMode=g,this.projectionMatricesUpdated=!1,this.stageTreeItem=new L("VRStage"),this.stageTreeItem.setVisible(!1),this.__renderer.addTreeItem(this.stageTreeItem),this.xrhead=new Gd(this,this.stageTreeItem),this.controllersMap={},this.controllers=[],this.controllerPointerDownTime=[],this.spectatorMode=!1,this.tick=0;const I=new D;I.ori.setFromAxisAndAngle(new f(1,0,0),Math.PI*.5),this.setXfo(I),this.setManipulator(new Qd(this))}getRenderer(){return this.renderer}getAsset(){return this.vrAsset}getTreeItem(){return this.stageTreeItem}getVRHead(){return this.xrhead}getXfo(){return this.stageXfo}setXfo(A){this.stageXfo=A,this.stageTreeItem.globalXfoParam.value=A,this.invStageMatrix=A.inverse().toMat4(),this.stageScale=A.sc.x}getControllers(){return this.controllers}getHMDName(){return this.hmd}isPresenting(){return this.session!=null}setSpectatorMode(A){if(!A){const g=this.__renderer.gl;g.bindFramebuffer(g.FRAMEBUFFER,null),g.viewport(0,0,g.drawingBufferWidth,g.drawingBufferHeight);let I=this.backgroundColorParam.value.asArray();g.clearColor(I[0],I[1],I[2],I[3]),g.colorMask(!0,!0,!0,!0),g.clear(g.COLOR_BUFFER_BIT|g.DEPTH_BUFFER_BIT)}this.spectatorMode=A}__startSession(){const A=(g,I)=>{this.session&&(this.session.requestAnimationFrame(A),this.drawXRFrame(I))};this.session.requestAnimationFrame(A)}loadHMDResources(){if(vA.isMobileDevice)return Promise.resolve(null);let A=localStorage.getItem("ZeaEngine_XRDevice");if(A||(A="Oculus",localStorage.setItem("ZeaEngine_XRDevice",A)),this.hmd!=A)this.hmdAssetPromise=void 0;else if(this.hmdAssetPromise)return this.hmdAssetPromise;return this.hmd=A,this.hmdAssetPromise=new Promise((g,I)=>{{let C;switch(A){case"Vive":C="ZeaEngine/Vive.vla";break;case"Oculus":C="ZeaEngine/Oculus.vla";break;default:C="ZeaEngine/Vive.vla";break}if(!AA.commonResources[C]){const i=new Lo(C);i.load(AA.systemUrls[C]),AA.commonResources[C]=i}this.vrAsset=AA.getCommonResource(C);const e=()=>{const i=this.vrAsset.getMaterialLibrary(),s=i.getMaterialNames();for(const o of s){const a=i.getMaterial(o,!1);a&&a.setShaderName("SimpleSurfaceShader")}this.vrAsset.traverse(o=>{o.setSelectable(!1)}),g(this.vrAsset)};this.vrAsset.isLoaded()?e():this.vrAsset.once("loaded",e)}}),this.hmdAssetPromise}startPresenting(){return new Promise((A,g)=>{this.spectatorMode||this.setSpectatorMode(!1);const I={};this.___sessionMode=="immersive-ar"&&(I.requiredFeatures=["local-floor"],I.optionalFeatures=["bounded-floor"]),(()=>{navigator.xr.requestSession(this.___sessionMode,I).then(e=>{e.isImmersive=!0;const i=this.__renderer.getViewport();if(i){const r=i.getCamera().globalXfoParam.value,c=new D;this.___sessionMode=="immersive-vr"&&(c.tr=r.tr.clone(),c.tr.z-=1.3);const h=r.ori.getZaxis();h.z=0,h.normalizeInPlace(),c.ori.setFromDirectionAndUpvector(h,new f(0,0,1)),this.setXfo(c)}e.addEventListener("end",l=>{this.stageTreeItem.setVisible(!1),this.session=null,this.emit("presentingChanged",new Ti(!1))});const s=l=>{const r=this.controllersMap[l.inputSource.handedness];r&&(r.buttonPressed=!0,this.onPointerDown(new nI(this,r,0,1)))},o=l=>{const r=this.controllersMap[l.inputSource.handedness];r&&(r.buttonPressed=!1,this.onPointerUp(new nI(this,r,0,0)))},a=l=>{console.log("creating controller:",l.handedness,l.profiles);const r=this.controllers.length,c=new Ed(this,l,r);this.controllersMap[l.handedness]=c,this.controllers[r]=c;const h=new mn(c);return this.emit("controllerAdded",h),c},n=l=>{for(const r of l.added)r.profiles.length!=0&&(r.profiles[0]=="generic-touchscreen"||a(r))};e.addEventListener("selectstart",s),e.addEventListener("selectend",o),e.addEventListener("inputsourceschange",n),this.session=e;const B=new XRWebGLLayer(e,this.__gl);e.updateRenderState({baseLayer:B}),this.__width=B.framebufferWidth,this.__height=B.framebufferHeight,this.region=[0,0,this.__width,this.__height],this.depthRange=[e.renderState.depthNear,e.renderState.depthFar],this.resizeRenderTargets(this.__width,this.__height);const d=l=>{this.refSpace=l,this.stageTreeItem.setVisible(!0),this.emit("presentingChanged",new Ti(!0)),this.___sessionMode=="immersive-vr"?this.loadHMDResources().then(()=>{this.__startSession(),A()}):(this.__startSession(),A())};e.requestReferenceSpace(vA.isMobileDevice?"local":"bounded-floor").catch(l=>{console.log("Falling back to local-floor reference space"),e.requestReferenceSpace("local-floor").then(d)}).then(l=>{d(l)}).catch(l=>{console.warn(l.message),g(new Error("Unable to start XR Session:"+l.message))})}).catch(e=>{console.warn(e.message)})})()})}stopPresenting(){!this.session||this.session.end()}togglePresenting(){this.session?this.stopPresenting():this.startPresenting()}updateControllers(A){const g=this.session.inputSources;for(let I=0;I<g.length;I++){const C=g[I];if(C.profiles.length==0)return;if(!this.controllers[I]){console.warn("Missing controller");continue}this.controllers[I].updatePose(this.refSpace,A,C)}}initCullingRenderState(A){A.viewXfo=this.viewXfo,A.viewScale=1,A.region=this.region,A.cameraMatrix=A.viewXfo.toMat4(),A.viewport=this,A.viewports=[{region:this.region,viewMatrix:A.cameraMatrix.inverse(),isOrthographic:0}]}drawXRFrame(A){const g=A.session,I=g.renderState.baseLayer,C=A.getViewerPose(this.refSpace);if(!C)return;const e=C.views;if(!this.projectionMatricesUpdated){this.projectionMatrices=[],this.viewMatrices=[],this.cameraMatrices=[];for(let n=0;n<e.length;n++){const B=e[n],d=new NA;d.setDataArray(B.projectionMatrix),this.projectionMatrices[n]=d,this.viewMatrices[n]=new NA,this.cameraMatrices[n]=new NA}this.projectionMatricesUpdated=!0}const i=this.__renderer.gl;this.depthRange=[g.renderState.depthNear,g.renderState.depthFar];const s=new Gg(this.__renderer.gl);s.boundRendertarget=I.framebuffer,s.region=this.region,s.viewport=this,s.vrviewport=this,s.viewports=[];for(let n=0;n<e.length;n++){const B=e[n];this.viewMatrices[n].setDataArray(B.transform.inverse.matrix),this.viewMatrices[n].multiplyInPlace(this.invStageMatrix);const d=I.getViewport(B);s.viewports.push({viewMatrix:this.viewMatrices[n],projectionMatrix:this.projectionMatrices[n],region:[d.x,d.y,d.width,d.height],isOrthographic:0})}this.xrhead.update(C);const o=this.xrhead.getTreeItem().globalXfoParam.value;if(this.viewXfo=o,s.viewXfo=o,s.cameraMatrix=o.toMat4(),s.viewScale=this.stageScale,s.region=this.region,s.vrPresenting=!0,this.___sessionMode=="immersive-vr"){this.updateControllers(A);let n=this.backgroundColorParam.value.asArray();i.clearColor(n[0],n[1],n[2],n[3]),i.colorMask(!0,!0,!0,!0),i.clear(i.COLOR_BUFFER_BIT|i.DEPTH_BUFFER_BIT)}if(this.draw(s),this.___sessionMode=="immersive-vr"){const n=new Vn(this,this.viewXfo,this.controllers);n.getCapture()&&n.getCapture().onPointerMove(n),this.manipulator&&n.propagating&&this.manipulator.onPointerMove(n)}const a=new wn(s.viewXfo);if(a.hmd=this.hmd,a.controllers=this.controllers,a.viewport=this,a.vrviewport=this,this.emit("viewChanged",a),this.spectatorMode&&!vA.isMobileDevice&&this.tick%5==0){const n=this.__renderer.getViewport();if(n){this.xrhead.setVisible(!0);const B=new Gg(this.renderer.__gl);n.draw(B),this.xrhead.setVisible(!1)}}this.tick++}onPointerDown(A){A.intersectionData=A.controller.getGeomItemAtTip(),A.pointerRay=A.controller.pointerRay;const g=Date.now();g-this.controllerPointerDownTime[A.controller.id]<this.doubleClickTimeParam.value&&(this.emit("pointerDoublePressed",A),!A.propagating||this.manipulator&&(this.manipulator.onPointerDoublePress(A),!A.propagating))||(this.controllerPointerDownTime[A.controller.id]=g,!(A.getCapture()&&(A.getCapture().onPointerDown(A),!A.propagating))&&(A.intersectionData!=null&&(A.intersectionData.geomItem.onPointerDown(A),!A.propagating)||(this.emit("pointerDown",A),!!A.propagating&&this.manipulator&&this.manipulator.onPointerDown(A))))}onPointerUp(A){this.controllerPointerDownTime[A.controller.id]=0,A.pointerRay=A.controller.pointerRay,!(A.getCapture()&&(A.getCapture().onPointerUp(A),!A.propagating))&&(A.intersectionData=A.controller.getGeomItemAtTip(),!(A.intersectionData!=null&&(A.intersectionData.geomItem.onPointerUp(A),!A.propagating))&&(this.emit("pointerUp",A),!!A.propagating&&this.manipulator&&(this.manipulator.onPointerUp(A),A.propagating)))}}class ii extends Ct{constructor(A){super();this.dirty=!1,this.unif=A}bind(A){}unbind(A){}destroy(){}}class bd extends ii{constructor(A,g,I,C,e){super(C);this.gltexture=null,this.textureType=-1;const i=I.getName();switch(this.param=I,this.unif=C,this.textureUnif=e[i+"Tex"],this.textureTypeUnif=e[i+"TexType"],this.uniform1i=A.uniform1i.bind(A),this.unif.type){case"Boolean":this.uniformXX=A.uniform1i.bind(A);break;case"UInt32":A.name=="webgl2"?this.uniformXX=A.uniform1ui.bind(A):this.uniformXX=A.uniform1i.bind(A);break;case"SInt32":this.uniformXX=A.uniform1i.bind(A);break;case"Float32":this.uniformXX=A.uniform1f.bind(A);break}this.bind=this.bindValue;const s=n=>{let B=KA.getCachedGLTexture2D(n);const d=1;B||(n.type==="FLOAT"?B=new OC(A,n):B=new KA(A,n),KA.setCachedGLTexture2D(n,B)),this.texBinding=B.preBind(this.textureUnif,e),B.on("updated",()=>{g.emit("updated")}),this.gltexture=B,this.gltexture.addRef(this),this.textureType=d,this.bind=this.bindTexture,g.emit("updated")};let o,a;if(this.update=()=>{try{o||(typeof I.value=="boolean"?this.val=I.value?1:0:this.val=I.value)}catch{}g.emit("updated")},I instanceof PA){const n=d=>{d.isLoaded()?s(d):a=d.on("loaded",()=>{s(o)}),o=d},B=()=>{KA.getCachedGLTexture2D(o).removeRef(this),this.texBinding=null,this.gltexture=null,this.textureType=-1,this.bind=this.bindValue,a&&o.removeListenerById("loaded",a),o=null,a=null,g.emit("updated")};I.getImage()&&n(I.getImage()),I.on("textureConnected",()=>{n(I.getImage())}),I.on("textureDisconnected",()=>{B()})}this.dirty=!0,I.on("valueChanged",()=>{this.dirty=!0,g.emit("updated")})}bindValue(A){this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniformXX(this.unif.location,this.val),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0)}bindTexture(A){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(A,this.textureUnif,this.texBinding)}}class yd extends ii{constructor(A,g,I,C){super(C);switch(this.param=I,this.unif.type){case"Vec2":this.uniformXX=A.uniform2fv.bind(A);break;case"Vec3":this.uniformXX=A.uniform3fv.bind(A);break;case"Vec4":this.uniformXX=A.uniform4fv.bind(A);break}this.dirty=!0,I.on("valueChanged",()=>{this.dirty=!0,g.emit("updated")})}bind(A){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformXX(this.unif.location,this.values)}unbind(){}destroy(){}}class Zd extends ii{constructor(A,g,I,C){super(C);switch(this.values=new Float32Array(0),this.param=I,this.unif.type){case"Mat3":this.uniformMatrixXXX=A.uniformMatrix3fv.bind(A);break;case"Mat4":this.uniformMatrixXXX=A.uniformMatrix4fv.bind(A);break}this.dirty=!0,I.on("valueChanged",()=>{this.dirty=!0,g.emit("updated")})}bind(A){this.dirty&&(this.values=this.param.value.asArray(),this.dirty=!1),this.uniformMatrixXXX(this.unif.location,!1,this.values)}unbind(){}destroy(){}}class Vs extends ii{constructor(A,g,I,C,e){super(C);const i=I.getName();this.param=I,this.textureUnif=e[i+"Tex"],this.textureTypeUnif=e[i+"TexType"],this.values=Float32Array.from([0,0,0,0]),this.bind=this.bindValue;const s=d=>{o=d;let l=KA.getCachedGLTexture2D(d);const r=1;l||(d.type==="FLOAT"?l=new OC(A,d):l=new KA(A,d),KA.setCachedGLTexture2D(d,l)),this.texBinding=l.preBind(this.textureUnif,e),l.on("updated",()=>{g.emit("updated")}),this.gltexture=l,this.gltexture.addRef(this),this.textureType=r,this.bind=this.bindTexture,g.emit("updated")};let o,a;const n=d=>{d.isLoaded()?s(d):a=d.once("loaded",()=>{s(d)})},B=()=>{this.gltexture.removeRef(this),this.gltexture=null,this.texBinding=null,this.textureType=null,a&&o.removeListenerById("loaded",a),this.bind=this.bindValue,o=null,a=null,g.emit("updated")};this.update=()=>{try{o||this.unif&&(I instanceof VA&&I.colorSpace==cg.Gamma?this.values=I.value.toLinear().asArray():this.values=I.value.asArray())}catch{}g.emit("updated")},I instanceof VA&&(I.getImage()&&n(I.getImage()),I.on("textureConnected",()=>{n(I.getImage())}),I.on("textureDisconnected",()=>{B()})),this.dirty=!0,I.on("valueChanged",()=>{this.dirty=!0}),this.uniform1i=A.uniform1i.bind(A),this.uniform4fv=A.uniform4fv.bind(A)}bindValue(A){!this.unif||(this.dirty&&(this.update(),this.dirty=!1),this.unif&&this.uniform4fv(this.unif.location,this.values),this.textureTypeUnif&&this.uniform1i(this.textureTypeUnif.location,0))}bindTexture(A){this.dirty&&(this.update(),this.dirty=!1),this.gltexture.bindToUniform(A,this.textureUnif,this.texBinding)}}const se={};class Rd{constructor(A,g,I,C){this.uniformBindings=[];const e=s=>{const o=s.getName(),a=I[o];if(a==null){if(I[o+"Tex"]){this.uniformBindings.push(new Vs(A,g,s,a,I));return}if(C){const B=g.getMaterial().getShaderName();se[B]||(se[B]={}),se[B][o]||(console.warn("Material:"+g.getMaterial().getName(),"with Shader ",B,"Param has no unif",o),se[B][o]=!0)}return}switch(a.type){case"Boolean":case"UInt32":case"SInt32":case"Float32":this.uniformBindings.push(new bd(A,g,s,a,I));break;case"Vec2":case"Vec3":case"Vec4":this.uniformBindings.push(new yd(A,g,s,a));break;case"Color":this.uniformBindings.push(new Vs(A,g,s,a,I));break;case"Mat4":this.uniformBindings.push(new Zd(A,g,s,a));break;default:console.warn("Param :"+o+" has unhandled data type:"+a.type);return}},i=g.getMaterial().getParameters();for(const s of i)e(s)}bind(A){for(const g of this.uniformBindings)g.bind(A);return!0}unbind(A){for(const g of this.uniformBindings)g.unbind(A)}destroy(){for(const A of this.uniformBindings)A.destroy()}}class fd extends FA{constructor(A,g,I){super();this.__gl=A,this.__material=g,this.__glshader=I,this.__shaderBindings={},g.on("parameterValueChanged",()=>this.emit("updated"))}getMaterial(){return this.__material}getGLShader(){return this.__glshader}bind(A,g){this.__boundTexturesBeforeMaterial=A.boundTextures;let I=this.__shaderBindings[A.shaderkey];if(!I){const C=this.__gl;I=new Rd(C,this,A.unifs,g),this.__shaderBindings[A.shaderkey]=I}I.bind(A)}unbind(A){A.boundTextures=this.__boundTexturesBeforeMaterial}}class wd extends FA{constructor(A){super();this.materials=[],this.materialIndices={},this.glMaterials={},this.refCounts=[],this.freeIndices=[],this.dirtyIndices=new Set,this.materialsAllocator=new QC,this.renderer=A,this.materialsAllocator.on("dataReallocated",g=>{const I=g.id;this.dirtyIndices.add(I)})}addMaterial(A){let g=this.materialIndices[A.getId()];if(g!=null)return this.refCounts[g]++,g;this.freeIndices.length?g=this.freeIndices.pop():g=this.materials.length,this.materials[g]=A,this.refCounts[g]=1,this.materialIndices[A.getId()]=g;const I=A.getShaderClass().getPackedMaterialData(A);this.materialsAllocator.allocate(g,I.length/4);const C=()=>{this.dirtyIndices.add(g),this.emit("updated")};return A.on("parameterValueChanged",C),this.dirtyIndices.add(g),g}getGLMaterial(A){if(this.glMaterials[A.getId()])return this.glMaterials[A.getId()];const g=this.renderer.getOrCreateShader(A.getShaderName()),I=this.renderer.gl,C=new fd(I,A,g);return C.on("updated",()=>{this.renderer.requestRedraw()}),A.setMetadata("glMaterial",C),this.glMaterials[A.getId()]=C,C}getMaterialAllocation(A){const g=this.materialIndices[A.getId()];if(g!=null)return this.materialsAllocator.getAllocation(g)}removeMaterial(A){const g=this.materialIndices[A.getId()];this.refCounts[g]--,!(this.refCounts[g]>0)&&(this.freeIndices.push(g),this.materialsAllocator.deallocate(g),this.materials[g]=null,delete this.materialIndices[A.getId()],this.dirtyIndices.has(g)&&this.dirtyIndices.delete(g))}uploadMaterials(A){const g=this.renderer.__gl,I=P.nextPow2(Math.ceil(Math.sqrt(this.materialsAllocator.reservedSpace))),C=A.boundTextures++;if(g.activeTexture(g.TEXTURE0+C),!this.materialsTexture)this.materialsTexture=new KA(this.renderer.__gl,{format:"RGBA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.materialsTexture.clear();else if(this.materialsTexture.width<I){this.materialsTexture.resize(I,I);for(let s=0;s<this.materials.length;s++)this.materialsAllocator.getAllocation(s)&&this.dirtyIndices.add(s)}const e=this.materialsTexture,i=this.materialsTexture.width;g.bindTexture(g.TEXTURE_2D,e.glTex),this.dirtyIndices.forEach(s=>{const o=this.materialsAllocator.getAllocation(s),a=this.materials[s],n=a.getShaderClass().getPackedMaterialData(a),B=0,d=o.start%i,l=1,r=Math.ceil((d+o.size)/i);let c=0,h=o.size,E=d;for(let b=0;b<r;b++){let m;E+h>i?(m=i-E,E=0):m=h;const G=(o.start+c)%i,y=Math.floor((o.start+c)/i),Q=n.subarray(c*4,(c+m)*4);g.texSubImage2D(g.TEXTURE_2D,B,G,y,m,l,e.getFormat(),e.getType(),Q),c+=m,h-=m}}),this.dirtyIndices=new Set,g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--}update(A){this.dirtyIndices.size>0&&this.uploadMaterials(A)}bind(A){if(this.dirtyIndices.size>0&&this.uploadMaterials(A),!this.materialsTexture)return!1;const{materialsTexture:g,materialsTextureSize:I}=A.unifs;return g&&(this.materialsTexture.bindToUniform(A,g),I&&this.renderer.gl.uniform2i(I.location,this.materialsTexture.width,this.materialsTexture.height)),!0}}class Vd extends St{constructor(A,g){super(A,g);this.__numVertices=9,this.__vboState=-1,this.genBuffers()}genBuffers(A){super.genBuffers(A);const g=this.__gl,I=this.__geom.genBuffers();for(const C in I.attrBuffers){const e=I.attrBuffers[C],i=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,i),g.bufferData(g.ARRAY_BUFFER,e.values,g.STATIC_DRAW),this.__glattrbuffers[C]={buffer:i,dataType:e.dataType,normalized:e.normalized}}this.__numVertices=I.numVertices,this.__vboState=2}updateBuffers(A){const g=this.__gl,I=this.__geom.genBuffers(),C=I.numVertices!=this.__numVertices;for(const e in I.attrBuffers){const i=I.attrBuffers[e],s=this.__glattrbuffers[e];C&&(g.deleteBuffer(s.buffer),s.buffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,s.buffer),g.bufferData(g.ARRAY_BUFFER,i.values,g.STATIC_DRAW)}this.__numVertices=I.numVertices}bind(A){if(A.unifs.PointSize){const g=this.__gl;let I=this.__shaderBindings[A.shaderkey];if(!I){g.__quadVertexIdsBuffer||g.setupInstancedQuad();const C=Object.assign(this.__glattrbuffers,g.__quadattrbuffers);I=dg(this.__gl,A.attrs,C,g.__quadIndexBuffer),this.__shaderBindings[A.shaderkey]=I}return I.bind(A),!0}else return super.bind(A),!0}draw(A){const g=this.__gl;A.unifs.PointSize?g.drawElementsInstanced(g.TRIANGLES,6,g.UNSIGNED_SHORT,0,this.__numVertices):g.drawArrays(g.POINTS,0,this.__numVertices)}drawInstanced(A,g){this.__gl.drawArraysInstanced(this.__gl.POINTS,0,this.__numVertices,g)}}class Oo extends St{constructor(A,g){super(A,g);this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!1,this.fatBuffers=null,this.__buffersNeedUpload=!1,this.__indexDataType=0,this.__numSegIndices=0,this.__numVertices=0,this.__fatBuffersNeedUpload=!0}dirtyBuffers(A){super.dirtyBuffers(A),this.__fatBuffersNeedUpload=!0,this.emit("updated")}clearBuffers(){const A=this.__gl;if(A.deleteBuffer(this.__indexBuffer),this.__indexBuffer=null,this.fatBuffers&&this.fatBuffers.positionsTexture){this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null);const g=this.fatBuffers.glattrbuffers.segmentIndices;g.buffer&&(A.deleteBuffer(g.buffer),this.fatBuffers.glattrbuffers.segmentIndices=null)}super.clearBuffers()}genFatBuffers(A){const g=this.__gl,I=this.__geom.genBuffers(),C=I.indices,e=I.numVertices!=this.__numVertices;g.__quadVertexIdsBuffer||g.setupInstancedQuad(),this.fatBuffers||(this.fatBuffers={drawCount:0,positionsTexture:null,glattrbuffers:{}},this.fatBuffers.glattrbuffers.vertexIDs=g.__quadattrbuffers.vertexIDs);const i=A.boundTextures++;g.activeTexture(this.__gl.TEXTURE0+i),this.fatBuffers.drawCount=C.length/2;const s=this.__geom.getVertexAttributes(),o=s.positions,a=s.lineThickness,n=4,B=new Float32Array(o.getCount()*n);for(let l=0;l<o.getCount();l++)new f(new Float32Array(B.buffer,l*n*4,3)).setFromOther(o.getValueRef(l)),a?B[l*4+3]=a.getFloat32Value(l):B[l*4+3]=1;e&&this.fatBuffers.positionsTexture&&(this.fatBuffers.positionsTexture.destroy(),this.fatBuffers.positionsTexture=null),this.fatBuffers.positionsTexture?this.fatBuffers.positionsTexture.bufferData(B,o.getCount(),1):this.fatBuffers.positionsTexture=new KA(this.__gl,{format:"RGBA",type:"FLOAT",width:o.getCount(),height:1,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",data:B,mipMapped:!1});const d=()=>{const l=new Float32Array(C.length);for(let r=0;r<C.length;r++){let c;r%2==0?c=r>0?C[r]==C[r-1]:C[r]==C[C.length-1]:c=r<C.length-1?C[r]==C[r+1]:C[r]==C[0],l[r]=(c?1:0)+C[r]*2}return l};if(this.fatBuffers.glattrbuffers.segmentIndices)(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(g.bindBuffer(g.ARRAY_BUFFER,this.fatBuffers.glattrbuffers.segmentIndices.buffer),g.bufferData(g.ARRAY_BUFFER,d(),g.STATIC_DRAW));else{const l=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,l),g.bufferData(g.ARRAY_BUFFER,d(),g.STATIC_DRAW),this.fatBuffers.glattrbuffers.segmentIndices={buffer:l,dimension:2,dataType:"Vec2"}}this.__numSegIndices=C.length,this.__numVertices=I.numVertices,g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--,this.__fatBuffersNeedUpload=!1}genBuffers(A){const g=this.__gl,I=this.__geom.genBuffers(),C=I.indices,e=I.numVertices!=this.__numVertices;{this.__indexBuffer?(!this.genBufferOpts||this.genBufferOpts&&this.genBufferOpts.topologyChanged)&&(this.__numSegIndices!=C.length&&(g.deleteBuffer(this.__indexBuffer),this.__indexBuffer=g.createBuffer()),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,C,g.STATIC_DRAW),this.__numSegIndices=C.length):(this.__indexBuffer=g.createBuffer(),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.__indexBuffer),g.bufferData(g.ELEMENT_ARRAY_BUFFER,C,g.STATIC_DRAW));for(const i in I.attrBuffers){const s=I.attrBuffers[i];if(this.__glattrbuffers[i]){const o=this.__glattrbuffers[i];e&&(g.deleteBuffer(o.buffer),o.buffer=g.createBuffer()),g.bindBuffer(g.ARRAY_BUFFER,o.buffer),g.bufferData(g.ARRAY_BUFFER,s.values,g.STATIC_DRAW)}else{const o=g.createBuffer();g.bindBuffer(g.ARRAY_BUFFER,o),g.bufferData(g.ARRAY_BUFFER,s.values,g.STATIC_DRAW),this.__glattrbuffers[i]={buffer:o,dataType:s.dataType,normalized:s.normalized}}}this.__numSegIndices=C.length,this.__numVertices=I.numVertices,this.__buffersNeedUpload=!1}C instanceof Uint8Array&&(this.__indexDataType=this.__gl.UNSIGNED_BYTE),C instanceof Uint16Array&&(this.__indexDataType=this.__gl.UNSIGNED_SHORT),C instanceof Uint32Array&&(this.__indexDataType=this.__gl.UNSIGNED_INT)}bind(A){const g=this.__gl,I=A.unifs;if(I.LineThickness&&g.floatTexturesSupported){this.__fatBuffersNeedUpload&&this.genFatBuffers(A);const C=this.fatBuffers;let e=this.__shaderBindings[A.shaderkey];return e||(e=dg(this.__gl,A.attrs,C.glattrbuffers,g.__quadIndexBuffer),this.__shaderBindings[A.shaderkey]=e),e.bind(A),I.positionsTexture&&(C.positionsTexture.bindToUniform(A,I.positionsTexture),g.uniform1i(I.positionsTextureSize.location,C.positionsTexture.width)),!0}else return super.bind(A),!0}drawPoints(){this.__gl.drawArrays(this.__gl.POINTS,0,this.__geom.numVertices())}draw(A){const g=this.__gl;A.unifs.LineThickness&&g.floatTexturesSupported?g.drawElementsInstanced(g.TRIANGLES,6,g.UNSIGNED_SHORT,0,this.fatBuffers.drawCount):g.drawElements(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0)}drawInstanced(A,g){const I=this.__gl,{occluded:C}=A.unifs;C&&I.uniform1i(C.location,0),I.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,g),C&&(I.uniform1i(C.location,1),I.depthFunc(I.GREATER),I.drawElementsInstanced(this.__gl.LINES,this.__numSegIndices,this.__indexDataType,0,g),I.depthFunc(I.LEQUAL))}}const oe=(t,A)=>{const g=new Int32Array(A);return g.set(t),g};class Sd extends FA{constructor(A){super();this.shaderAttrSpec={},this.freeGeomIndices=[],this.geoms=[],this.geomRefCounts=[],this.geomsDict={},this.glGeomsDict={},this.geomBuffersTmp=[],this.glattrbuffers={},this.shaderBindings={},this.attributesBufferNeedsRealloc=!1,this.attributesBufferNeedsAlloc=[],this.attributesAllocator=new QC,this.dirtyGeomIndices=new Set,this.geomVertexOffsets=new Int32Array(1),this.geomVertexCounts=new Int32Array(1),this.numIndices=0,this.indicesBufferNeedsRealloc=!1,this.indicesAllocator=new QC,this.indicesCounts=new Int32Array(1),this.indicesOffsets=new Int32Array(1),this.indexBuffer=null,this.freeDataAfterUpload=!0,this.__destroyed=!1,this.renderer=A,this.__gl=A.gl,this.attributesAllocator.on("resized",()=>{this.attributesBufferNeedsRealloc=!0}),this.attributesAllocator.on("dataReallocated",I=>{const C=I.id,e=I.allocation;this.dirtyGeomIndices.add(C),this.geomVertexOffsets[C]=e.start,this.geomVertexCounts[C]=e.size}),this.freeGeomIndices.push(0),this.indicesAllocator.on("resized",()=>{this.indicesBufferNeedsRealloc=!0}),this.indicesAllocator.on("dataReallocated",I=>{const C=I.id;this.dirtyGeomIndices.add(C)});const g=Math.pow(2,23);this.attributesAllocator.reservedSpace=g,this.indicesAllocator.reservedSpace=g*4,this.attributesBufferNeedsRealloc=!0,this.indicesBufferNeedsRealloc=!0}constructGLGeom(A){let g=this.glGeomsDict[A.getId()];if(g!=null)return g;const I=this.__gl;if(A instanceof yI||A instanceof _g)g=new ei(I,A);else if(A instanceof lg||A instanceof pg)g=new Oo(I,A);else if(A instanceof bI||A instanceof ZI)g=new Vd(I,A);else throw new Error("Unsupported geom type:"+A.constructor.name);return this.glGeomsDict[A.getId()]=g,g.on("updated",()=>{this.renderer.requestRedraw()}),g.addRef(this),g}addGeom(A){let g=this.geomsDict[A.getId()];if(g!=null)return this.geomRefCounts[g]++,g;if(this.freeGeomIndices.length==0){const e=this.geomVertexCounts.length,i=e*2;this.geomVertexCounts=oe(this.geomVertexCounts,i),this.geomVertexOffsets=oe(this.geomVertexOffsets,i),this.indicesCounts=oe(this.indicesCounts,i),this.indicesOffsets=oe(this.indicesOffsets,i);for(let s=i-1;s>=e;s--)this.freeGeomIndices.push(s)}g=this.freeGeomIndices.pop(),this.geoms[g]=A,this.geomRefCounts[g]=1,this.geomsDict[A.getId()]=g,this.dirtyGeomIndices.add(g),this.geomVertexCounts[g]=0,this.geomVertexOffsets[g]=0,this.indicesCounts[g]=0,this.indicesOffsets[g]=0;const I=()=>{this.dirtyGeomIndices.add(g),this.emit("updated")},C=()=>{this.dirtyGeomIndices.add(g),this.emit("updated")};return A.on("geomDataChanged",I),A.on("geomDataTopologyChanged",C),g}removeGeom(A){const g=this.geomsDict[A.getId()];this.geomRefCounts[g]--,!(this.geomRefCounts[g]>0)&&(this.attributesAllocator.getAllocation(g)&&this.attributesAllocator.deallocate(g),this.indicesAllocator.getAllocation(g)&&this.indicesAllocator.deallocate(g),this.dirtyGeomIndices.has(g)&&this.dirtyGeomIndices.delete(g),this.geomVertexCounts[g]=0,this.geomVertexOffsets[g]=0,this.geoms[g]=null,this.freeGeomIndices.push(g),delete this.geomsDict[A.getId()],delete this.geomBuffersTmp[g],this.indicesCounts[g]=0,this.indicesOffsets[g]=0)}getGeom(A){return this.geoms[A]}getGeomOffsetAndCount(A){return[this.indicesOffsets[A],this.indicesCounts[A]]}getGeomBuffers(A){return this.geomBuffersTmp[A]}allocateBuffers(A){const g=this.geoms[A];if(!g)return;const I=g.genBuffers(),C=I.numRenderVerts?I.numRenderVerts:I.numVertices;if(this.geomVertexCounts[A]!=C)if(C==0)this.attributesAllocator.deallocate(A),this.geomVertexOffsets[A]=0,this.geomVertexCounts[A]=0;else{const e=this.attributesAllocator.allocate(A,C);this.geomVertexOffsets[A]=e.start,this.geomVertexCounts[A]=e.size}for(const e in I.attrBuffers)if(!this.shaderAttrSpec[e]){const i=I.attrBuffers[e],s=Vt(this.__gl,i.dataType);this.shaderAttrSpec[e]={dataType:i.dataType,normalized:i.normalized,dimension:s.dimension,elementSize:s.elementSize},this.attributesBufferNeedsAlloc.push(e)}if(I.indices){const e=I.indices.length;if(this.indicesCounts[A]!=e)if(e==0)this.indicesAllocator.deallocate(A),this.indicesOffsets[A]=0,this.indicesCounts[A]=0;else{const i=this.indicesAllocator.allocate(A,e),s=4;this.indicesOffsets[A]=i.start*s,this.indicesCounts[A]=i.size}}else this.indicesOffsets[A]=this.geomVertexOffsets[A],this.indicesCounts[A]=this.geomVertexCounts[A];this.geomBuffersTmp[A]=I}genAttributesBuffers(){for(const A in this.shaderAttrSpec)this.genAttributesBuffer(A);this.attributesBufferNeedsAlloc=[]}genAttributesBuffer(A){const g=this.attributesAllocator.reservedSpace,I=this.__gl;{const C=this.shaderAttrSpec[A],e=g*C.dimension,i=I.createBuffer();I.bindBuffer(I.ARRAY_BUFFER,i);const s=e*C.elementSize;I.bufferData(I.ARRAY_BUFFER,s,I.STATIC_DRAW),this.glattrbuffers[A]&&this.glattrbuffers[A].buffer&&(I.bindBuffer(I.COPY_WRITE_BUFFER,i),I.bindBuffer(I.COPY_READ_BUFFER,this.glattrbuffers[A].buffer),I.copyBufferSubData(I.COPY_READ_BUFFER,I.COPY_WRITE_BUFFER,0,0,this.glattrbuffers[A].length*C.elementSize),I.deleteBuffer(this.glattrbuffers[A].buffer)),C.numValues=e;const o=A=="textureCoords"?"texCoords":A;this.glattrbuffers[o]={buffer:i,dataType:C.dataType,normalized:C.normalized,length:e,dimension:C.dimension}}}genIndicesBuffers(){const A=this.indicesAllocator.reservedSpace;if(this.numIndices!=A){const g=this.__gl,I=g.createBuffer();g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,I);const C=4,e=A*C;g.bufferData(g.ELEMENT_ARRAY_BUFFER,e,g.STATIC_DRAW),this.indexBuffer&&(g.bindBuffer(g.COPY_WRITE_BUFFER,I),g.bindBuffer(g.COPY_READ_BUFFER,this.indexBuffer),g.copyBufferSubData(g.COPY_READ_BUFFER,g.COPY_WRITE_BUFFER,0,0,this.numIndices*C),g.deleteBuffer(this.indexBuffer)),this.indexBuffer=I,this.numIndices=A}}uploadBuffers(A){const g=this.__gl;let I=this.geomBuffersTmp[A];if(!I){const i=this.geoms[A];if(!i)return;I=i.genBuffers(),this.geomBuffersTmp[A]=I}const C=this.geomVertexCounts[A],e=I.numRenderVerts?I.numRenderVerts:I.numVertices;if(C!=e)throw new Error("Invalid allocation for this geom");if(e==0){const i=new as(A);this.emit("geomDataChanged",i);return}for(const i in I.attrBuffers){const s=this.shaderAttrSpec[i],o=I.attrBuffers[i],a=this.glattrbuffers[i];if(!o||!a)continue;g.bindBuffer(g.ARRAY_BUFFER,a.buffer);const n=s.elementSize,B=this.geomVertexOffsets[A]*n*s.dimension;g.bufferSubData(g.ARRAY_BUFFER,B,o.values)}if(g.bindBuffer(g.ARRAY_BUFFER,null),I.indices&&I.indices.length>0){const i=I.indices,s=this.indicesAllocator.getAllocation(A);if(s.size!=i.length)throw new Error("Invalid allocation for this geom");const o=this.attributesAllocator.getAllocation(A),a=new Uint32Array(s.size);for(let l=0;l<i.length;l++)a[l]=I.indices[l]+o.start;const n=this.__gl;n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,this.indexBuffer);const B=4,d=s.start*B;n.bufferSubData(n.ELEMENT_ARRAY_BUFFER,d,a),n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null)}this.emit("geomDataChanged",new as(A))}cleanGeomBuffers(){if(this.dirtyGeomIndices.forEach(A=>{this.allocateBuffers(A)}),this.attributesBufferNeedsRealloc||this.indicesBufferNeedsRealloc){for(const A in this.shaderBindings)this.shaderBindings[A].destroy();this.shaderBindings={},this.attributesBufferNeedsRealloc&&(this.genAttributesBuffers(),this.attributesBufferNeedsRealloc=!1),this.indicesBufferNeedsRealloc&&(this.genIndicesBuffers(),this.indicesBufferNeedsRealloc=!1)}else this.attributesBufferNeedsAlloc.length>0&&(this.attributesBufferNeedsAlloc.forEach(A=>{this.genAttributesBuffer(A)}),this.attributesBufferNeedsAlloc=[]);this.dirtyGeomIndices.forEach(A=>{this.uploadBuffers(A)}),this.dirtyGeomIndices=new Set}bind(A){this.dirtyGeomIndices.size>0&&this.cleanGeomBuffers();let g=this.shaderBindings[A.shaderkey];if(g)g.bind(A);else{const I=this.__gl;g=dg(I,A.attrs,this.glattrbuffers,this.indexBuffer),this.shaderBindings[A.shaderkey]=g;{const C=this.__gl;C.drawElements(C.POINTS,1,C.UNSIGNED_INT,0),C.drawElements(C.LINES,2,C.UNSIGNED_INT,0),C.drawElements(C.TRIANGLES,3,C.UNSIGNED_INT,0);const e=new Uint32Array(1),i=4,s=this.indicesAllocator.allocatedSpace*i;C.bufferSubData(C.ELEMENT_ARRAY_BUFFER,s,e)}}return!0}unbind(A){const g=this.shaderBindings[A.shaderkey];g&&g.unbind(A)}clearBuffers(){const A=this.__gl;for(const g in this.glattrbuffers){const I=this.glattrbuffers[g];I.shared||A.deleteBuffer(I.buffer)}this.glattrbuffers={},this.indexBuffer&&(A.deleteBuffer(this.indexBuffer),this.indexBuffer=null);for(const g in this.shaderBindings)this.shaderBindings[g].destroy();this.shaderBindings={}}destroy(){this.clearBuffers(),this.__destroyed=!0,this.emit("destructing")}}const DI={GEOMITEM_FLAG_CUTAWAY:1,GEOMITEM_INVISIBLE_IN_GEOMDATA:2,GEOMITEM_TRANSPARENT:4};class pd extends FA{constructor(A,g,I,C,e,i=!1){super();if(this.listenerIDs={},this.shattered=!1,this.culled=!1,this.cutDataChanged=!1,this.cutData=[],this.geomMatrixDirty=!1,this.gl=A,this.geomItem=g,this.geomItemId=I,this.geomId=C,this.materialId=e,this.supportInstancing=i,this.visible=this.geomItem.isVisible(),this.listenerIDs.visibilityChanged=this.geomItem.on("visibilityChanged",s=>{const o=!this.culled&&this.visible;this.visible=s.visible;const a=!this.culled&&this.visible;o!=a&&this.emit("visibilityChanged",new zi(a))}),g instanceof mI&&(this.shattered=g.shattered),this.listenerIDs.shatterStateChanged=this.geomItem.on("shatterStateChanged",s=>{this.shattered=s.state,this.emit("shatterStateChanged",s)}),!this.supportInstancing){this.cutDataChanged=!1,this.cutData=[0,0,0,0];const s=0;let o=0;this.geomItem.isCutawayEnabled()&&(o|=DI.GEOMITEM_FLAG_CUTAWAY),g.isSelectable()||(o|=DI.GEOMITEM_INVISIBLE_IN_GEOMDATA),g.materialParam.value.isOpaque()||(o|=DI.GEOMITEM_TRANSPARENT),this.geomData=[o,s,0,0],this.geomMatrixDirty=!0,this.listenerIDs["GeomMat.valueChanged"]=this.geomItem.geomMatParam.on("valueChanged",()=>{this.geomMatrixDirty=!0,this.emit("updated")}),this.listenerIDs.cutAwayChanged=this.geomItem.on("cutAwayChanged",()=>{this.cutDataChanged=!0,this.emit("updated")});const a=n=>{n.isOpaqueStateChanged&&(this.geomData[0],n.isOpaque,this.geomData[0],this.emit("updated"))};this.listenerIDs.opacityChanged=this.geomItem.on("opacityChanged",a),this.listenerIDs["material:opacityChanged"]=this.geomItem.materialParam.on("opacityChanged",a)}}getGeomItem(){return this.geomItem}isVisible(){return!this.culled&&this.visible}getGeomItemId(){return this.geomItemId}setCulled(A){const g=!this.culled&&this.visible;this.culled=A;const I=!this.culled&&this.visible;g!=I&&this.emit("visibilityChanged",new zi(I))}bind(A){const g=this.gl,I=A.unifs;if(!this.supportInstancing){const e=I.modelMatrix;e&&(this.geomMatrixDirty&&(this.modelMatrixArray=this.geomItem.geomMatParam.value.asArray()),g.uniformMatrix4fv(e.location,!1,this.modelMatrixArray));const i=I.drawItemData;i&&g.uniform4fv(i.location,this.geomData);const s=I.cutawayData;if(s){if(this.cutDataChanged&&this.geomItem.isCutawayEnabled()){const o=this.geomItem.getCutVector(),a=this.geomItem.getCutDist();this.cutData=[o.x,o.y,o.z,a]}g.uniform4fv(s.location,this.cutData)}}const C=I.geomItemId;return C&&g.uniform1i(C.location,this.geomItemId),!0}destroy(){this.geomItem.removeListenerById("visibilityChanged",this.listenerIDs.visibilityChanged),this.supportInstancing||(this.geomItem.geomMatParam.removeListenerById("valueChanged",this.listenerIDs["GeomMat.valueChanged"]),this.geomItem.removeListenerById("cutAwayChanged",this.listenerIDs.cutAwayChanged))}}class Fd extends OA{constructor(A){super(A,"ReductionShader");this.setShaderStage("VERTEX_SHADER",`

precision highp float;

uniform int reductionTextureWidth;
uniform sampler2D geomDataTexture;

ivec2 texelCoordFromVertexId(){
  ivec2 texSize = textureSize(geomDataTexture, 0);
  return ivec2(
    gl_VertexID % texSize.x, 
    gl_VertexID / texSize.x
    );
}

vec2 pointPositionFromGeomItemId(int geomItemId){
  vec2 result = vec2(
    (float(geomItemId % reductionTextureWidth) + 0.5) / float(reductionTextureWidth), 
    (float(geomItemId / reductionTextureWidth) + 0.5) / float(reductionTextureWidth)
    );
  return vec2(-1.0, -1.0) + (result * 2.0);
}

void main()
{
  // Get the texel coordinate in the source geomdata buffer.
  // there is one point for every pixel in the geomdata texture.
  ivec2 texelCoord = texelCoordFromVertexId();
  int geomItemId = int(texelFetch(geomDataTexture, texelCoord, 0).g + 0.5);

  if (geomItemId > 0) {
    vec2 position = pointPositionFromGeomItemId(geomItemId);
    gl_Position = vec4(position, 0.0, 1.0);
    gl_PointSize = 1.0;
  } else {
    // Move it off screen
    gl_Position = vec4(-2.0, -2.0, 0.0, 1.0);
    gl_PointSize = 0.0;
  }
}

`),this.setShaderStage("FRAGMENT_SHADER",`
precision highp float;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = vec4(1.0, 1.0, 1.0, 1.0);

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`)}}var Xd=`
precision highp float;
#define GLSLIFY 1

/* VS Outputs */
varying vec4 v_color;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int drawItemId = int(v_color.g);
  fragColor = v_color;

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,Hd=`
precision highp float;
#define GLSLIFY 1

attribute vec4 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 cameraMatrix;

uniform highp int occlusionCulling;
uniform sampler2D reductionDataTexture;

import 'transpose.glsl'
import 'GLSLUtils.glsl'
import 'stack-gl/transpose.glsl'
import 'stack-gl/inverse.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

const int GEOMITEM_INVISIBLE_IN_GEOMDATA = 2; // 1<<1;

/* VS Outputs */
varying vec4 v_color;

void main(void) {

  int drawItemId = getGeomItemId();
  vec4 geomItemData  = getInstanceData(drawItemId);
  int flags = int(geomItemData.r + 0.5);

  if (occlusionCulling != 0) {
    // Check if in the reduction texture, this item is already flagged as visible.
    // Note: we only draw bboxes for those that have been flagged as invisible, but might
    // be just off screen, or onscreen, but were culled in the previous update.
    int isVisible = int(fetchTexel(reductionDataTexture, textureSize(reductionDataTexture, 0), drawItemId).r);
    if (isVisible > 0) {
      return;
    }
    if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
      return;
    }
  }

  vec4 bboxMin = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 6);
  vec4 bboxMax = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 7);
  mat4 viewProjectionMatrix = projectionMatrix * viewMatrix;

  if (occlusionCulling != 0) {
    // TODO: The bounding box stochastic
    v_color = vec4(0.0, float(drawItemId), 0.0, 1.0);
  } else {
    v_color = fetchTexel(instancesTexture, instancesTextureSize, (drawItemId * pixelsPerItem) + 4);
  }

  vec4 pos = positions;
  if (pos.x < 0.0) pos.x = bboxMin.x;
  else if (pos.x > 0.0) pos.x = bboxMax.x;
  if (pos.y < 0.0) pos.y = bboxMin.y;
  else if (pos.y > 0.0) pos.y = bboxMax.y;
  if (pos.z < 0.0) pos.z = bboxMin.z;
  else if (pos.z > 0.0) pos.z = bboxMax.z;

  gl_Position = viewProjectionMatrix * pos;
}
`;class Wd extends OA{constructor(A){super(A,"BoundingBoxShader");this.setShaderStage("VERTEX_SHADER",Hd),this.setShaderStage("FRAGMENT_SHADER",Xd)}}var Yd=it("",null,!1);function Kd(t,A,g,I){return new Promise((C,e)=>{function i(){const s=t.clientWaitSync(A,g,0);if(s==t.WAIT_FAILED){e();return}if(s==t.TIMEOUT_EXPIRED){setTimeout(i,I);return}C()}i()})}function Nd(t,A,g,I,C,e=0,i=0){return uC(this,void 0,void 0,function*(){const s=t.fenceSync(t.SYNC_GPU_COMMANDS_COMPLETE,0);return t.flush(),yield Kd(t,s,0,10),t.deleteSync(s),t.bindBuffer(A,g),t.getBufferSubData(A,I,C,e,i),t.bindBuffer(A,null),C})}function Jd(t,A,g,I,C,e,i,s){return uC(this,void 0,void 0,function*(){const o=t.createBuffer();return t.bindBuffer(t.PIXEL_PACK_BUFFER,o),t.bufferData(t.PIXEL_PACK_BUFFER,s.byteLength,t.STREAM_READ),t.readPixels(A,g,I,C,e,i,0),t.bindBuffer(t.PIXEL_PACK_BUFFER,null),yield Nd(t,t.PIXEL_PACK_BUFFER,o,0,s),t.deleteBuffer(o),s})}class Dd extends lg{constructor(){super();this.setNumVertices(8);const A=this.getVertexAttribute("positions");A.getValueRef(0).set(.5,-.5,.5),A.getValueRef(1).set(.5,.5,.5),A.getValueRef(2).set(-.5,.5,.5),A.getValueRef(3).set(-.5,-.5,.5),A.getValueRef(4).set(.5,-.5,-.5),A.getValueRef(5).set(.5,.5,-.5),A.getValueRef(6).set(-.5,.5,-.5),A.getValueRef(7).set(-.5,-.5,-.5),this.setNumSegments(34),this.setSegmentVertexIndices(0,0,1),this.setSegmentVertexIndices(1,0,2),this.setSegmentVertexIndices(2,0,3),this.setSegmentVertexIndices(3,0,4),this.setSegmentVertexIndices(4,0,5),this.setSegmentVertexIndices(5,0,6),this.setSegmentVertexIndices(6,0,7),this.setSegmentVertexIndices(7,1,0),this.setSegmentVertexIndices(8,1,2),this.setSegmentVertexIndices(9,1,3),this.setSegmentVertexIndices(10,1,4),this.setSegmentVertexIndices(11,1,5),this.setSegmentVertexIndices(12,1,6),this.setSegmentVertexIndices(13,1,7),this.setSegmentVertexIndices(14,2,0),this.setSegmentVertexIndices(15,2,1),this.setSegmentVertexIndices(16,2,3),this.setSegmentVertexIndices(17,2,4),this.setSegmentVertexIndices(18,2,5),this.setSegmentVertexIndices(19,2,6),this.setSegmentVertexIndices(20,2,7),this.setSegmentVertexIndices(21,3,1),this.setSegmentVertexIndices(22,3,2),this.setSegmentVertexIndices(23,3,0),this.setSegmentVertexIndices(24,3,4),this.setSegmentVertexIndices(25,3,5),this.setSegmentVertexIndices(26,3,6),this.setSegmentVertexIndices(27,3,7),this.setSegmentVertexIndices(28,4,5),this.setSegmentVertexIndices(29,4,6),this.setSegmentVertexIndices(30,4,7),this.setSegmentVertexIndices(31,5,6),this.setSegmentVertexIndices(32,5,7),this.setSegmentVertexIndices(33,6,7)}}class vd extends FA{constructor(A,g){var I;super();this.glGeomItems=[null],this.glGeomItemEventHandlers=[],this.glGeomItemsMap={},this.glGeomItemsIndexFreeList=[],this.dirtyItemIndices=[],this.dirtyWorkerItemIndices=new Set,this.removedItemIndices=[],this.glGeomItemsTexture=null,this.xrPresenting=!1,this.xrFovY=0,this.xrProjectionMatrix=new NA,this.debugOcclusionBuffer=!1,this.inFrustumIndicesCount=0,this.drawIdsBufferDirty=!1,this.timer_query_ext=null,this.renderer=A,this.enableFrustumCulling=g.enableFrustumCulling||g.enableOcclusionCulling;const C=this.renderer.gl;this.enableOcclusionCulling=g.enableOcclusionCulling&&C.name=="webgl2",this.debugOcclusionBuffer=(I=g.debugOcclusionBuffer)!==null&&I!==void 0?I:!1,this.enableFrustumCulling&&this.setupCullingWorker(A)}setupCullingWorker(A){this.worker=new Yd,this.worker.postMessage({type:"Init",enableOcclusionCulling:this.enableOcclusionCulling});let g=!0;this.worker.onmessage=o=>{o.data.type=="InFrustumIndices"?this.enableOcclusionCulling?(o.data.newlyCulled&&this.applyCullResults(o.data),this.calculateOcclusionCulling(o.data.inFrustumIndices)):(this.applyCullResults(o.data),this.emitCullingUpdateData(o.data),g=!0):o.data.type=="CullResults"?(this.applyCullResults(o.data),this.emitCullingUpdateData(o.data),g=!0):o.data.type=="Done"&&this.renderer.emit("CullingUpdated"),g=!0};const I=()=>{const o=A.getViewport(),a=A.getViewport().getCamera(),n=o.getWidth()/o.getHeight();if(a.isOrthographic()){const B=a.getFrustumHeight(),d=B*n;this.worker.postMessage({type:"ViewportChanged",frustumHeight:B,frustumWidth:d,isOrthographic:!0,solidAngleLimit:A.solidAngleLimit})}else{const B=a.getFov()*.5,d=Math.atan(Math.tan(B)*n);this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:d,frustumHalfAngleY:B,isOrthographic:!1,solidAngleLimit:A.solidAngleLimit})}};A.on("resized",I);const C=A.getViewport().getCamera();C.on("projectionParamChanged",o=>{C.isOrthographic()&&I()}),I(),A.once("xrViewportSetup",o=>{this.xrViewport=o.xrViewport;const a=o.xrViewport;a.on("presentingChanged",n=>{if(this.xrPresenting=n.state,n.state){i=10;const B=Math.PI/180;let d=62*B,l=50*B;switch(a.getHMDName()){case"Vive":d*=.6,l*=.6;break;case"Oculus":d*=.5,l*=.5;break;default:d*=.5,l*=.5;break}this.xrFovY=d*2;const r=62/50,c=a.depthRange[0],h=a.depthRange[1];this.xrProjectionMatrix.setPerspectiveMatrix(this.xrFovY,r,c,h),this.worker.postMessage({type:"ViewportChanged",frustumHalfAngleX:l,frustumHalfAngleY:d,isOrthographic:!1,solidAngleLimit:A.solidAngleLimit})}else i=5,I(),s()})});let e=0,i=5;A.on("viewChanged",o=>{if(g){if(e%i==0){g=!1;const a=o.viewXfo.tr,n=o.viewXfo.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:a.asArray(),cameraOri:n.asArray(),solidAngleLimit:A.solidAngleLimit})}e++}});const s=()=>{const a=A.getViewport().getCamera().globalXfoParam.value,n=a.tr,B=a.ori;this.worker.postMessage({type:"ViewChanged",cameraPos:n.asArray(),cameraOri:B.asArray(),solidAngleLimit:A.solidAngleLimit})};if(A.getViewport().getCamera().on("movementFinished",s),s(),this.enableOcclusionCulling){const o=this.renderer.gl;this.timer_query_ext=o.getExtension("EXT_disjoint_timer_query_webgl2");let a=1/window.devicePixelRatio;const n=Math.ceil(this.renderer.getWidth()*a),B=Math.ceil(this.renderer.getHeight()*a);this.occlusionDataBuffer=new fC(o,{type:o.FLOAT,format:o.RGBA,minFilter:o.NEAREST,magFilter:o.NEAREST,width:n,height:B,depthType:o.UNSIGNED_SHORT,depthFormat:o.DEPTH_COMPONENT,depthInternalFormat:o.DEPTH_COMPONENT16}),this.renderer.on("resized",d=>{this.xrPresenting||this.occlusionDataBuffer.resize(Math.ceil(d.width*a),Math.ceil(d.height*a))}),this.reductionDataBuffer=new fC(o,{type:o.UNSIGNED_BYTE,internalFormat:o.R8,format:o.RED,minFilter:o.NEAREST,magFilter:o.NEAREST,width:1,height:1,depthType:o.UNSIGNED_SHORT,depthFormat:o.DEPTH_COMPONENT,depthInternalFormat:o.DEPTH_COMPONENT16}),this.bbox=new Oo(o,new Dd),this.reductionShader=new Fd(o),this.boundingBoxShader=new Wd(o),this.boundingBoxShader.compileForTarget("GLGeomItemLibrary",{directives:this.renderer.directives}),this.inFrustumIndicesCount=0}}applyCullResults(A){A.newlyCulled&&A.newlyCulled.forEach(g=>{this.glGeomItems[g]&&this.glGeomItems[g].setCulled(!0)}),A.newlyUnCulled&&A.newlyUnCulled.forEach(g=>{this.glGeomItems[g]&&this.glGeomItems[g].setCulled(!1)}),this.renderer.requestRedraw()}emitCullingUpdateData(A){var g,I;this.renderer.emit("CullingUpdated",{culled:(g=A.newlyCulled)===null||g===void 0?void 0:g.length,unCulled:(I=A.newlyUnCulled)===null||I===void 0?void 0:I.length,visible:A.visible,total:A.total,visibleGeomStats:A.visibleGeomStats,totalGeomStats:A.totalGeomStats})}updateCulledDrawIDsBuffer(A){const g=this.renderer.gl;if(!g.floatTexturesSupported){this.drawIdsBufferDirty=!1;return}this.inFrustumDrawIdsBuffer&&this.inFrustumIndicesCount!=A.length&&(g.deleteBuffer(this.inFrustumDrawIdsBuffer),this.inFrustumDrawIdsBuffer=null),this.inFrustumDrawIdsBuffer||(this.inFrustumDrawIdsBuffer=g.createBuffer(),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer)),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer),g.bufferData(g.ARRAY_BUFFER,A,g.STATIC_DRAW),this.inFrustumIndicesCount=A.length,this.drawIdsBufferDirty=!1;const I=Math.max(4,P.nextPow2(Math.round(Math.sqrt(this.glGeomItems.length)+.5)));this.reductionDataBuffer.width!=I&&(this.reductionDataBuffer.resize(I,I),this.reductionDataArray=new Uint8Array(I*I))}calculateOcclusionCulling(A){if(A&&A.length>0&&this.updateCulledDrawIDsBuffer(A),this.inFrustumIndicesCount==0){this.worker.postMessage({type:"OcclusionData",visibleItems:[]});return}const g=this.renderer.gl,I=new wC(g);this.renderer.bindGLBaseRenderer(I),I.directives=[...this.renderer.directives,"#define DRAW_GEOMDATA"],I.shaderopts.directives=I.directives,I.floatGeomBuffer=!0,I.occlusionCulling=1,this.xrPresenting?(this.xrViewport.initCullingRenderState(I),I.viewports[0].fovY=this.xrFovY,I.viewports[0].projectionMatrix=this.xrProjectionMatrix):this.renderer.getViewport().initRenderState(I);const C=m=>{this.occlusionDataBuffer.bindForWriting(m,!0),m.glDisable(g.BLEND),m.glDisable(g.CULL_FACE),m.glEnable(g.DEPTH_TEST),g.depthFunc(g.LESS),g.depthMask(!0),this.renderer.getPass(0).drawGeomData(m),this.renderer.getPass(1).drawGeomData(m),this.occlusionDataBuffer.unbindForWriting(m)},e=this.occlusionDataBuffer.width*this.occlusionDataBuffer.height,i=this.timer_query_ext,s=(m,G,y)=>{this.reductionDataBuffer.bindForWriting(m,G),G||(g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),g.blendFunc(g.SRC_COLOR,g.DST_COLOR)),this.reductionShader.bind(m);const{geomDataTexture:Q,reductionTextureWidth:u}=m.unifs;Q&&this.occlusionDataBuffer.bindToUniform(m,Q),u&&g.uniform1i(u.location,this.reductionDataBuffer.width),i&&g.beginQuery(i.TIME_ELAPSED_EXT,y),g.drawArrays(g.POINTS,0,e),i&&g.endQuery(i.TIME_ELAPSED_EXT),G||g.disable(g.BLEND),this.reductionDataBuffer.unbindForWriting(m)},o=()=>{this.occlusionDataBuffer.bindForWriting(I,!1),this.debugOcclusionBuffer||(g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)),this.boundingBoxShader.bind(I,"GLGeomItemLibrary"),this.bbox.bind(I);const{instancesTexture:m,instancesTextureSize:G,instancedDraw:y,reductionDataTexture:Q,occlusionCulling:u}=I.unifs;this.glGeomItemsTexture.bindToUniform(I,m),g.uniform1i(G.location,this.glGeomItemsTexture.width),g.uniform1i(y.location,1),g.uniform1i(u.location,1),this.reductionDataBuffer.bindColorTexture(I,Q);const Z=I.attrs.instancedIds.location;g.enableVertexAttribArray(Z),g.bindBuffer(g.ARRAY_BUFFER,this.inFrustumDrawIdsBuffer),g.vertexAttribPointer(Z,1,g.FLOAT,!1,1*4,0),g.vertexAttribDivisor(Z,1),I.bindViewports(I.unifs,()=>{this.bbox.drawInstanced(I,this.inFrustumIndicesCount)}),this.occlusionDataBuffer.unbindForWriting(I)};let a,n,B,d;i&&(a=g.createQuery(),g.beginQuery(i.TIME_ELAPSED_EXT,a)),C(I),i&&g.endQuery(i.TIME_ELAPSED_EXT),i&&(n=g.createQuery()),s(I,!0,n),i&&(B=g.createQuery(),g.beginQuery(i.TIME_ELAPSED_EXT,B)),o(),i&&g.endQuery(i.TIME_ELAPSED_EXT),i&&(d=g.createQuery()),s(I,!1,d);const l={numReductionPoints:e},r=(m,G)=>{const y=g.getQueryParameter(G,g.QUERY_RESULT_AVAILABLE),Q=g.getParameter(i.GPU_DISJOINT_EXT);if(y&&!Q){const u=g.getQueryParameter(G,g.QUERY_RESULT);l[m]=u/1e6,g.deleteQuery(G)}},c=this.reductionDataBuffer.width,h=this.reductionDataBuffer.height,E=g.RED,b=g.UNSIGNED_BYTE;this.reductionDataBuffer.bindForReading(),Jd(g,0,0,c,h,E,b,this.reductionDataArray).then(()=>{this.reductionDataBuffer.unbindForReading(),i&&(r("queryDrawScene",a),r("queryDrawCulledBBoxes",B),r("queryReduceSceneGeoms",n),r("queryReduceBBoxes",d),this.renderer.emit("occlusionCullingProfilingData",l)),this.worker.postMessage({type:"OcclusionData",visibleItems:this.reductionDataArray})})}addGeomItem(A){let g=this.glGeomItemsMap[A.getId()];if(g!=null)return this.glGeomItems[g];performance.now();const I=A.materialParam;let C=I.value,e=-1;e=this.renderer.glMaterialLibrary.addMaterial(C);const i=()=>{this.renderer.glMaterialLibrary.removeMaterial(C),C=I.value,l.materialId=this.renderer.glMaterialLibrary.addMaterial(C),c(),r()};I.on("valueChanged",i);const s=A.geomParam;let o=s.value;const a=this.renderer.glGeomLibrary.addGeom(o),n=()=>{this.renderer.glGeomLibrary.removeGeom(o),o=s.value,l.geomId=this.renderer.glGeomLibrary.addGeom(o),this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(g),r()};s.on("valueChanged",n),this.glGeomItemsIndexFreeList.length>0?g=this.glGeomItemsIndexFreeList.pop():(g=this.glGeomItems.length,this.glGeomItems.push(null)),this.removedItemIndices.includes(g)&&this.removedItemIndices.splice(this.removedItemIndices.indexOf(g),1),this.dirtyItemIndices.push(g);const B=this.renderer.gl,d=B.floatTexturesSupported,l=new pd(B,A,g,a,e,d),r=()=>{this.dirtyItemIndices.includes(g)||(this.dirtyItemIndices.push(g),this.renderer.drawItemChanged())};A.geomMatParam.on("valueChanged",r),A.on("cutAwayChanged",r),A.on("highlightChanged",r),A.on("selectabilityChanged",r),A.on("opacityChanged",r);const c=()=>{this.enableFrustumCulling&&(this.dirtyWorkerItemIndices.has(g)||(this.dirtyWorkerItemIndices.add(g),this.renderer.drawItemChanged()))};return this.enableFrustumCulling&&this.dirtyWorkerItemIndices.add(g),A.on("visibilityChanged",c),A.on("opacityChanged",c),A.geomMatParam.on("valueChanged",c),s.on("boundingBoxChanged",c),this.glGeomItems[g]=l,this.glGeomItemEventHandlers[g]={geomItemChanged:r,materialChanged:i,geomChanged:n,workerItemDataChanged:c},this.glGeomItemsMap[A.getId()]=g,this.renderer.requestRedraw(),l}removeGeomItem(A){const g=this.glGeomItemsMap[A.getId()];if(g==null)return null;const I=this.glGeomItems[g],C=A.geomParam.value;this.renderer.glGeomLibrary.removeGeom(C);const e=A.materialParam.value;this.renderer.glMaterialLibrary.removeMaterial(e);const i=this.glGeomItemEventHandlers[g],s=A.geomParam;return A.materialParam.off("valueChanged",i.materialChanged),s.off("valueChanged",i.geomChanged),A.geomMatParam.off("valueChanged",i.geomItemChanged),A.off("cutAwayChanged",i.geomItemChanged),A.off("highlightChanged",i.geomItemChanged),A.off("selectabilityChanged",i.geomItemChanged),A.off("opacityChanged",i.geomItemChanged),A.off("visibilityChanged",i.workerItemDataChanged),A.geomMatParam.off("valueChanged",i.workerItemDataChanged),s.off("boundingBoxChanged",i.workerItemDataChanged),A.off("opacityChanged",i.workerItemDataChanged),this.glGeomItems[g]=null,this.glGeomItemEventHandlers[g]=null,this.glGeomItemsIndexFreeList.push(g),delete this.glGeomItemsMap[A.getId()],this.removedItemIndices.push(g),this.dirtyWorkerItemIndices.has(g)&&this.dirtyWorkerItemIndices.delete(g),this.renderer.requestRedraw(),I}getGeomItem(A){var g;if(A>=this.glGeomItems.length){console.warn("Invalid Draw Item id:"+A+" NumItems:"+(this.glGeomItems.length-1));return}return(g=this.glGeomItems[A])===null||g===void 0?void 0:g.geomItem}getGLGeomItem(A){const g=this.glGeomItemsMap[A.getId()];return g!=null?this.glGeomItems[g]:null}populateDrawItemDataArray(A,g,I){const C=this.glGeomItems[A];if(!C)return;const{geomItem:e,geomId:i}=C,s=e.materialParam.value,o=ug*4,a=g*o;let n=0;e.isCutawayEnabled()&&(n|=DI.GEOMITEM_FLAG_CUTAWAY),e.isSelectable()||(n|=DI.GEOMITEM_INVISIBLE_IN_GEOMDATA),(!s.isOpaque()||!e.isOpaque())&&(n|=DI.GEOMITEM_TRANSPARENT);const B=new cA(new Float32Array(I.buffer,(a+0)*4,4));B.set(n,e.opacity,0,0);const d=this.renderer.glMaterialLibrary.getMaterialAllocation(s);d&&(B.z=d.start),B.w=i;const l=e.geomMatParam.value,r=new cA(new Float32Array(I.buffer,(a+1*4)*4,4)),c=new cA(new Float32Array(I.buffer,(a+2*4)*4,4)),h=new cA(new Float32Array(I.buffer,(a+3*4)*4,4));r.set(l.xAxis.x,l.yAxis.x,l.zAxis.x,l.translation.x),c.set(l.xAxis.y,l.yAxis.y,l.zAxis.y,l.translation.y),h.set(l.xAxis.z,l.yAxis.z,l.zAxis.z,l.translation.z);const E=new cA(new Float32Array(I.buffer,(a+4*4)*4,4));if(e.isHighlighted()){const Q=e.getHighlight();E.set(Q.r,Q.g,Q.b,Q.a)}const b=new cA(new Float32Array(I.buffer,(a+5*4)*4,4));if(e.isCutawayEnabled()){const Q=e.getCutVector(),u=e.getCutDist();b.set(Q.x,Q.y,Q.z,u)}const m=e.boundingBoxParam.value,G=new cA(new Float32Array(I.buffer,(a+6*4)*4)),y=new cA(new Float32Array(I.buffer,(a+7*4)*4));G.set(m.p0.x,m.p0.y,m.p0.z,0),y.set(m.p1.x,m.p1.y,m.p1.z,0)}getCullingWorkerData(A,g,I){const C=A.boundingBoxParam.value,e=C.size()*.5,i=C.center();let s=A.cullable!=!1;const o=g.getParameter("MaintainScreenSize");o&&o.value&&(s=!1),g.getShaderName().startsWith("ScreenSpace")&&(s=!1),g.hasParameter("PointSize")&&(s=!1),this.enableOcclusionCulling&&!A.isSelectable()&&(s=!1);const a=!A.isOpaque()||!g.isOpaque(),n={triangles:0,lines:0,points:0},B=A.geomParam.value;if(B instanceof ZC)n.triangles+=B.getNumTriangles(),n.lines+=B.getNumLineSegments(),n.points+=B.getNumPoints();else if(B instanceof yI||B instanceof _g)n.triangles+=B.getNumTriangles();else if(B instanceof lg||B instanceof pg)n.lines+=B.getNumLineSegments();else if(B instanceof bI||B instanceof ZI)n.points+=B.getNumVertices();else throw new Error("Unsupported geom type:"+B.constructor.name);return{id:I,boundingRadius:e,pos:i.asArray(),cullable:s,visible:A.isVisible(),transparent:a,geomStats:n}}uploadGeomItemsToWorker(){if(this.enableFrustumCulling){const A=[];this.dirtyWorkerItemIndices.forEach(g=>{const I=this.glGeomItems[g];if(!I)return;const{geomItem:C}=I,e=C.materialParam.value;A.push(this.getCullingWorkerData(C,e,g))}),this.worker.postMessage({type:"UpdateGeomItems",geomItems:A,removedItemIndices:this.removedItemIndices}),this.dirtyWorkerItemIndices.clear(),this.removedItemIndices=[]}}uploadGeomItems(A){const g=this.renderer.gl;if(!g.floatTexturesSupported)return;let I=Math.round(Math.sqrt(this.glGeomItems.length*ug)+.5);I=P.nextPow2(I),I%ug!=0&&(I+=ug-I%ug),this.glGeomItemsTexture?this.glGeomItemsTexture.width!=I&&(this.glGeomItemsTexture.resize(I,I),this.dirtyItemIndices=Array(I*I/ug).fill(0).map((e,i)=>i)):(this.glGeomItemsTexture=new KA(g,{format:"RGBA",type:"FLOAT",width:I,height:I,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.glGeomItemsTexture.clear()),g.bindTexture(g.TEXTURE_2D,this.glGeomItemsTexture.glTex);const C=this.glGeomItemsTexture.getType();for(let e=0;e<this.dirtyItemIndices.length;e++){const i=this.dirtyItemIndices[e],s=Math.floor(i*ug/I);let o=i+1;for(let r=e+1;r<this.dirtyItemIndices.length;r++){const c=this.dirtyItemIndices[r];if(Math.floor(c*ug/I)!=s||c!=o)break;o++}const a=o-i,n=i*ug%I,B=ug*a,d=1,l=new Float32Array(ug*4*a);for(let r=i;r<o;r++)this.populateDrawItemDataArray(r,r-i,l);if(C==g.FLOAT)this.glGeomItemsTexture.populate(l,B,d,n,s,!1);else{const r=P.convertFloat32ArrayToUInt16Array(l);this.glGeomItemsTexture.populate(r,B,d,n,s,!1)}e+=a-1}this.removedItemIndices=[],this.dirtyItemIndices=[]}bind(A){(this.dirtyWorkerItemIndices.size>0||this.removedItemIndices.length>0)&&this.uploadGeomItemsToWorker(),this.dirtyItemIndices.length>0&&this.uploadGeomItems(A);const g=this.renderer.gl,{instancesTexture:I,instancesTextureSize:C}=A.unifs;I&&(this.glGeomItemsTexture.bindToUniform(A,I),g.uniform1i(C.location,this.glGeomItemsTexture.width))}}let ig,YI=!1,ae=!1;const oC={};class Md extends xI{constructor(A,g={}){var I,C;super();if(this.listenerIDs={},this.directives=[],this.solidAngleLimit=.004,this.__glcanvas=null,this.__scene=null,this.__shaderDirectives={},this.__renderGeomDataFbosRequested=!1,this.__shaders={},this.__passes={},this.passAssignments={},this.__passesRegistrationOrder=[],this.__passCallbacks=[],this.__viewports=[],this.__activeViewport=void 0,this.__continuousDrawing=!1,this.__redrawRequested=!1,this.__isMobile=!1,this.__drawSuspensionLevel=0,this.__xrViewportPresenting=!1,this.floatGeomBuffer=!0,this.multiSampledScreenBuffer=!1,this.__supportXR=!1,this.__xrViewport=void 0,this.screenQuad=null,!vA.gpuDesc)throw new Error("Unable to create renderer. WebGL not Supported");this.__isMobile=vA.isMobileDevice,this.requestRedraw=this.requestRedraw.bind(this),this.__gl=this.setupWebGL(A,g),this.screenQuad=new hd(this.__gl,{directives:this.directives}),this.bindEventHandlers();const e=this.addViewport("main");e.debugGeomDataBuffer=g.debugGeomDataBuffer,e.debugOcclusionBuffer=g.debugOcclusionBuffer,this.glMaterialLibrary=new wd(this),this.glMaterialLibrary.on("updated",()=>{this.requestRedraw()}),this.glGeomLibrary=new Sd(this),this.glGeomLibrary.on("updated",()=>{this.requestRedraw()}),this.glGeomItemLibrary=new vd(this,g),this.glGeomItemLibrary.on("updated",()=>{this.requestRedraw()});for(const s in oC)for(const o of oC[s])this.addPass(new o,parseInt(s),!1);this.__supportXR=(I=g.supportXR)!==null&&I!==void 0?I:!0;const i=(C=g.xrMode)!==null&&C!==void 0?C:"VR";this.__xrViewportPromise=new Promise((s,o)=>{var a,n;if(this.__supportXR&&!((a=navigator)===null||a===void 0)&&a.xr){const B=i=="AR"?"immersive-ar":"immersive-vr",d=()=>{this.__gl.makeXRCompatible().then(()=>{this.__xrViewport=this.__setupXRViewport(B);let l=new Sn(this.__xrViewport);this.emit("xrViewportSetup",l),s(this.__xrViewport)})};(n=navigator)===null||n===void 0||n.xr.isSessionSupported(B).then(l=>{l&&d()}).catch(l=>{console.warn("Unable to setup XR:"+l)})}})}addShaderPreprocessorDirective(A,g){g?this.__shaderDirectives[A]="#define "+A+" = "+g:this.__shaderDirectives[A]="#define "+A;const I=[];for(const C in this.__shaderDirectives)I.push(this.__shaderDirectives[C]);this.directives=I}getWidth(){return this.__glcanvas.width}getHeight(){return this.__glcanvas.height}addViewport(A){const g=this,I=new md(g,A,this.getWidth(),this.getHeight()),C=()=>{this.requestRedraw()},e=i=>{this.__xrViewportPresenting||this.emit("viewChanged",i)};return I.on("updated",C),I.on("viewChanged",e),this.__viewports.push(I),this.__activeViewport=I,I}getViewport(A=0){return this.__viewports[A]}getViewportAtPos(A,g){for(const I of this.__viewports){const C=I.getPosX(),e=I.getPosY(),i=I.getWidth(),s=I.getHeight();if(A>=C&&g>=e&&A<=i+C&&g<=s+e)return I}}activateViewport(A){this.__activeViewport!=A&&(this.__activeViewport=A)}activateViewportAtPos(A,g){if(this.__xrViewportPresenting)return;const I=this.getViewportAtPos(A,g);I&&I!=this.__activeViewport&&this.activateViewport(I)}getActiveViewport(){return this.__activeViewport}suspendDrawing(){this.__drawSuspensionLevel++}resumeDrawing(){this.__drawSuspensionLevel--,this.__drawSuspensionLevel==0&&(this.renderGeomDataFbos(),this.requestRedraw())}renderGeomDataFbos(){if(this.__renderGeomDataFbosRequested==!0)return;this.__renderGeomDataFbosRequested=!0;const A=()=>{for(const g of this.__viewports)g.renderGeomDataFbo();this.__renderGeomDataFbosRequested=!1};window.requestAnimationFrame(A)}getScene(){return this.__scene}setScene(A){this.__scene=A,this.addTreeItem(this.__scene.getRoot());let g=new bn(this.__scene);this.emit("sceneSet",g)}addTreeItem(A){if(!(A instanceof L))return;const g=A.getId(),I={};if(this.listenerIDs[g]=I,A instanceof gA){const C=A.geomParam;if(C.value==null){const e=()=>{delete I["Geometry.valueChanged"],this.assignTreeItemToGLPass(A)};I["Geometry.valueChanged"]=C.once("valueChanged",e)}else this.assignTreeItemToGLPass(A)}else this.assignTreeItemToGLPass(A);for(const C of A.getChildren())C&&this.addTreeItem(C);I.childAdded=A.on("childAdded",C=>{this.addTreeItem(C.childItem)}),I.childRemoved=A.on("childRemoved",C=>{this.removeTreeItem(C.childItem)}),this.renderGeomDataFbos()}assignTreeItemToGLPass(A){if(A instanceof gA){const I=A;this.glGeomItemLibrary.addGeomItem(I)}let g=!1;for(let I=this.__passesRegistrationOrder.length-1;I>=0;I--){const C=this.__passesRegistrationOrder[I],e={continueInSubTree:!0};if(g=C.itemAddedToScene(A,e),g){if(this.passAssignments[A.getId()]=I,!e.continueInSubTree)return;break}}if(!g)for(const I of this.__passCallbacks){const C={continueInSubTree:!0};if(I.itemAddedFn(A,C)){if(!C.continueInSubTree)return;break}}}removeTreeItem(A){if(!(A instanceof L))return;const g=A.getId(),I=this.listenerIDs[g];delete this.listenerIDs[g],A.removeListenerById("childAdded",I.childAdded),A.removeListenerById("childRemoved",I.childRemoved);const C=this.passAssignments[g];if(C!=null){const e=this.getPass(C),i={continueInSubTree:!0};e.itemRemovedFromScene(A,i),delete this.passAssignments[g]}for(const e of A.getChildren())e&&this.removeTreeItem(e);if(A instanceof gA){const e=A;I["Geometry.valueChanged"]&&A.geomParam.removeListenerById("valueChanged",I["Geometry.valueChanged"]),this.glGeomItemLibrary.removeGeomItem(e)}this.renderGeomDataFbos()}get gl(){return this.__gl}getGL(){return this.__gl}handleResize(A,g){if(this.__xrViewportPresenting)return;const I=Math.max(4,A)*window.devicePixelRatio,C=Math.max(4,g)*window.devicePixelRatio;this.__glcanvas.width=I,this.__glcanvas.height=C,this.__viewports.forEach(i=>{i.resize(I,C)});const e=new Ug(I,C);this.emit("resized",e),this.requestRedraw()}getDiv(){return this.__glcanvas.parentElement}setupWebGL(A,g={}){var I,C;const{tagName:e}=A;if(!["DIV","CANVAS"].includes(e))throw new Error("Only CANVAS and DIV are valid root elements.");const i=e==="DIV";this.__glcanvas=A,i?(console.warn("@GLBaseRenderer#setupWebGL.","Using a DIV as root element is deprecated.","Use a CANVAS instead.","See: https://docs.zea.live/zea-engine/#/getting-started/get-started-with-engine?id=basic-setup"),this.__glcanvas=document.createElement("canvas"),A.appendChild(this.__glcanvas)):this.__glcanvas=A,this.__glcanvas.style["touch-action"]="none",this.__glcanvas.parentElement.style.position="relative",this.__glcanvas.parentElement.style.overflow="hidden",this.__glcanvas.style.width="100%",this.__glcanvas.style.height="100%",this.__glcanvas.style.position="absolute";const s=ld(l=>{if(!(!Array.isArray(l)||!l.length))for(const r of l){if(!r.contentRect)return;const c=Math.round(r.contentRect.width),h=Math.round(r.contentRect.height);this.handleResize(c,h)}},500);window.addEventListener("resize",()=>{const l=[{contentRect:{width:this.__glcanvas.parentElement.clientWidth,height:this.__glcanvas.parentElement.clientHeight}}];s(l)});const o=new ResizeObserver(s);try{o.observe(this.__glcanvas.parentNode,{box:"device-pixel-content-box"})}catch{o.observe(this.__glcanvas.parentNode,{box:"content-box"})}this.handleResize(this.__glcanvas.parentElement.clientWidth,this.__glcanvas.parentElement.clientHeight);const a=vA.OS==="macOS"&&vA.browserName==="Chrome",n=vA.isIOSDevice,B={};B.preserveDrawingBuffer=!0,B.antialias=a||n?!1:(I=g.antialias)!==null&&I!==void 0?I:!0,B.depth=!0,B.stencil=!0,B.alpha=(C=g.alpha)!==null&&C!==void 0?C:!1,B.xrCompatible=!1,this.multiSampledScreenBuffer=B.antialias,B.powerPreference=g.powerPreference||"high-performance";const d=LB(this.__glcanvas,B);d||alert("Unable to create WebGL context. WebGL not supported."),d.name=="webgl2"&&this.addShaderPreprocessorDirective("ENABLE_ES3"),d.floatTexturesSupported&&this.addShaderPreprocessorDirective("ENABLE_FLOAT_TEXTURES");{const l=d.name=="webgl2"?d.getExtension("WEBGL_multi_draw"):null;l&&!g.disableMultiDraw?(d.multiDrawArrays=l.multiDrawArraysWEBGL.bind(l),d.multiDrawElements=l.multiDrawElementsWEBGL.bind(l),d.multiDrawElementsInstanced=l.multiDrawElementsInstancedWEBGL.bind(l),d.multiDrawArraysInstanced=l.multiDrawArraysInstancedWEBGL.bind(l)):this.addShaderPreprocessorDirective("EMULATE_MULTI_DRAW")}return vA.browserName=="Safari"&&d.name=="webgl"?this.floatGeomBuffer=!1:this.floatGeomBuffer=g.floatGeomBuffer!=null?g.floatGeomBuffer:d.floatTexturesSupported,d.floatGeomBuffer=this.floatGeomBuffer,d}bindEventHandlers(){const A=()=>this.getWidth()>0&&this.getHeight(),g=C=>vA.isMobileDevice?(console.warn("Mobile device is triggering mouse event:",C.type),!0):!1;this.__glcanvas.addEventListener("mousedown",C=>{if(g(C))return;const e=new wg(C,this.__glcanvas.getBoundingClientRect());YI=!0,ig=this,this.activateViewportAtPos(e.rendererX,e.rendererY);const i=this.getActiveViewport();i&&i.onPointerDown(e),ae=!1}),document.addEventListener("mouseup",C=>{if(g(C)||ig!=this||!A())return;const e=new wg(C,this.__glcanvas.getBoundingClientRect());YI=!1;const i=this.getActiveViewport();i&&i.onPointerUp(e),ae&&(i&&i.onPointerLeave(e),ig=void 0)}),document.addEventListener("mousemove",C=>{if(g(C)||ig!=this||!A())return;const e=new wg(C,this.__glcanvas.getBoundingClientRect());YI||this.activateViewportAtPos(e.rendererX,e.rendererY);const i=this.getActiveViewport();i&&i.onPointerMove(e)}),this.__glcanvas.addEventListener("mouseenter",C=>{if(!g(C)&&!YI){ig=this;const e=new wg(C,this.__glcanvas.getBoundingClientRect());if(this.activateViewportAtPos(e.rendererX,e.rendererY),!YI){const i=this.getActiveViewport();i&&i.onPointerEnter(e)}ae=!1}}),this.__glcanvas.addEventListener("mouseleave",C=>{if(g(C)||ig!=this||!A())return;const e=new wg(C,this.__glcanvas.getBoundingClientRect());if(YI)ae=!0;else{const i=this.getActiveViewport();i&&i.onPointerLeave(e),ig=void 0}}),document.addEventListener("contextmenu",C=>{ig!=this||!A()||(C.preventDefault(),C.stopPropagation())}),this.__glcanvas.addEventListener("touchstart",C=>{ig=this;const e=this.getActiveViewport(),i=new kg(C,this.__glcanvas.getBoundingClientRect());e.onPointerDown(i)},{passive:!0}),this.__glcanvas.addEventListener("touchend",C=>{const e=this.getActiveViewport(),i=new kg(C,this.__glcanvas.getBoundingClientRect());e.onPointerUp(i)},{passive:!0}),this.__glcanvas.addEventListener("touchmove",C=>{const e=this.getActiveViewport(),i=new kg(C,this.__glcanvas.getBoundingClientRect());e.onPointerMove(i)},{passive:!0}),this.__glcanvas.addEventListener("touchcancel",C=>{const e=this.getActiveViewport(),i=new kg(C,this.__glcanvas.getBoundingClientRect());e.onTouchCancel(i)},{passive:!0});const I=C=>{if(!(ig!=this||!A())&&ig){const e=new pn(C,this.__glcanvas.getBoundingClientRect()),i=ig.getActiveViewport();i&&i.onWheel(e)}};window.addEventListener("wheel",I,{passive:!1}),document.addEventListener("keydown",C=>{if(ig!=this||!A())return;const e=new ns(C),i=ig.getActiveViewport();i&&i.onKeyDown(e)}),document.addEventListener("keyup",C=>{if(ig!=this||!A())return;const e=new ns(C),i=ig.getActiveViewport();i&&i.onKeyUp(e)})}getGLCanvas(){return this.__glcanvas}frameAll(A=0){this.__viewports[A].frameView([this.__scene.getRoot()])}getOrCreateShader(A){let g=this.__shaders[A];return g||(g=p.constructClass(A),g||console.error("@GLBaseRenderer#getOrCreateShader - Shader not registered with the Registry:",A),g.setGLContext(this.__gl),this.__shaders[A]=g),g}addPass(A,g=-1,I=!0){g==-1&&(g=A.getPassType()),this.__passes[g]||(this.__passes[g]=[]);let C=0;for(const e in this.__passes){if(e==g.toString())break;C+=this.__passes[e].length}if(C+=this.__passes[g].length,A.on("updated",e=>{this.requestRedraw(),this.renderGeomDataFbos()}),A.init(this,C),this.__passes[g].push(A),I){let e=0;for(const i in this.__passes){const s=this.__passes[i];s.forEach((o,a)=>{o.setPassIndex(e+a)}),e+=s.length}}return this.__passesRegistrationOrder.push(A),this.requestRedraw(),C}getPass(A){let g=0;for(const I in this.__passes){const C=this.__passes[I];if(A-g<C.length)return C[A-g];g+=C.length}}supportsVR(){var A;return console.warn("@GLBaseRenderer#supportVR - Deprecated Method. Please instead connect to the vrViewportSetup signal."),this.__supportXR&&((A=navigator)===null||A===void 0?void 0:A.xr)!=null}__setupXRViewport(A){const g=new ud(this,A),I=C=>{this.emit("viewChanged",C)};return g.on("presentingChanged",C=>{const e=C.state;if(this.__xrViewportPresenting!=e)if(this.__xrViewportPresenting=e,e){for(const i in this.__passes){const s=this.__passes[i];for(const o of s)o.startPresenting()}g.on("viewChanged",I)}else{g.off("viewChanged",I),this.emit("updated");for(const o in this.__passes){const a=this.__passes[o];for(const n of a)n.stopPresenting()}const i=this.getViewport().getCamera().globalXfoParam.value,s=new et("CameraAndPointer",i);this.emit("viewChanged",s),this.requestRedraw()}}),g}getVRViewport(){return this.__xrViewport}getXRViewport(){return this.__xrViewportPromise}isXRViewportPresenting(){return this.__xrViewportPresenting}isContinuouslyDrawing(){return this.__continuousDrawing}startContinuousDrawing(){if(this.isContinuouslyDrawing()||this.__xrViewportPresenting)return;const A=()=>{const g=new Gg(this.gl);this.__continuousDrawing&&!this.__xrViewportPresenting&&window.requestAnimationFrame(A);for(const I of this.__viewports)I.draw(g)};this.__continuousDrawing=!0,window.requestAnimationFrame(A)}stopContinuousDrawing(){this.__continuousDrawing=!1}toggleContinuousDrawing(){this.__continuousDrawing?this.stopContinuousDrawing():this.startContinuousDrawing()}drawItemChanged(){for(const A of this.__viewports)A.invalidateGeomDataBuffer();this.requestRedraw()}requestRedraw(){if(this.__redrawRequested||this.__continuousDrawing||this.__xrViewportPresenting||this.__drawSuspensionLevel>0)return!1;const A=()=>{this.__redrawRequested=!1;const g=new Gg(this.gl);for(const I of this.__viewports)I.draw(g);g.stack.length!=1&&console.warn(" corrupt renderstate.stack.length:",g.stack.length)};return window.requestAnimationFrame(A),this.__redrawRequested=!0,!0}forceRender(){if(!this.__redrawRequested){console.warn("@GlBaseRenderer#forceRender - Scene is not dirty");return}this.__redrawRequested=!1;const A=new Gg(this.gl);for(const g of this.__viewports)g.draw(A)}bindGLBaseRenderer(A){A.gl=this.__gl,A.shaderopts={directives:this.directives};const g=this.__gl;!A.viewports||A.viewports.length==1?(A.bindRendererUnifs=I=>{const{cameraMatrix:C,viewMatrix:e,projectionMatrix:i,eye:s,isOrthographic:o}=I;C&&g.uniformMatrix4fv(C.location,!1,A.cameraMatrix.asArray());const a=A.viewports[0];e&&g.uniformMatrix4fv(e.location,!1,a.viewMatrix.asArray()),i&&g.uniformMatrix4fv(i.location,!1,a.projectionMatrix.asArray()),s&&g.uniform1i(s.location,0),o&&g.uniform1i(o.location,a.isOrthographic)},A.bindViewports=(I,C)=>C()):(A.bindRendererUnifs=I=>{const{cameraMatrix:C}=I;C&&g.uniformMatrix4fv(C.location,!1,A.cameraMatrix.asArray())},A.bindViewports=(I,C)=>{A.viewports.forEach((e,i)=>{let s=e.region;g.viewport(s[0],s[1],s[2],s[3]);const{viewMatrix:o,projectionMatrix:a,eye:n,isOrthographic:B}=I;o&&g.uniformMatrix4fv(o.location,!1,e.viewMatrix.asArray()),a&&g.uniformMatrix4fv(a.location,!1,e.projectionMatrix.asArray()),n&&g.uniform1i(n.location,i),B&&g.uniform1i(B.location,e.isOrthographic),C()})})}drawScene(A){A.directives=[...this.directives,"#define DRAW_COLOR"],A.shaderopts.directives=A.directives;for(const g in this.__passes){const I=this.__passes[g];for(const C of I)C.enabled&&C.draw(A)}}drawHighlightedGeoms(A){this.bindGLBaseRenderer(A),A.directives=[...this.directives,"#define DRAW_HIGHLIGHT"],A.shaderopts.directives=A.directives;for(const g in this.__passes){const I=this.__passes[g];for(const C of I)C.enabled&&C.drawHighlightedGeoms(A)}}drawSceneGeomData(A,g=255){A.pushGLStack(),A.glEnable(this.__gl.DEPTH_TEST),A.glEnable(this.__gl.CULL_FACE),this.bindGLBaseRenderer(A),A.directives=[...this.directives,"#define DRAW_GEOMDATA"],A.shaderopts.directives=A.directives,A.floatGeomBuffer=this.floatGeomBuffer;for(const I in this.__passes){if((Number.parseInt(I)&g)==0)continue;const C=this.__passes[I];for(const e of C)e.enabled&&e.drawGeomData(A)}A.popGLStack()}static registerPass(A,g){oC[g]||(oC[g]=[]),oC[g].push(A)}destroy(){this.resizeObserver.disconnect()}}var Ld=`
precision highp float;
#define GLSLIFY 1

uniform float outlineThickness;
uniform sampler2D highlightDataTexture;
uniform vec2 highlightDataTextureSize;

varying vec2 v_texCoord;

vec3 SobelFactor(vec3 ldc, vec3 ldl, vec3 ldr, vec3 ldu, vec3 ldd)
{
  return abs(ldl - ldc) +
      abs(ldr - ldc) +
      abs(ldu - ldc) +
      abs(ldd - ldc);
}

// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader#L18
vec4 SobelSample(vec2 uv)
{
  vec3 offset = vec3((1.0 / highlightDataTextureSize.x), (1.0 / highlightDataTextureSize.y), 0.0) * outlineThickness;

  vec4 pixelCenter = texture2D(highlightDataTexture, uv);
  vec3 pixelLeft   = texture2D(highlightDataTexture, uv - offset.xz).rgb;
  vec3 pixelRight  = texture2D(highlightDataTexture, uv + offset.xz).rgb;
  vec3 pixelUp     = texture2D(highlightDataTexture, uv + offset.zy).rgb;
  vec3 pixelDown   = texture2D(highlightDataTexture, uv - offset.zy).rgb;

  vec3 sobelNormalVec = SobelFactor(pixelCenter.rgb, pixelLeft, pixelRight, pixelUp, pixelDown);
  
  float sobelNormal = sobelNormalVec.x + sobelNormalVec.y + sobelNormalVec.z;
  
  float outlineDepthMultiplier = 10.0;
  float outlineDepthBias = 2.5;
  sobelNormal = pow(sobelNormal * outlineDepthMultiplier, outlineDepthBias);

  sobelNormal = clamp(sobelNormal, 0.0, 1.0);

  
  float pixelCenterWeight = length(pixelCenter.rgb) > 0.0 ? 1.0 : 0.0;
  float pixelLeftWeight   = length(pixelLeft) > 0.0 ? 1.0 : 0.0;
  float pixelRightWeight  = length(pixelRight) > 0.0 ? 1.0 : 0.0;
  float pixelUpWeight     = length(pixelUp) > 0.0 ? 1.0 : 0.0;
  float pixelDownWeight   = length(pixelDown) > 0.0 ? 1.0 : 0.0;
  
  // Weight each neighbors contribution to the current pixel color.
  pixelCenter.rgb = pixelCenter.rgb * pixelCenterWeight;
  pixelLeft   *= pixelLeftWeight;
  pixelRight  *= pixelRightWeight;
  pixelUp     *= pixelUpWeight;
  pixelDown   *= pixelDownWeight;

  // Add all the weighted contributions, and then normalize.
  vec3 outlineColor = pixelCenter.rgb + pixelLeft + pixelRight +  pixelUp + pixelDown;
  outlineColor /= pixelCenterWeight + pixelLeftWeight + pixelRightWeight + pixelUpWeight + pixelDownWeight;

  return mix(vec4(outlineColor, sobelNormal), pixelCenter, pixelCenter.a);
}

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {
    
  vec4 outlineColor = SobelSample(v_texCoord);
  
  if (outlineColor.a > 0.0001) {
#ifndef ENABLE_ES3
    gl_FragColor = outlineColor;
#else
    fragColor = outlineColor;
#endif
  }
  else {
      discard;
  }
}

`,Ud=`
precision highp float;
#define GLSLIFY 1

attribute vec3 positions;    //(location = 0)

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  v_texCoord = positions.xy+0.5;
  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);
}

`;class kd extends OA{constructor(A){super(A,"HighlightsShader");this.setShaderStage("VERTEX_SHADER",Ud),this.setShaderStage("FRAGMENT_SHADER",Ld)}}var xd=`
#ifndef ENABLE_ES3
#extension GL_EXT_frag_depth: enable
#endif
precision highp float;
#define GLSLIFY 1

uniform sampler2D colorTexture;
uniform sampler2D depthTexture;
uniform vec2 screenSize;
uniform vec2 depthRange;

uniform float outlineThickness;
uniform color outlineColor;
uniform float outlineSensitivity;
uniform float outlineDepthBias;

varying vec2 v_texCoord;

// http://web.archive.org/web/20130416194336/http://olivers.posterous.com/linear-depth-in-glsl-for-real
float LinearEyeDepth(float z_b) {
  float z_n = 2.0 * z_b - 1.0;
  float z_e = 2.0 * depthRange.x * depthRange.y / (depthRange.y + depthRange.x - z_n * (depthRange.y - depthRange.x));
  return z_e;
}

float LogEyeDepth(float z_b) {
  return depthRange.x + ((depthRange.y - depthRange.x) * z_b);
}

// https://www.vertexfragment.com/ramblings/unity-postprocessing-sobel-outline/#depth-based-outline
// https://github.com/ssell/UnitySobelOutline/blob/2e1f4a5b4e703ae2c96aaf08d5518ce58abbaab9/Assets/Resources/Shaders/SobelOutlineHLSL.shader

float SobelDepth(float ldc, float ldl, float ldr, float ldu, float ldd)
{
  return abs(ldl - ldc) +
      abs(ldr - ldc) +
      abs(ldu - ldc) +
      abs(ldd - ldc);
}

float SobelSampleDepth(vec2 uv, vec3 offset)
{
  float pixelCenter = LinearEyeDepth(texture2D(depthTexture, uv).r);
  float pixelLeft   = LinearEyeDepth(texture2D(depthTexture, uv - offset.xz).r);
  float pixelRight  = LinearEyeDepth(texture2D(depthTexture, uv + offset.xz).r);
  float pixelUp     = LinearEyeDepth(texture2D(depthTexture, uv + offset.zy).r);
  float pixelDown   = LinearEyeDepth(texture2D(depthTexture, uv - offset.zy).r);

  float  outlineDepthMultiplier = (1.0 / pixelCenter) * outlineSensitivity;

  return SobelDepth(pixelCenter, pixelLeft, pixelRight, pixelUp, pixelDown) * outlineDepthMultiplier;
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  vec3 offset = vec3((1.0 / screenSize.x), (1.0 / screenSize.y), 0.0) * outlineThickness;
  float sobelDepth = SobelSampleDepth(v_texCoord, offset);
  float sobelValue = pow(sobelDepth, outlineDepthBias);

  float minEdgeValue = 0.25;
  float maxEdgeValue = 0.55;
  sobelDepth = smoothstep(minEdgeValue, maxEdgeValue, sobelValue);

#ifdef ENABLE_ES3
  fragColor = vec4(outlineColor.rgb, sobelDepth);
#else
  fragColor = vec4(mix(texture2D(colorTexture, v_texCoord).rgb, outlineColor.rgb, sobelDepth), 1.0);
#ifdef  GL_EXT_frag_depth
  gl_FragDepthEXT = texture2D(depthTexture, v_texCoord).r;
#endif
#endif

  // float z = texture2D(depthTexture, v_texCoord).r;
  // float near = depthRange.x * 2.0;    // the near plane
  // float far = depthRange.y / 2.0;     // the far plane
  // float c = (2.0 * near) / (far + near - z * (far - near));  // convert to linear values 
  // fragColor = vec4(vec3(c), 1.0);

  

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,Td=`
precision highp float;
#define GLSLIFY 1
attribute vec3 positions;    //(location = 0)

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  v_texCoord = positions.xy+0.5;
  gl_Position = vec4(positions.xy*2.0, 0.0, 1.0);
}
`;class zd extends OA{constructor(A){super(A,"SilhouetteShader");this.setShaderStage("VERTEX_SHADER",Td),this.setShaderStage("FRAGMENT_SHADER",xd)}}const aC=Bg.OPAQUE|Bg.TRANSPARENT|Bg.OVERLAY;class OI extends Md{constructor(A,g={}){super(A,g);this.__exposure=1,this.__gamma=2.2,this.__glEnvMap=null,this.highlightOutlineThickness=1,this.renderMode="pbr",this.outlineMethod="geometry",this.outlineThickness=0,this.outlineColor=new W(.15,.15,.15,1),this.hiddenLineColor=new W(.15,.15,.15,0),this.outlineSensitivity=2,this.outlineDepthBias=.7,this.__rayCastRenderTarget=null,this.__backgroundMapShader=null,this.__backgroundMapShaderBinding=null,this.__rayCastRenderTargetProjMatrix=new NA,this.__exposure=1,this.__gamma=2.2,this.__displayEnvironment=!0,this.__debugMode=0,this.rayCastDist=0,this.rayCastArea=0;const I=this.__gl;this.highlightsShader=new kd(I),this.silhouetteShader=new zd(I),this.__debugTextures=[void 0],this.addShaderPreprocessorDirective("ENABLE_INLINE_GAMMACORRECTION"),g.disableTextures||this.addShaderPreprocessorDirective("ENABLE_TEXTURES"),g.debugGeomIds&&this.addShaderPreprocessorDirective("DEBUG_GEOM_ID")}__bindEnvMap(A){const g=this.__gl;if(A instanceof Qt){if(g.name!=="webgl2")return;A.type==="FLOAT"&&(this.addShaderPreprocessorDirective("ENABLE_PBR"),this.__glEnvMap=new Jl(this,A))}else{const C=A;if(C.type==="FLOAT"?this.__glBackgroundMap=new OC(this.__gl,C):this.__glBackgroundMap=new KA(this.__gl,C),this.__glBackgroundMap.on("loaded",()=>{this.requestRedraw()}),this.__glBackgroundMap.on("updated",()=>{this.requestRedraw()}),!this.__backgroundMapShader){g.__quadVertexIdsBuffer||g.setupInstancedQuad(),this.__backgroundMapShader=new To(this.__gl);const e=this.__backgroundMapShader.compileForTarget();this.__backgroundMapShaderBinding=dg(this.__gl,e.attrs,g.__quadattrbuffers,g.__quadIndexBuffer)}return}this.__glEnvMap.on("loaded",C=>{this.requestRedraw()}),this.__glEnvMap.on("updated",C=>{this.requestRedraw()});const I=new Gn(this.__glEnvMap);this.emit("envMapAssigned",I)}setScene(A){const g=A.envMapParam;g.value!=null&&this.__bindEnvMap(g.value),g.on("valueChanged",()=>{this.__bindEnvMap(g.value)});const I=A.displayEnvMapParam;this.__displayEnvironment=I.value,I.on("valueChanged",()=>{this.__displayEnvironment=I.value,this.requestRedraw()}),super.setScene(A)}addViewport(A){return super.addViewport(A)}get exposure(){return this.__exposure}set exposure(A){this.__exposure=A,this.requestRedraw()}get gamma(){return this.__gamma}set gamma(A){this.__gamma=A,this.requestRedraw()}get displayEnvironment(){return this.__displayEnvironment}set displayEnvironment(A){this.__displayEnvironment=A,this.requestRedraw()}raycastWithRay(A,g,I=.01,C=aC){const e=new D;return e.setLookAt(A.start,A.start.add(A.dir),new f(0,0,1)),this.raycast(e,A,g,I,C)}raycastWithXfo(A,g,I=.01,C=aC){const e=new rg(A.tr,A.ori.getZaxis().negate());return this.raycast(A,e,g,I,C)}raycast(A,g,I,C=.01,e=aC){return(this.rayCastDist!=I||this.rayCastArea!=C)&&(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(C*-.5,C*.5,C*-.5,C*.5,0,I),this.rayCastDist=I,this.rayCastArea=C),this.raycastWithProjection(A,this.__rayCastRenderTargetProjMatrix,g,e)}raycastWithProjection(A,g,I,C=aC){var e;const i=[0,0,3,3],s=new wC(this.__gl);s.cameraMatrix=A.toMat4(),s.viewports=[{region:i,viewMatrix:A.inverse().toMat4(),projectionMatrix:g,isOrthographic:1,fovY:0}];const o=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new fC(o,{type:"FLOAT",format:"RGBA",filter:"NEAREST",createDepthTexture:!0,width:3,height:3,numColorChannels:1})),this.__rayCastRenderTarget.bindForWriting(s,!0),o.enable(o.CULL_FACE),o.enable(o.DEPTH_TEST),o.depthFunc(o.LEQUAL),o.depthMask(!0),this.drawSceneGeomData(s,C),o.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const a=new Float32Array(4*9);o.readPixels(0,0,3,3,o.RGBA,o.FLOAT,a),this.__rayCastRenderTarget.unbindForReading();const n=c=>a[c*4+3]!=0,B=[4,3,5,1,7];let d;for(const c of B)if(n(c)){d=a.subarray(c*4,c*4+4);break}if(!d)return null;const l=Math.round(d[0])&64-1,r=(e=this.getPass(l))===null||e===void 0?void 0:e.getGeomItemAndDist(d);if(r){const c=I.start.add(I.dir.scale(r.dist));return{pointerRay:I,intersectionPos:c,geomItem:r.geomItem,componentId:-1,dist:r.dist,geomData:d}}else return null}raycastCluster(A,g,I,C=.01,e=aC){const i=this.__gl;this.__rayCastRenderTarget||(this.__rayCastRenderTarget=new fC(i,{type:"FLOAT",format:"RGBA",filter:"NEAREST",createDepthTexture:!0,width:3,height:3,numColorChannels:1}),this.__rayCastRenderTargetProjMatrix=new NA),(this.rayCastDist!=I||this.rayCastArea!=C)&&(this.__rayCastRenderTargetProjMatrix.setOrthographicMatrix(C*-.5,C*.5,C*-.5,C*.5,0,I),this.rayCastDist=I,this.rayCastArea=C);const s=[0,0,3,3],o=new wC(this.__gl);o.viewports=[{region:s,viewMatrix:A.inverse().toMat4(),projectionMatrix:this.__rayCastRenderTargetProjMatrix,isOrthographic:1}],o.cameraMatrix=A.toMat4(),this.__rayCastRenderTarget.bindForWriting(o,!0),i.enable(i.CULL_FACE),i.enable(i.DEPTH_TEST),i.depthFunc(i.LEQUAL),i.depthMask(!0),this.drawSceneGeomData(o,e),i.finish(),this.__rayCastRenderTarget.unbindForWriting(),this.__rayCastRenderTarget.bindForReading();const a=new Float32Array(4*9);i.readPixels(0,0,3,3,i.RGBA,i.FLOAT,a),this.__rayCastRenderTarget.unbindForReading();const n=d=>a[d*4+3]!=0,B=[];for(let d=0;d<9;d++)if(n(d)){const l=a.subarray(d*4,d*4+4),r=Math.round(l[0])&64-1,c=this.getPass(r);if(c){const h=c.getGeomItemAndDist(l);if(h){const E=g.start.add(g.dir.scale(h.dist));B.push({pointerRay:g,intersectionPos:E,geomItem:h.geomItem,componentId:-1,dist:h.dist,geomData:l})}}}return B}drawBackground(A){if(this.__glBackgroundMap&&this.__backgroundMapShader&&this.__backgroundMapShaderBinding){if(!this.__glBackgroundMap.isLoaded())return;const g=this.__gl;g.depthMask(!1),this.__backgroundMapShader.bind(A);const I=A.unifs;this.__glBackgroundMap.bindToUniform(A,I.backgroundImage),this.__backgroundMapShaderBinding.bind(A),g.drawQuad()}else this.__glEnvMap&&this.__glEnvMap.draw&&this.__glEnvMap.draw(A)}bindGLRenderer(A){super.bindGLBaseRenderer(A),A.envMap=this.__glEnvMap,A.exposure=this.__exposure,A.renderMode=this.renderMode,A.outlineThickness=this.outlineThickness,A.outlineColor=this.outlineColor,A.hiddenLineColor=this.hiddenLineColor,A.outlineMethod=this.outlineMethod,A.screenQuad=this.screenQuad}drawScene(A){this.bindGLRenderer(A),this.__displayEnvironment&&this.drawBackground(A),super.drawScene(A)}}class _d extends FA{constructor(A,g){super();this.drawIdsArray=null,this.drawIdsBuffer=null,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.gl=A,this.glGeom=g,this.id=g?g.getGeom().getId():this.getId(),this.glGeomItems=[],this.glgeomItems_freeIndices=[],this.glgeomItemEventHandlers=[],this.drawIdsArray=null,this.drawIdsBuffer=null,this.drawIdsBufferDirty=!0,this.highlightedIdsArray=null,this.highlightedIdsBuffer=null,this.highlightedIdsBufferDirty=!0,this.visibleItems=[],this.highlightedItems=[]}getGLGeom(){return this.glGeom}getDrawCount(){return this.visibleItems.length}addGLGeomItem(A){let g;if(this.glgeomItems_freeIndices.length>0?g=this.glgeomItems_freeIndices.pop():(g=this.glGeomItems.length,this.glGeomItems.push(null)),A.geomItem.isVisible()){this.visibleItems.push(g);const C=new sI(1,this.visibleItems.length);this.emit("drawCountChanged",C)}A.geomItem.isHighlighted()&&(this.highlightedItems.push(g),this.highlightedIdsBufferDirty=!0);const I={};I.highlightChanged=C=>{if(A.geomItem.isHighlighted()){if(this.highlightedItems.includes(g))return;this.highlightedItems.push(g);const e=new sI(1,this.highlightedItems.length);this.emit("highlightedCountChanged",e)}else{this.highlightedItems.splice(this.highlightedItems.indexOf(g),1);const e=new sI(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",e)}this.highlightedIdsBufferDirty=!0},A.geomItem.on("highlightChanged",I.highlightChanged),I.visibilityChanged=C=>{if(C.visible){this.visibleItems.push(g);const i=new sI(1,this.visibleItems.length);this.emit("drawCountChanged",i)}else{this.visibleItems.splice(this.visibleItems.indexOf(g),1);const i=new sI(-1,this.visibleItems.length);this.emit("drawCountChanged",i)}this.drawIdsBufferDirty=!0},A.geomItem.on("visibilityChanged",I.visibilityChanged),this.glGeomItems[g]=A,this.glgeomItemEventHandlers[g]=I,this.drawIdsBufferDirty=!0,A.GLGeomItemSet=this}removeGLGeomItem(A){const g=this.glGeomItems.indexOf(A),I=this.glgeomItemEventHandlers[g];if(A.geomItem.off("highlightChanged",I.highlightChanged),A.geomItem.off("visibilityChanged",I.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,A.GLGeomItemSet=null,this.glgeomItems_freeIndices.push(g),A.geomItem.isVisible()){this.visibleItems.splice(this.visibleItems.indexOf(g),1);const C=new sI(-1,this.visibleItems.length);this.emit("drawCountChanged",C)}if(A.geomItem.isHighlighted()){this.highlightedItems.splice(this.highlightedItems.indexOf(g),1);const C=new sI(-1,this.highlightedItems.length);this.emit("highlightedCountChanged",C)}this.drawIdsBufferDirty=!0,this.glGeomItems.length==this.glgeomItems_freeIndices.length&&this.destroy()}updateDrawIDsBuffer(){const A=this.gl;if(!A.floatTexturesSupported){this.drawIdsBufferDirty=!1;return}this.drawIdsBuffer&&this.glGeomItems.length!=this.drawIdsArray.length&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.drawIdsBuffer||(this.drawIdsBuffer=A.createBuffer(),A.bindBuffer(A.ARRAY_BUFFER,this.drawIdsBuffer)),A.bindBuffer(A.ARRAY_BUFFER,this.drawIdsBuffer),A.bufferData(A.ARRAY_BUFFER,this.getDrawIdsArray(),A.STATIC_DRAW),this.drawIdsBufferDirty=!1}getDrawIdsArray(){return this.drawIdsBufferDirty&&((!this.drawIdsArray||this.glGeomItems.length!=this.drawIdsArray.length)&&(this.drawIdsArray=new Float32Array(this.glGeomItems.length)),this.visibleItems.forEach((A,g)=>{this.drawIdsArray[g]=this.glGeomItems[A].getGeomItemId()}),this.drawIdsBufferDirty=!1),this.drawIdsArray}updateHighlightedIDsBuffer(){const A=this.gl;if(!A.floatTexturesSupported){this.highlightedIdsBufferDirty=!1;return}this.highlightedIdsBuffer&&this.glGeomItems.length>this.highlightedIdsArray.length&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.highlightedIdsBuffer||(this.highlightedIdsBuffer=A.createBuffer()),A.bindBuffer(A.ARRAY_BUFFER,this.highlightedIdsBuffer),A.bufferData(A.ARRAY_BUFFER,this.getHighlightedIdsArray(),A.STATIC_DRAW),this.highlightedIdsBufferDirty=!1}getHighlightedIdsArray(){return this.highlightedIdsBufferDirty&&((!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.glGeomItems.length)),this.highlightedItems.forEach((A,g)=>{this.highlightedIdsArray[g]=this.glGeomItems[A].getGeomItemId()}),this.highlightedIdsBufferDirty=!1),this.highlightedIdsArray}draw(A){this.visibleItems.length!=0&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(A,this.visibleItems,this.drawIdsBuffer))}drawHighlighted(A){this.highlightedItems.length!=0&&(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(),this.__bindAndRender(A,this.highlightedItems,this.highlightedIdsBuffer))}drawGeomData(A){this.visibleItems.length!=0&&(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(),this.__bindAndRender(A,this.visibleItems,this.drawIdsBuffer))}__bindAndRender(A,g,I){const C=this.gl,e=A.unifs;if(A.glGeom!=this.glGeom&&(this.glGeom.bind(A),A.glGeom=this.glGeom),!C.floatTexturesSupported||!C.drawElementsInstanced||!A.supportsInstancing)A.unifs.instancedDraw&&C.uniform1i(A.unifs.instancedDraw.location,0),g.forEach(i=>{this.glGeomItems[i].bind(A),A.bindViewports(e,()=>{this.glGeom.draw(A)})});else{A.unifs.instancedDraw&&C.uniform1i(A.unifs.instancedDraw.location,1);const i=A.attrs.instancedIds.location;C.enableVertexAttribArray(i),C.bindBuffer(C.ARRAY_BUFFER,I),C.vertexAttribPointer(i,1,C.FLOAT,!1,1*4,0),C.vertexAttribDivisor(i,1),A.bindViewports(e,()=>{this.glGeom.drawInstanced(A,g.length)})}}destroy(){this.drawIdsBuffer&&(this.gl.deleteBuffer(this.drawIdsBuffer),this.drawIdsBuffer=null),this.highlightedIdsBuffer&&(this.gl.deleteBuffer(this.highlightedIdsBuffer),this.highlightedIdsBuffer=null),this.emit("destructing")}}class Pd extends FA{constructor(A,g){super();this.glGeomItemSets={},this.pass=A,this.__gl=A.renderer.gl,this.glMaterial=g,this.glGeomItemSets={},this.drawCount=0;const I=g.getMaterial(),C=e=>{I.off("opacityChanged",C);for(const i in this.glGeomItemSets){const s=this.glGeomItemSets[i];for(const o of s.glGeomItems){const a=o.geomItem;this.pass.removeGeomItem(a),this.pass.renderer.assignTreeItemToGLPass(a)}}};I.on("opacityChanged",C)}getGLMaterial(){return this.glMaterial}addGLGeomItem(A,g){const I=g.getGeom().getId();let C=this.glGeomItemSets[I];C||(C=new _d(this.__gl,g),this.addGeomItemSet(C)),C.addGLGeomItem(A)}drawCountChanged(A){this.drawCount+=A.change,this.emit("updated")}__materialChanged(){const A=this.glMaterial.getMaterial();if(!this.pass.checkMaterial(A))for(const g in this.glGeomItemSets){const I=this.glGeomItemSets[g];for(const C of I.glGeomItems){const e=C.geomItem;this.pass.removeGeomItem(e),this.pass.renderer.assignTreeItemToGLPass(e)}}}addGeomItemSet(A){const g=A.getGLGeom().getGeom().getId();this.glGeomItemSets[g]=A;const I=A.on("drawCountChanged",C=>{this.drawCountChanged(C)});A.once("destructing",()=>{A.removeListenerById("drawCountChanged",I),delete this.glGeomItemSets[g],Object.keys(this.glGeomItemSets).length==0&&this.emit("destructing")})}draw(A){if(this.drawCount==0)return;const g=!0;this.glMaterial.bind(A,g);for(const I in this.glGeomItemSets)this.glGeomItemSets[I].draw(A);this.glMaterial.unbind(A)}drawHighlighted(A){this.glMaterial.bind(A,!1);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].drawHighlighted(A);this.glMaterial.unbind(A)}drawGeomData(A){this.glMaterial.bind(A,!1);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].draw(A);this.glMaterial.unbind(A)}}class Od extends FA{constructor(A,g,I){super();this.gl=A,this.pass=g,this.glShader=I.glShader,this.glgeomdatashader=I.glgeomdatashader,this.glselectedshader=I.glselectedshader,this.glMaterialGeomItemSets=[]}findMaterialGeomItemSets(A){for(const g of this.glMaterialGeomItemSets)if(g.glMaterial==A)return g;return null}addGLGeomItem(A,g,I){let C=this.findMaterialGeomItemSets(I);C||(C=new Pd(this.pass,I),this.addMaterialGeomItemSets(C)),C.addGLGeomItem(A,g)}addMaterialGeomItemSets(A){this.glMaterialGeomItemSets.push(A);const g=()=>{this.emit("updated")},I=()=>{A.off("updated",g),A.off("destructing",I);const C=this.glMaterialGeomItemSets.indexOf(A);this.glMaterialGeomItemSets.splice(C,1),this.glMaterialGeomItemSets.length==0&&this.emit("destructing")};A.on("updated",g),A.on("destructing",I)}removeMaterialGeomItemSets(A){const g=this.glMaterialGeomItemSets.indexOf(A);this.glMaterialGeomItemSets.splice(g,1)}getMaterialGeomItemSets(){return this.glMaterialGeomItemSets}draw(A){const g=this.glShader;if(!!this.glShader.bind(A)){this.pass.renderer.glGeomItemLibrary.bind(A);for(const I of this.glMaterialGeomItemSets)I.draw(A);g.unbind(A)}}drawHighlightedGeoms(A){if(!(!this.glselectedshader||!this.glselectedshader.bind(A,"highlight"))){this.pass.renderer.glGeomItemLibrary.bind(A);for(const g of this.glMaterialGeomItemSets)g.drawHighlighted(A);this.glselectedshader.unbind(A)}}drawGeomData(A){var g;if(!this.glgeomdatashader||!this.glgeomdatashader.bind(A,"geomData"))return;this.pass.renderer.glGeomItemLibrary.bind(A);const I=this.gl,{floatGeomBuffer:C,passId:e,occlusionCulling:i}=A.unifs;C&&I.uniform1i(C.location,A.floatGeomBuffer?1:0),e&&I.uniform1i(e.location,A.passIndex),i&&I.uniform1i(i.location,(g=A.occlusionCulling)!==null&&g!==void 0?g:0);for(const s of this.glMaterialGeomItemSets)s.drawGeomData(A);this.glgeomdatashader.unbind(A)}}var jd=`
precision highp float;
precision highp int;
#define GLSLIFY 1

import 'imageAtlas.glsl'

uniform sampler2D atlasBillboards;

/* VS Outputs */
varying float v_instanceID;
varying vec2 v_texCoord;
varying float v_alpha;
varying vec4 v_tint;
varying vec3 v_viewPos;

uniform sampler2D instancesTexture;
uniform int instancesTextureSize;

#if defined(DRAW_GEOMDATA)
  uniform int isOrthographic;
  import 'surfaceGeomData.glsl'
#endif // DRAW_GEOMDATA

const int cols_per_instance = 7;

vec4 getHilightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 6);
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int instanceID = int(v_instanceID);
  vec4 imageColor = texture2D(atlasBillboards, v_texCoord) * v_tint;
  imageColor.a *= v_alpha;
  if(imageColor.a < 0.1)
    discard;

#if defined(DRAW_COLOR)
  fragColor = imageColor;
  // fragColor.r = 1.0;
  // fragColor.a = 1.0;
#elif defined(DRAW_GEOMDATA)
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_instanceID, 0.0, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = getHilightColor(instanceID);
  // Skip unhilighting labels.
  if(fragColor.r < 0.001 && fragColor.g < 0.001 && fragColor.b < 0.001)
    discard;
#endif // DRAW_HIGHLIGHT
  
#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,qd=`
precision highp float;
precision highp int;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 cameraMatrix;
uniform int isOrthographic;

import 'GLSLUtils.glsl'

#ifdef ENABLE_FLOAT_TEXTURES

// A sorted attribute of instance Ids so we draw from back to front.
instancedattribute float instanceIds;

import 'transpose.glsl'
import 'imageAtlas.glsl'

uniform sampler2D atlasBillboards_layout;
uniform vec4 atlasBillboards_desc;

uniform sampler2D instancesTexture;
uniform int instancesTextureSize;
uniform int passId;

const int cols_per_instance = 7;

mat4 getMatrix(sampler2D texture, int textureSize, int index) {
  // Unpack 3 x 4 matix columns into a 4 x 4 matrix.
  vec4 col0 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 0);
  vec4 col1 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 1);
  vec4 col2 = fetchTexel(texture, textureSize, (index * cols_per_instance) + 2);
  mat4 result = mat4(col0, col1, col2, vec4(0.0, 0.0, 0.0, 1.0));
  return transpose(result);
  // return mat4(1.0);
}

mat4 getModelMatrix(int id) {
  return getMatrix(instancesTexture, instancesTextureSize, id);
}
vec4 getInstanceData(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 3);
}
vec4 getPivot(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 4);
}
vec4 getTintColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * cols_per_instance) + 5);
}

#else

uniform vec4 atlasBillboards_desc;

uniform mat4 modelMatrix;
uniform vec2 pivot;
uniform vec4 billboardData;
uniform vec4 tintColor;
uniform vec4 layoutData;

#endif

uniform int inVR;

mat4 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {
  // vec3 rr = vec3(sin(roll), 0.0, cos(roll));
  vec3 rr = vec3(0.0, 0.0, 1.0);
  vec3 ww = normalize(target - origin);
  vec3 uu = normalize(cross(rr, ww));
  vec3 vv = normalize(cross(ww, uu));

  return mat4(vec4(uu, 0.0), vec4(vv, 0.0), vec4(ww, 0.0), vec4(origin, 1.0));
}

float map(float value, float inMin, float inMax, float outMin, float outMax) {
  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);
}

/* VS Outputs */
varying float v_instanceID;
varying vec2 v_texCoord;
varying float v_alpha;
varying vec4 v_tint;
varying vec3 v_viewPos;

void main(void) {

#ifdef ENABLE_FLOAT_TEXTURES

  int instanceID = int(instanceIds);
  v_instanceID = float(instanceID) + 0.25;

  mat4 modelMatrix = getModelMatrix(instanceID);
  vec2 pivot = getPivot(instanceID).xy;
  vec4 billboardData = getInstanceData(instanceID);
  vec4 layoutData = fetchTexel(atlasBillboards_layout, int(atlasBillboards_desc.z), int(billboardData.z));
  v_tint = getTintColor(instanceID);

#else

  v_tint = tintColor;

#endif

  vec2 quadVertex = getQuadVertexPositionFromID();
  
  vec2 pos = quadVertex + vec2(0.5, 0.0) - pivot;
  v_texCoord = vec2(quadVertex.x, -quadVertex.y) + 0.5;
  v_alpha = billboardData.w;
  v_texCoord *= layoutData.zw;
  v_texCoord += layoutData.xy;

  float scl = billboardData.x;
  float width = layoutData.z * atlasBillboards_desc.x * scl;
  float height = layoutData.w * atlasBillboards_desc.y * scl;
  int flags = int(billboardData.y);

  // Use cross platform bit flags methods
  bool alignedToCamera = testFlag(flags, 4); // flag = 1<<2
  bool drawOnTop = testFlag(flags, 8); // flag = 1 << 3
  bool fixedSizeOnscreen = testFlag(flags, 16); // flag = 1 << 4

  mat4 modelViewMatrix = viewMatrix * modelMatrix;

  // Note: items in front of the camera will have a negative value here.
  float sc = 1.0;
  if (fixedSizeOnscreen) {
    sc = -modelViewMatrix[3][2];
    
    if (inVR == 1) {
      // During XR sessions, there is a scaling applied to the view matrix
      // which causes a distortion to the line width. We extract that scale here
      // and use to correct the distortion.
      // See also: FatPointsShader
      vec3 viewZ = modelViewMatrix[2].xyz;
      float viewScale = length(viewZ);
      sc /= viewScale;
    }
  }
  
  mat4 modelViewProjectionMatrix;
  if (alignedToCamera) {
    if (inVR == 0) {
      gl_Position = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);
      gl_Position += vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 0.0);
      v_viewPos = gl_Position.xyz;
      gl_Position = projectionMatrix * gl_Position;
    } else {
      vec3 cameraPos = vec3(cameraMatrix[3][0], cameraMatrix[3][1], cameraMatrix[3][2]);
      vec3 billboardPos = vec3(modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2]);
      mat4 lookAt = calcLookAtMatrix(billboardPos, cameraPos, 0.0);
      mat4 modelViewProjectionMatrix = projectionMatrix * viewMatrix * lookAt;
      gl_Position = modelViewProjectionMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0);
      v_viewPos = (modelViewMatrix * vec4(pos.x * width * sc, (pos.y + 0.5) * height * sc, 0.0, 1.0)).xyz;
    }
  }
  else {
    modelViewProjectionMatrix = projectionMatrix * viewMatrix * modelMatrix;
    gl_Position = modelViewProjectionMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0);
    v_viewPos = (modelViewMatrix * vec4(pos.x * width, (pos.y + 0.5) * height, 0.0, 1.0)).xyz;
  }

  // Use cross platform bit flags methods
  if (drawOnTop) {
    if (isOrthographic > 0){
      gl_Position.z = mix(gl_Position.z, -1.0, 0.5);
    } else {
      gl_Position.z = mix(gl_Position.z, -gl_Position.z, 0.5);
    }
  }
}
`;class $d extends OA{constructor(A){super(A,"BillboardShader");this.setShaderStage("VERTEX_SHADER",qd),this.setShaderStage("FRAGMENT_SHADER",jd)}}const Ar=new wA("EnvProjectionShader_template");Ar.addParameter(new vC("projectionCenter",new f(0,0,1.7)));var gr=`
precision highp float;
#define GLSLIFY 1

uniform color BaseColor;
uniform mat4 cameraMatrix;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

/* VS Outputs */
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
varying vec2 v_texCoord;
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying float v_drawItemID;
varying vec3 v_worldPos;

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'GLSLBits.glsl'

uniform int floatGeomBuffer;
uniform int passId;

#if defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif
  float treeItemOpacity = v_geomItemData.y;

#if defined(DRAW_COLOR)
  int debugLevel = 0;
  if (debugLevel == 0) {

    vec3 viewVector = mat3(cameraMatrix) * normalize(-v_viewPos);
    vec3 normal = mat3(cameraMatrix) * v_viewNormal;
    float NdotV = dot(normalize(normal), normalize(viewVector));

    // Modulate the lighting using the texture coord so the line looks round.
    NdotV *= cos((v_texCoord.x - 0.5) * 2.0);

    vec4 color = BaseColor * NdotV;
    fragColor = vec4(color.rgb, BaseColor.a * treeItemOpacity);
  }
  else {
    fragColor = vec4(v_texCoord.x, 0.0, 0.0, 1.0);
  }
#elif defined(DRAW_GEOMDATA)
  int geomItemId = int(v_geomItemId + 0.5);
  int flags = int(v_geomItemData.x + 0.5);

 // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
    vec4 cutAwayData  = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
      discard;
      return;
    }
  }
  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }

  float dist = length(v_viewPos);

  if (floatGeomBuffer != 0) {
    fragColor.r = float(passId); 
    fragColor.g = float(v_drawItemID);
    fragColor.b = 0.0;// TODO: store poly-id or something.
    fragColor.a = dist;
  }
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_geomItemId);
#endif

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,Ir=`
precision highp float;
#define GLSLIFY 1

instancedattribute vec2 segmentIndices;
attribute float vertexIDs;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int isOrthographic;

import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

uniform int geomItemId;
int getGeomItemId() {
  return geomItemId;
}

uniform sampler2D positionsTexture;
uniform int positionsTextureSize;

uniform float LineThickness;
uniform float Overlay;

import 'calcFatLinesViewPos.glsl'

varying vec3 v_viewPos;
varying vec3 v_viewNormal;
varying vec2 v_texCoord;

varying float v_geomItemId;
varying vec4 v_geomItemData;
varying float v_drawItemID;
varying vec3 v_worldPos;

void main(void) {

  int geomItemId = getGeomItemId();
  v_geomItemId = float(geomItemId);
  v_geomItemData = getInstanceData(geomItemId);

  int vertexID = int(vertexIDs);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  vec3 pos;

  #if defined(DRAW_COLOR)
    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, v_viewNormal, v_texCoord, pos);
  #elif defined(DRAW_GEOMDATA)
    vec3  viewNormal;
    vec2  texCoord;
    v_viewPos       = calcFatLinesViewPos(vertexID, modelViewMatrix, viewNormal, texCoord, pos);
    v_drawItemID = float(getGeomItemId());
    v_worldPos      = (modelMatrix * vec4(pos, 1.0)).xyz;
  #endif

  gl_Position     = projectionMatrix * vec4(v_viewPos, 1.0);

  if (isOrthographic > 0){
    gl_Position.z -= mix(gl_Position.z, -1.0, Overlay);
  } else {
    gl_Position.z = mix(gl_Position.z, -gl_Position.z, Overlay);
  }

}
`;class Cr extends OA{constructor(A){super(A,"FatLinesShader");this.setShaderStage("VERTEX_SHADER",Ir),this.setShaderStage("FRAGMENT_SHADER",gr)}bind(A,g){return super.bind(A,g)?(A.supportsInstancing=!1,!0):!1}static supportsInstancing(){return!1}static getMaterialTemplate(){return er}}const er=new Oe("FatLinesShader_template");p.register("FatLinesShader",Cr);var ir=`
precision highp float;
precision highp int;
#define GLSLIFY 1

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int isOrthographic;

import 'GLSLUtils.glsl'

import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

#ifdef ENABLE_MULTI_DRAW
import 'materialparams.glsl'
#else
uniform float Overlay;
#endif

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;

void main(void) {
  v_drawItemIds = getDrawItemIds();
  int geomItemId = int(v_drawItemIds.x + 0.5);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;

  vec4 pos = vec4(positions, 1.);
  vec4 viewPos = (modelViewMatrix * pos);
  gl_Position = projectionMatrix * viewPos;

  v_viewPos = viewPos.xyz;
#ifdef ENABLE_TEXTURES
  v_textureCoord = texCoords;
  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
#endif

  //////////////////////////////////////////////
  // Overlay

#ifdef ENABLE_MULTI_DRAW
  vec2 materialCoords = v_geomItemData.zw;
  vec4 materialValue1 = getMaterialValue(materialCoords, 1);
  float overlay = materialValue1.x;
#else
  float overlay = Overlay;
#endif

  if (isOrthographic > 0){
    gl_Position.z -= overlay;
  } else {
    gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);
  }

  //////////////////////////////////////////////
  
  v_worldPos      = (modelMatrix * pos).xyz;
}
`,tr=`
precision highp float;
precision highp int;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'gamma.glsl'
import 'materialparams.glsl'

#ifdef DEBUG_GEOM_ID
import 'debugColors.glsl'
#endif

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
#endif

#endif // ENABLE_MULTI_DRAW

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

#if defined(DRAW_GEOMDATA)
  uniform int isOrthographic;
  import 'surfaceGeomData.glsl'
#elif defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int geomItemId = int(v_drawItemIds.x + 0.5);
  int flags = int(v_geomItemData.x + 0.5);
  float treeItemOpacity = v_geomItemData.y;

  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
  {
    vec4 cutAwayData   = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
      discard;
      return;
    }
  }

  //////////////////////////////////////////////
  // Material
#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  if (v_drawItemIds.z > 0.5) {
    materialCoords.x = v_drawItemIds.z;
  }
  vec4 baseColor = getMaterialValue(materialCoords, 0);

#else // ENABLE_MULTI_DRAW

#ifndef ENABLE_TEXTURES
  vec4 baseColor = BaseColor;
#else
  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
#endif // ENABLE_TEXTURES

#endif // ENABLE_MULTI_DRAW

  baseColor.a *= treeItemOpacity;
  if (baseColor.a < 0.001) discard;

#if defined(DRAW_COLOR)
  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
    if (!gl_FrontFacing) {
#ifdef ENABLE_ES3
      fragColor = cutColor;
#else
      gl_FragColor = cutColor;
#endif
      return;
    }
  }

  //////////////////////////////////////////////
  fragColor = baseColor;

#ifdef DEBUG_GEOM_ID
  // ///////////////////////
  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)
  float geomId = v_geomItemData.w;
  fragColor.rgb = getDebugColor(geomId);
  // ///////////////////////
#endif

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb);
#endif

#elif defined(DRAW_GEOMDATA)

  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }
  if (occlusionCulling != 0) {
    // Transparent geoms do not render to the occlusion buffer
    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {
      discard;
      return;
    }
  }
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_drawItemIds.x);
#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`;class sr extends OA{constructor(A){super(A,"FlatSurfaceShader");this.setShaderStage("VERTEX_SHADER",ir),this.setShaderStage("FRAGMENT_SHADER",tr)}bind(A,g){super.bind(A,g),A.pushGLStack();const I=this.__gl;return A.glDisable(I.CULL_FACE),!0}unbind(A){return super.unbind(A),this.__gl,A.popGLStack(),!0}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor");let C;I instanceof VA&&I.colorSpace==cg.Gamma?C=I.value.toLinear():C=I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a;const e=A.getParameter("Overlay");return e&&(g[4]=e.getValue()),g}static getMaterialTemplate(){return or}}const or=new _C("FlatSurfaceShader_template");p.register("FlatSurfaceShader",sr);var ar=`
precision highp float;
precision highp int;
#define GLSLIFY 1

attribute vec3 positions;
attribute vec3 positionsNext;

import 'GLSLUtils.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int isOrthographic;

#ifdef ENABLE_MULTI_DRAW
import 'materialparams.glsl'
#else
uniform float Overlay;
#endif

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_worldPos;
varying vec3 v_nextVertexDist;

void main(void) {
  int geomItemId = getGeomItemId();
  v_geomItemId = float(geomItemId);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);
  vec4 viewPosNext = modelViewMatrix * vec4(positionsNext, 1.0);

#ifdef ENABLE_ES3
  float nextVertexDist = length(viewPosNext.xyz - viewPos.xyz);
  if (imod(gl_VertexID, 2) == 0) {
    v_nextVertexDist.x = nextVertexDist;
    v_nextVertexDist.y = 0.0;
  } else {
    v_nextVertexDist.x = 0.0;
    v_nextVertexDist.y = nextVertexDist;
  }
  v_nextVertexDist.z = float(gl_VertexID);
#endif

  v_viewPos = viewPos.xyz;
  gl_Position = projectionMatrix * viewPos;
    

  //////////////////////////////////////////////
  // Overlay

#ifdef ENABLE_MULTI_DRAW
  vec2 materialCoords = v_geomItemData.zw;
  vec4 materialValue1 = getMaterialValue(materialCoords, 1);
  float overlay = materialValue1.y;
#else
  float overlay = Overlay;
#endif

   
#if defined(DRAW_GEOMDATA)
  float _overlay = mix(overlay, 1.0, 0.0001);
#else
  float _overlay = overlay;
#endif

  if (isOrthographic > 0){
    gl_Position.z -= _overlay;
  } else {
    gl_Position.z = mix(gl_Position.z, -gl_Position.z, _overlay);
  }

  //////////////////////////////////////////////
  
  
  vec4 pos = vec4(positions, 1.);
  v_worldPos      = (modelMatrix * pos).xyz;
}
`,nr=`
precision highp float;
precision highp int;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'materialparams.glsl'

#if defined(DRAW_COLOR)

uniform int occluded;
uniform vec4 hiddenLineColor;

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;
uniform float Opacity;

uniform color OccludedColor;

#endif // ENABLE_MULTI_DRAW

#elif defined(DRAW_GEOMDATA)

uniform int isOrthographic;

import 'surfaceGeomData.glsl'

#elif defined(DRAW_HIGHLIGHT)

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else // ENABLE_FLOAT_TEXTURES

uniform vec4 highlightColor;

vec4 getHighlightColor() {
  return highlightColor;
}

#endif // ENABLE_FLOAT_TEXTURES

#endif // DRAW_HIGHLIGHT

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_worldPos;
varying vec3 v_nextVertexDist;

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int geomItemId = int(v_geomItemId + 0.5);
  int flags = int(v_geomItemData.x + 0.5);
  float treeItemOpacity = v_geomItemData.y;

  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
  {
    vec4 cutAwayData   = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
      discard;
      return;
    }
  }

  //////////////////////////////////////////////
  // Material

#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  vec4 BaseColor = getMaterialValue(materialCoords, 0);
  vec4 matValue1 = getMaterialValue(materialCoords, 1);
  vec4 matValue2 = getMaterialValue(materialCoords, 2);
  float Opacity  = matValue1.r;
#endif // ENABLE_MULTI_DRAW

  //////////////////////////////////////////////
  // Color
#if defined(DRAW_COLOR)

  fragColor = BaseColor;
  
  if (occluded == 1) {
    fragColor = hiddenLineColor;
  }

  fragColor.a *= Opacity * treeItemOpacity;

  //////////////////////////////////////////////
  // GeomData
#elif defined(DRAW_GEOMDATA)
  // Cutaways
  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }
  
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);
  
  //////////////////////////////////////////////
  // Highlight
#elif defined(DRAW_HIGHLIGHT)
  
  fragColor = getHighlightColor(geomItemId);

#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`;class Br extends OA{constructor(A){super(A,"LinesShader");this.setShaderStage("VERTEX_SHADER",ar),this.setShaderStage("FRAGMENT_SHADER",nr)}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor");let C;return I instanceof VA&&I.colorSpace==cg.Gamma?C=I.value.toLinear():C=I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a,g[4]=A.getParameter("Opacity").value,g[5]=A.getParameter("Overlay").value,g}static getMaterialTemplate(){return lr}}const lr=new Dg("LinesShader_template");p.register("LinesShader",Br);var dr=`
precision highp float;
#define GLSLIFY 1

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;

#endif

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'materialparams.glsl'

#if defined(DRAW_GEOMDATA)

uniform int floatGeomBuffer;
uniform int passId;

import 'GLSLBits.glsl'

#elif defined(DRAW_HIGHLIGHT)

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else // ENABLE_FLOAT_TEXTURES

uniform vec4 highlightColor;

vec4 getHighlightColor() {
  return highlightColor;
}

#endif // ENABLE_FLOAT_TEXTURES

#endif // DRAW_HIGHLIGHT

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
/* VS Outputs */

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  //////////////////////////////////////////////
  // Color
#if defined(DRAW_COLOR)

#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  vec4 baseColor = getMaterialValue(materialCoords, 0);
  vec4 matValue1 = getMaterialValue(materialCoords, 1);
  float pointSize       = baseColor.a * matValue1.r;
  float overlay      = matValue1.g;

#else // ENABLE_MULTI_DRAW

  vec4 baseColor = BaseColor;

#endif // ENABLE_MULTI_DRAW

  fragColor = baseColor;

  //////////////////////////////////////////////
  // GeomData
#elif defined(DRAW_GEOMDATA)

  float viewDist = length(v_viewPos);

  if (floatGeomBuffer != 0) {
    fragColor.r = float(passId); 
    fragColor.g = float(v_geomItemId);
    fragColor.b = 0.0;// TODO: store poly-id or something.
    fragColor.a = viewDist;
  }
  else {
    ///////////////////////////////////
    // UInt8 buffer
    fragColor.r = mod(v_geomItemId, 256.) / 256.;
    fragColor.g = (floor(v_geomItemId / 256.) + (float(passId) * 64.)) / 256.;

    // encode the dist as a 16 bit float
    vec2 float16bits = encode16BitFloatInto2xUInt8(viewDist);
    fragColor.b = float16bits.x;
    fragColor.a = float16bits.y;
  }

  //////////////////////////////////////////////
  // Highlight
#elif defined(DRAW_HIGHLIGHT)
  
  int geomItemId = int(v_geomItemId + 0.5);
  fragColor = getHighlightColor(geomItemId);

#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,rr=`
precision highp float;
#define GLSLIFY 1

attribute vec3 positions;

import 'GLSLUtils.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int isOrthographic;

#ifdef ENABLE_MULTI_DRAW
import 'materialparams.glsl'
#else
uniform float PointSize;
uniform float Overlay;
#endif

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;

void main(void) {
  int geomItemId = getGeomItemId();
  v_geomItemId = float(geomItemId);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  
  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);
  gl_Position = projectionMatrix * viewPos;
  

  //////////////////////////////////////////////
  // Material
#ifdef ENABLE_MULTI_DRAW
  vec2 materialCoords = v_geomItemData.zw;
  vec4 materialValue1 = getMaterialValue(materialCoords, 1);
  int maintainScreenSize = int(materialValue1.x + 0.5);
  float pointSize = materialValue1.x;
  float overlay = materialValue1.y;
#else
  float pointSize = PointSize;
  float overlay = Overlay;
#endif
  //////////////////////////////////////////////

  // Note: as of 22/01/2021 gl_PointSize has stopped working again...
  gl_PointSize = pointSize;

#if defined(DRAW_GEOMDATA)
  // Make the geom data point size at least 8 pixels across, else its impossible to hit.
  gl_PointSize = max(8.0, pointSize);
#endif

  if (isOrthographic > 0){
    gl_Position.z -= overlay;
  } else {
    gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);
  }
  
  v_viewPos = -viewPos.xyz;
}
`;class cr extends OA{constructor(A){super(A,"PointsShader");this.setShaderStage("VERTEX_SHADER",rr),this.setShaderStage("FRAGMENT_SHADER",dr)}static getPackedMaterialData(A){const g=new Float32Array(12),I=A.getParameter("BaseColor");let C;return I instanceof VA&&I.colorSpace==cg.Gamma?C=I.value.toLinear():C=I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a,g[4]=A.getParameter("PointSize").value,g[5]=A.getParameter("Overlay").value,g}static getMaterialTemplate(){return hr}}const hr=new qe("PointsShader_template");p.register("PointsShader",cr);var mr=`
precision highp float;
precision highp int;
#define GLSLIFY 1

instancedattribute vec3 positions;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int isOrthographic;

import 'GLSLUtils.glsl' 
import 'inverse.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'
import 'quadVertexFromID.glsl'

uniform int geomItemId;
int getGeomItemId() {
  return geomItemId;
}

uniform float PointSize;
uniform float Overlay;

/* VS Outputs */
varying vec2 v_texCoord;
varying vec3 v_viewPos;
varying float v_geomItemId;

void main(void) {
  int geomItemId = getGeomItemId();
  vec2 quadPointPos = getQuadVertexPositionFromID();
  v_texCoord = quadPointPos + 0.5;

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  
  vec4 viewPos = modelViewMatrix * vec4(positions, 1.);

  // During XR sessions, there is a scaling applied to the view matrix
  // which causes a distortion to the line width. We extract that scale here
  // and use to correct the distortion.
  // See also: FatLinesShader
  vec3 viewZ = modelViewMatrix[2].xyz;
  float viewScale = length(viewZ);
  viewPos += vec4(vec3(quadPointPos, 0.0) * PointSize * viewScale, 0.);

  // Generate a quad which is 0.5 * PointSize closer towards
  // us. This allows points to be visualized even if snug on 
  // a surface. (else they get fully clipped)
  viewPos.z += 0.5 * PointSize;

  v_geomItemId = float(getGeomItemId());
  v_viewPos = -viewPos.xyz;
  
  gl_Position = projectionMatrix * viewPos;

  if (isOrthographic > 0){
    gl_Position.z -= Overlay;
  } else {
    gl_Position.z = mix(gl_Position.z, -gl_Position.z, Overlay);
  }
}
`,Gr=`
precision highp float;
precision highp int;
#define GLSLIFY 1

import 'constants.glsl'

uniform color BaseColor;
uniform float Rounded;
uniform float BorderWidth;

/* VS Outputs */
varying vec2 v_texCoord;
varying vec3 v_viewPos;
varying float v_geomItemId;

#ifdef ENABLE_ES3
out vec4 fragColor;
#endif

#if defined(DRAW_GEOMDATA)
  uniform int isOrthographic;
  import 'surfaceGeomData.glsl'
#elif defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

void main(void) {

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

float dist = length(v_texCoord - 0.5);
if (dist > 0.5)
  discard;

#if defined(DRAW_COLOR)

  if (dist > 0.5 - (BorderWidth * 0.5))
    fragColor = vec4(0.,0.,0.,1.);
  else {
    // Modulate the lighting using the texture coord so the point looks round.
    float NdotV = cos(dist * PI);

    fragColor = BaseColor * mix(1.0, NdotV, Rounded);
  }

#elif defined(DRAW_GEOMDATA)
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_geomItemId);
#endif // DRAW_HIGHLIGHT

  

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`;class Er extends OA{constructor(A){super(A,"FatPointsShader");this.setShaderStage("VERTEX_SHADER",mr),this.setShaderStage("FRAGMENT_SHADER",Gr)}bind(A,g){return super.bind(A,g)?(A.supportsInstancing=!1,!0):!1}static supportsInstancing(){return!1}static getMaterialTemplate(){return Qr}}const Qr=new je("FatPointsShader_template");p.register("FatPointsShader",Er);var ur=`precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl'
import 'cutaways.glsl'
import 'gamma.glsl'
import 'materialparams.glsl'

#ifdef DEBUG_GEOM_ID
import 'debugColors.glsl'
#endif

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;
/* VS Outputs */

uniform mat4 cameraMatrix;
uniform int isOrthographic;

#ifdef ENABLE_ES3
    out vec4 fragColor;
#endif

#if defined(DRAW_COLOR)

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;
uniform float Opacity;
uniform float EmissiveStrength;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
uniform sampler2D OpacityTex;
uniform int OpacityTexType;
uniform sampler2D EmissiveStrengthTex;
uniform int EmissiveStrengthTexType;
#endif // ENABLE_TEXTURES

#endif // ENABLE_MULTI_DRAW

import 'computeViewNormal.glsl'
  
// end DRAW_COLOR
#elif defined(DRAW_GEOMDATA)
  import 'surfaceGeomData.glsl'
#elif defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif
  int geomItemId = int(v_drawItemIds.x + 0.5);
  int elemId = int(v_drawItemIds.y + 0.5);
  int perFaceMaterialId = int(v_drawItemIds.z);
  int flags = int(v_geomItemData.x + 0.5);
  float treeItemOpacity = v_geomItemData.y;

  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
  {
    vec4 cutAwayData   = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
      discard;
      return;
    }
  }

#if defined(DRAW_COLOR)
  // Cutaways
  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) 
  {
    if (!gl_FrontFacing) {
#ifdef ENABLE_ES3
      fragColor = cutColor;
#else
      gl_FragColor = cutColor;
#endif
      return;
    }
  }

  //////////////////////////////////////////////
  // Normals
  
  vec3 viewNormal;
  if (length(v_viewNormal) < 0.1) {
    viewNormal = computeViewNormal(v_viewPos);
  } else {
    viewNormal = normalize(v_viewNormal);
  }
  vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);
  
  vec3 viewVector;
  if (isOrthographic == 0)
    viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));
  else 
    viewVector = vec3(-cameraMatrix[2][0], -cameraMatrix[2][1], -cameraMatrix[2][2]);
  
  //////////////////////////////////////////////
  // Material

#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  if (v_drawItemIds.z > 0.5) {
    materialCoords.x = v_drawItemIds.z;
  }
  vec4 baseColor      = getMaterialValue(materialCoords, 0);
  vec4 matValue1      = getMaterialValue(materialCoords, 1);
  float opacity       = baseColor.a * matValue1.r;
  float emission      = matValue1.g;

#else // ENABLE_MULTI_DRAW

#ifndef ENABLE_TEXTURES
  vec4 baseColor      = BaseColor;
  float emission      = EmissiveStrength;
  float opacity       = baseColor.a * Opacity;
#else
  vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
  float opacity       = baseColor.a * getLuminanceParamValue(Opacity, OpacityTex, OpacityTexType, v_textureCoord) * treeItemOpacity;
  float emission      = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, v_textureCoord);
#endif

#endif // ENABLE_MULTI_DRAW

  // Hacky simple irradiance. 
  float ndotv = dot(normal, viewVector);
  if (ndotv < 0.0) {
    normal = -normal;
    ndotv = dot(normal, viewVector);

    // Note: these 2 lines can be used to debug inverted meshes.
    //baseColor = vec4(1.0, 0.0, 0.0, 1.0);
    //ndotv = 1.0;
  }

  fragColor = vec4((ndotv * baseColor.rgb) + (emission * baseColor.rgb), opacity);

  // Note: the 'treeItemOpacity' is not an input to the lighting, 
  // as we want to also blend off the specular reflections to make an object
  // fade away to nothing. (not become a transparent glass object).
  fragColor.a *= treeItemOpacity;

#ifdef DEBUG_GEOM_ID
  // ///////////////////////
  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)
  float geomId = v_geomItemData.w;
  fragColor.rgb = getDebugColor(geomId);
  // ///////////////////////
#endif

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb);
#endif

#elif defined(DRAW_GEOMDATA)

  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }
  if (occlusionCulling != 0) {
    // Transparent geoms do not render to the occlusion buffer
    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {
      discard;
      return;
    }
  }
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_drawItemIds.x);
#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}`,br=`precision highp float;
#define GLSLIFY 1

attribute vec3 positions;
attribute vec3 normals;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

import 'GLSLUtils.glsl'
import 'transpose.glsl'
import 'inverse.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;

void main(void) {
  v_drawItemIds = getDrawItemIds();
  int geomItemId = int(v_drawItemIds.x + 0.5);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;

  vec4 pos = vec4(positions, 1.);
  vec4 viewPos    = modelViewMatrix * pos;
  gl_Position     = projectionMatrix * viewPos;

  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
  v_viewPos       = -viewPos.xyz;
  v_viewNormal    = normalMatrix * normals;

#ifdef ENABLE_TEXTURES
  v_textureCoord  = texCoords;
  // v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
#endif

  v_worldPos      = (modelMatrix * pos).xyz;
}
`;class yr extends OA{constructor(A){super(A,"SimpleSurfaceShader");this.setShaderStage("VERTEX_SHADER",br),this.setShaderStage("FRAGMENT_SHADER",ur)}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor");let C;return I instanceof VA&&I.colorSpace==cg.Gamma?C=I.value.toLinear():C=I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a,g[4]=A.getParameter("Opacity").value,g[5]=A.getParameter("EmissiveStrength").value,g}static getMaterialTemplate(){return Zr}}const Zr=new Ai("SimpleSurfaceShader_template");p.register("SimpleSurfaceShader",yr);var Rr=`
precision highp float;
precision highp int;
#define GLSLIFY 1

attribute vec3 positions;
attribute vec3 normals;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform int isOrthographic;

// Now that we render multiple types of geometry from a single shader
// we need to know what kind of geometry it is...
uniform int geomType;

uniform float outlineThickness;
uniform vec2 viewportSize;

// should be imported by bottom 3
import 'GLSLUtils.glsl'
import 'transpose.glsl'
import 'inverse.glsl'

import 'geomItemId.glsl'
import 'geomType.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;
/* VS Outputs */

#if defined(DRAW_COLOR)
#elif defined(DRAW_GEOMDATA)
#elif defined(DRAW_HIGHLIGHT)
#endif // DRAW_HIGHLIGHT

void main(void) {

  v_drawItemIds = getDrawItemIds();
  int geomItemId = int(v_drawItemIds.x + 0.5);
  v_geomItemData = getInstanceData(geomItemId);
  mat4 modelMatrix = getModelMatrix(geomItemId);

  vec4 pos = vec4(positions, 1.);
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  vec4 viewPos    = modelViewMatrix * pos;
  gl_Position     = projectionMatrix * viewPos;
  v_viewPos = -viewPos.xyz;
  v_worldPos      = (modelMatrix * pos).xyz;

  mat3 normalMatrix = mat3(transpose(inverse(modelViewMatrix)));
  v_viewPos       = -viewPos.xyz;
  v_viewNormal    = normalMatrix * normals;
  
  // offset slightly the lines and points to make them clearly defined.
  // This ensures that lines drawn over surfaces are solid and not clipped
  // at all by the surface.
  if (geomType == TRIANGLES) {
    if (outlineThickness > 0.00001) {
      vec2 screenNormal = v_viewNormal.xy;
      gl_Position.xy += normalize(screenNormal) * ((2.0 / viewportSize) * outlineThickness) * gl_Position.w;
    }
  }
  else if (geomType == LINES) { // start 'LINES'
    float overlay = 0.00003;
    if (isOrthographic > 0){
      gl_Position.z -= overlay;
    } else {
      gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);
    }
  } // end 'LINES'
  else if (geomType == POINTS) { // start 'POINTS'
    float overlay = 0.00005;
    if (isOrthographic > 0){
      gl_Position.z -= overlay;
    } else {
      gl_Position.z = mix(gl_Position.z, -gl_Position.z, overlay);
    }
  }  // end 'POINTS'

#ifdef ENABLE_TEXTURES
  v_textureCoord  = texCoords;
#endif

}
`,fr=`precision highp float;
precision highp int;
#define GLSLIFY 1
import 'GLSLUtils.glsl'
import 'drawItemTexture.glsl' 
import 'cutaways.glsl'
import 'gamma.glsl'
import 'materialparams.glsl'
import 'GLSLBits.glsl'

/* VS Outputs */
varying vec4 v_drawItemIds;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
varying vec3 v_viewNormal;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif
varying vec3 v_worldPos;
/* VS Outputs */

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

// Now that we render multiple types of geometry from a single shader
// we need to know what kind of geometry it is...
uniform int geomType;
import 'geomType.glsl'

uniform int isOrthographic;

#if defined(DRAW_COLOR)

uniform int renderMode;
uniform int occluded;
uniform float outlineThickness;
uniform vec4 hiddenLineColor;

#ifdef ENABLE_INLINE_GAMMACORRECTION
uniform float exposure;
#endif

uniform mat4 cameraMatrix;

#ifndef ENABLE_MULTI_DRAW

uniform color BaseColor;
uniform float AmbientOcclusion;
uniform float Roughness;
uniform float Metallic;
uniform float Reflectance;
uniform float EmissiveStrength;
uniform float Opacity;

uniform color EdgeColor;
uniform color PointColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;

uniform sampler2D AmbientOcclusionTex;
uniform int AmbientOcclusionTexType;

#ifdef ENABLE_PBR
uniform sampler2D RoughnessTex;
uniform int RoughnessTexType;

uniform sampler2D MetallicTex;
uniform int MetallicTexType;

uniform sampler2D ReflectanceTex;
uniform int ReflectanceTexType;

uniform sampler2D NormalTex;
uniform int NormalTexType;
#endif // ENABLE_PBR

uniform sampler2D EmissiveStrengthTex;
uniform int EmissiveStrengthTexType;

#endif // ENABLE_TEXTURES
#endif // ENABLE_MULTI_DRAW

import 'PBRSurfaceRadiance.glsl'

#ifdef ENABLE_PBR
mat3 cotangentFrame( in vec3 normal, in vec3 pos, in vec2 texCoord ) {
  // https://stackoverflow.com/questions/5255806/how-to-calculate-tangent-and-binormal
  vec3 n = normal;
  // derivations of the fragment position
  vec3 pos_dx = dFdx( pos );
  vec3 pos_dy = dFdy( pos );
  // derivations of the texture coordinate
  vec2 texC_dx = dFdx( texCoord );
  vec2 texC_dy = dFdy( texCoord );
  // tangent vector and binormal vector
  vec3 t = -(texC_dy.y * pos_dx - texC_dx.y * pos_dy);
  vec3 b = -(texC_dx.x * pos_dy - texC_dy.x * pos_dx);

  t = t - n * dot( t, n ); // orthonormalization ot the tangent vectors
  b = b - n * dot( b, n ); // orthonormalization of the binormal vectors to the normal vector
  b = b - t * dot( b, t ); // orthonormalization of the binormal vectors to the tangent vector
  mat3 tbn = mat3( normalize(t), normalize(b), n );

  return tbn;
}
#endif

import 'computeViewNormal.glsl'

#ifdef DEBUG_GEOM_ID
import 'debugColors.glsl'
#endif

// end DRAW_COLOR
#elif defined(DRAW_GEOMDATA)

import 'surfaceGeomData.glsl'

#elif defined(DRAW_HIGHLIGHT)
import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

void main(void) {
  #ifndef ENABLE_ES3
    vec4 fragColor;
  #endif
  
  int geomItemId = int(v_drawItemIds.x + 0.5);
  int elemId = int(v_drawItemIds.y + 0.5);
  int perFaceMaterialId = int(v_drawItemIds.z);
  int flags = int(v_geomItemData.x + 0.5);
  float treeItemOpacity = v_geomItemData.y;

  if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
    vec4 cutAwayData   = getCutaway(geomItemId);
    vec3 planeNormal = cutAwayData.xyz;
    float planeDist = cutAwayData.w;
    if (cutaway(v_worldPos, planeNormal, planeDist)) {
        discard;
        return;
    }
  }
  vec2 materialCoords = v_geomItemData.zw;
  if (v_drawItemIds.z > 0.5) {
    materialCoords.x = v_drawItemIds.z;
  }
  
#if defined(DRAW_COLOR)

  if (geomType == TRIANGLES) { // start 'TRIANGLES'

  // Cutaways
    if (testFlag(flags, GEOMITEM_FLAG_CUTAWAY)) {
      if (!gl_FrontFacing) {
#ifdef ENABLE_ES3
        fragColor = cutColor;
#else
        gl_FragColor = cutColor;
#endif
        return;
      }
    }

    //////////////////////////////////////////////
    // Normals
    vec3 viewNormal;
    if (length(v_viewNormal) < 0.1) {
      viewNormal = computeViewNormal(v_viewPos);
    } else {
      viewNormal = normalize(v_viewNormal);
    }
    vec3 normal = normalize(mat3(cameraMatrix) * viewNormal);
    
    vec3 viewVector;
    if (isOrthographic == 0)
      viewVector = normalize(mat3(cameraMatrix) * normalize(v_viewPos));
    else 
      viewVector = vec3(cameraMatrix[2][0], cameraMatrix[2][1], cameraMatrix[2][2]);
      
    if (dot(normal, viewVector) < 0.0) {
      normal = -normal;
      // Note: this line can be used to debug inverted meshes.
      //material.baseColor = vec3(1.0, 0.0, 0.0);
    }

    //////////////////////////////////////////////
    // Material

    MaterialParams material;

#ifdef ENABLE_MULTI_DRAW
    vec4 matValue0      = getMaterialValue(materialCoords, 0);
    vec4 matValue1      = getMaterialValue(materialCoords, 1);
    vec4 matValue2      = getMaterialValue(materialCoords, 2);

    material.baseColor     = matValue0.rgb;
    material.ambientOcclusion      = matValue1.r;
    material.metallic      = matValue1.g;
    material.roughness     = matValue1.b;
    material.reflectance   = matValue1.a;

    material.emission      = matValue2.r;
    material.opacity       = matValue2.g * matValue0.a;
    if (material.opacity < 0.001) discard;

#else // ENABLE_MULTI_DRAW

#ifndef ENABLE_TEXTURES
    material.baseColor     = BaseColor.rgb;
    material.emission      = EmissiveStrength;

#ifdef ENABLE_PBR
    material.roughness     = Roughness;
    material.metallic      = Metallic;
    material.reflectance   = Reflectance;
#endif

#else // ENABLE_TEXTURES
    // Planar YZ projection for texturing, repeating every meter.
    // vec2 texCoord       = v_worldPos.xz * 0.2;
    vec2 texCoord          = v_textureCoord;

    vec4 baseColor         = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, texCoord);

    material.ambientOcclusion = getLuminanceParamValue(AmbientOcclusion, AmbientOcclusionTex, AmbientOcclusionTexType, texCoord);
    material.baseColor     = baseColor.rgb;
    
    material.opacity       = Opacity * baseColor.a;
    if (material.opacity < 0.001) discard;

#ifdef ENABLE_PBR

    material.metallic      = getLuminanceParamValue(Metallic, MetallicTex, MetallicTexType, texCoord);
    material.roughness     = getLuminanceParamValue(Roughness, RoughnessTex, RoughnessTexType, texCoord);

    // TODO: Communicate that this tex contains the roughness as well.
    if (MetallicTexType != 0) {
      vec4 metallicRoughness = vec4(Metallic, Roughness, 0.0, 1.0);
      metallicRoughness     = texture2D(MetallicTex, texCoord);
      material.roughness     = metallicRoughness.g;
      material.metallic     = metallicRoughness.b;
    }

    material.reflectance   = getLuminanceParamValue(Reflectance, ReflectanceTex, ReflectanceTexType, texCoord);
#endif // ENABLE_PBR
    material.emission         = getLuminanceParamValue(EmissiveStrength, EmissiveStrengthTex, EmissiveStrengthTexType, texCoord);
#endif // ENABLE_TEXTURES

#ifdef ENABLE_TEXTURES
#ifdef ENABLE_PBR
    if (NormalTexType != 0) {
      mat3 tbn = cotangentFrame(normal, viewVector, texCoord);
      normal = normalize(tbn * (texture2D(NormalTex, texCoord).rgb * 2.0 - 1.0));
    }
#endif // ENABLE_PBR
#endif // ENABLE_TEXTURES
#endif // ENABLE_MULTI_DRAW

    if (outlineThickness > 0.00001) {
#ifdef ENABLE_MULTI_DRAW
      vec4 edgeColor      = getMaterialValue(materialCoords, 3);
      vec4 matValue2      = getMaterialValue(materialCoords, 2);
      float opacity       = matValue2.g;
#else 
      vec4 edgeColor      = EdgeColor;
      float opacity        = Opacity;
#endif // ENABLE_MULTI_DRAW
      edgeColor.a = edgeColor.a * opacity * treeItemOpacity;
      if (edgeColor.a < 0.001) discard;
      fragColor = edgeColor;
    } else {
      if (renderMode == 1) { // Flat
        fragColor = vec4(material.baseColor, material.opacity);
      } else if (renderMode == 2) { // Shaded
        // simple irradiance. 
        float ndotv = dot(normal, viewVector);
        fragColor = vec4((ndotv * material.baseColor) + (material.emission * material.baseColor), material.opacity);
      } else if (renderMode == 3) { // PBR
        fragColor = pbrSurfaceRadiance(material, normal, viewVector);
      }
      
      // Note: the 'treeItemOpacity' is not an input to the PBR lighting, 
      // as we want to also blend off the specular reflections to make an object
      // fade away to nothing. (not become a transparent glass object).
      fragColor.a *= treeItemOpacity;

      // Debugging code to help understand what might be happening in the shader.
      // fragColor = vec4(texture2D(NormalTex, texCoord).rgb, 1.0);
      // fragColor = metallicRoughness;
      // fragColor = vec4(material.baseColor, 1.0);;
      // fragColor = vec4(vec3(material.metallic), 1.0);;
      // fragColor = vec4(vec3(material.roughness), 1.0);;
      // fragColor = vec4(vec3(material.ambientOcclusion), 1.0);
    }

  } // end 'TRIANGLES'
  else if (geomType == LINES) { // start 'LINES'
    if (occluded == 1) {
#ifdef ENABLE_MULTI_DRAW
      vec4 matValue2      = getMaterialValue(materialCoords, 2);
      float opacity       = matValue2.g;
#else 
      float opacity        = Opacity;
#endif // ENABLE_MULTI_DRAW
      fragColor = hiddenLineColor;
      fragColor.a = hiddenLineColor.a * opacity * treeItemOpacity;
      if (fragColor.a < 0.001) discard;
    } else {
#ifdef ENABLE_MULTI_DRAW
      vec4 edgeColor      = getMaterialValue(materialCoords, 3);
      vec4 matValue2      = getMaterialValue(materialCoords, 2);
      float opacity       = matValue2.g;
#else 
      vec4 edgeColor      = EdgeColor;
      float opacity        = Opacity;
#endif // ENABLE_MULTI_DRAW
      edgeColor.a = edgeColor.a * opacity * treeItemOpacity;
      if (edgeColor.a < 0.001) discard;
      fragColor = edgeColor;
    }
  } // end 'LINES'
  else if (geomType == POINTS) { // start 'POINTS'
#ifdef ENABLE_MULTI_DRAW
    vec4 pointColor     = getMaterialValue(materialCoords, 4);
    vec4 matValue2      = getMaterialValue(materialCoords, 2);
    float opacity       = matValue2.g;
#else 
    vec4 pointColor      = PointColor;
    float opacity        = Opacity;
#endif // ENABLE_MULTI_DRAW
    pointColor.a = pointColor.a * opacity * treeItemOpacity;
    if (pointColor.a < 0.001) discard;
    fragColor = pointColor;
  }  // end 'POINTS'
  
#ifdef DEBUG_GEOM_ID
  // ///////////////////////
  // Debug Draw ID (this correlates to GeomID within a GLGeomSet)
  float geomId = v_geomItemData.w;
  fragColor.rgb = getDebugColor(geomId);
  // ///////////////////////
#endif

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb * exposure);
#endif

// end DRAW_COLOR
#elif defined(DRAW_GEOMDATA)
  // Cutaways
  if (testFlag(flags, GEOMITEM_INVISIBLE_IN_GEOMDATA)) {
    discard;
    return;
  }
  if (occlusionCulling != 0) {
    // Transparent geoms do not render to the occlusion buffer
    if (testFlag(flags, GEOMITEM_TRANSPARENT)) {
      discard;
      return;
    }
  }

  // We can make geoms invisible to hide them. 
  // Avoid drawing GeomData for geoms that are completely transparent.
  if (geomType == TRIANGLES) { // start 'TRIANGLES'
    vec4 matValue0      = getMaterialValue(materialCoords, 0);
    vec4 matValue2      = getMaterialValue(materialCoords, 2);
    float opacity          = matValue2.g * matValue0.a * treeItemOpacity;
    if (opacity < 0.001) {
      discard;
      return;
    }
  } // end 'TRIANGLES'
  else if (geomType == LINES) { // start 'LINES'
#ifdef ENABLE_MULTI_DRAW
    vec4 edgeColor      = getMaterialValue(materialCoords, 3);
#else 
    vec4 edgeColor      = EdgeColor;
#endif // ENABLE_MULTI_DRAW
    float opacity          = edgeColor.a * treeItemOpacity;
    if (opacity < 0.001) {
      discard;
      return;
    }
  } // end 'LINES'
  else if (geomType == POINTS) { // start 'POINTS'
#ifdef ENABLE_MULTI_DRAW
    vec4 pointColor      = getMaterialValue(materialCoords, 4);
#else 
    vec4 pointColor      = PointColor;
#endif // ENABLE_MULTI_DRAW
    float opacity          = pointColor.a * treeItemOpacity;
    if (opacity < 0.001) {
      discard;
      return;
    }
  }  // end 'POINTS'

  
  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemIds.x, v_drawItemIds.y, isOrthographic);
   
#elif defined(DRAW_HIGHLIGHT)
  fragColor = getHighlightColor(geomItemId);
#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif

}`;class jo extends OA{constructor(A){super(A,"StandardSuraceShader");this.setShaderStage("VERTEX_SHADER",Rr),this.setShaderStage("FRAGMENT_SHADER",fr)}bind(A,g){if(super.bind(A,g),A instanceof Gg){const I=A,C=this.__gl;I.envMap&&I.envMap.bind(I);const{exposure:e,cutColor:i,renderMode:s}=I.unifs;e&&C.uniform1f(e.location,I.exposure),I.renderMode&&s&&(I.renderMode=="flat"||I.renderMode=="flat-noedges"?C.uniform1i(s.location,1):I.renderMode=="shaded"||I.renderMode=="shaded-noedges"?C.uniform1i(s.location,2):(I.renderMode=="pbr"||I.renderMode=="pbr-noedges")&&C.uniform1i(s.location,3)),i&&C.uniform4f(i.location,.3,0,0,1)}return!0}static getPackedMaterialData(A){const g=new Float32Array(20),I=A.getParameter("BaseColor");let C;I instanceof VA&&I.colorSpace==cg.Gamma?C=I.value.toLinear():C=I.value,g[0]=C.r,g[1]=C.g,g[2]=C.b,g[3]=C.a,g[4]=A.getParameter("AmbientOcclusion").value,g[5]=A.getParameter("Metallic").value,g[6]=A.getParameter("Roughness").value,g[7]=A.getParameter("Reflectance").value,g[8]=A.getParameter("EmissiveStrength").value,g[9]=A.getParameter("Opacity").value;const e=A.getParameter("EdgeColor").value;g[12]=e.r,g[13]=e.g,g[14]=e.b,g[15]=e.a;const i=A.getParameter("PointColor").value;return g[16]=i.r,g[17]=i.g,g[18]=i.b,g[19]=i.a,g}static getMaterialTemplate(){return wr}}const wr=new gi("StandardSurfaceShader_template");p.register("StandardSurfaceShader",jo);p.register("TransparentSurfaceShader",jo);var Vr=`
precision highp float;
#define GLSLIFY 1

import 'GLSLUtils.glsl'
#ifdef ENABLE_MULTI_DRAW
import 'drawItemTexture.glsl'
#endif // ENABLE_MULTI_DRAW

import 'gamma.glsl'
import 'materialparams.glsl'

#if defined(DRAW_COLOR)

  #ifndef ENABLE_MULTI_DRAW

    uniform color BaseColor;

    #ifdef ENABLE_TEXTURES
      uniform sampler2D BaseColorTex;
      uniform int BaseColorTexType;
    #endif

  #endif // ENABLE_MULTI_DRAW
#endif // DRAW_COLOR

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif

#if defined(DRAW_GEOMDATA)
  uniform int isOrthographic;
  import 'surfaceGeomData.glsl'
#elif defined(DRAW_HIGHLIGHT)
  import 'surfaceHighlight.glsl'
#endif // DRAW_HIGHLIGHT

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
  
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  //////////////////////////////////////////////
  // Color
#if defined(DRAW_COLOR)

  #ifdef ENABLE_MULTI_DRAW

    vec2 materialCoords = v_geomItemData.zw;
    vec4 baseColor = getMaterialValue(materialCoords, 0);

  #else // ENABLE_MULTI_DRAW

  #ifndef ENABLE_TEXTURES
    vec4 baseColor = BaseColor;
  #else
    vec4 baseColor      = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
  #endif

  #endif // ENABLE_MULTI_DRAW

    fragColor = baseColor;

  #ifdef ENABLE_INLINE_GAMMACORRECTION
    fragColor.rgb = toGamma(fragColor.rgb);
  #endif

  //////////////////////////////////////////////
  // GeomData
#elif defined(DRAW_GEOMDATA)
  fragColor = setFragColor_geomData(vec3(0,0,0), floatGeomBuffer, passId, v_geomItemId, 0.0, isOrthographic);
#elif defined(DRAW_HIGHLIGHT)
  fragColor = setFragColor_highlight(v_geomItemId);
#endif // DRAW_HIGHLIGHT

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`,Sr=`
precision highp float;
#define GLSLIFY 1

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

import 'GLSLUtils.glsl'
import 'geomItemId.glsl'
import 'drawItemTexture.glsl'
import 'modelMatrix.glsl'

/* VS Outputs */
varying float v_geomItemId;
varying vec4 v_geomItemData;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif

void main(void) {
  int geomItemId = getGeomItemId();
  v_geomItemId = float(geomItemId);
  v_geomItemData  = getInstanceData(geomItemId);

  mat4 modelMatrix = getModelMatrix(geomItemId);

  gl_Position = (modelMatrix * vec4(positions, 1.0));

  v_textureCoord = texCoords;
  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
}
`;class pr extends OA{constructor(A){super(A,"ScreenSpaceShader");this.setShaderStage("VERTEX_SHADER",Sr),this.setShaderStage("FRAGMENT_SHADER",Vr)}static isOverlay(){return!0}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor").value;return g[0]=I.r,g[1]=I.g,g[2]=I.b,g[3]=I.a,g}static getMaterialTemplate(){return Fr}}const Fr=new $e("ScreenSpaceShader_template");p.register("ScreenSpaceShader",pr);class qo extends vo{constructor(){super();this.materials={},this.listenerIDs={}}init(A,g){super.init(A,g)}itemAddedToScene(A,g){if(A instanceof gA){const I=A;return this.filterGeomItem(I)?(this.addGeomItem(I),!0):!1}else return!1}itemRemovedFromScene(A,g){return A instanceof gA?(this.removeGeomItem(A),!0):!1}filterGeomItem(A){return!0}addGeomItem(A){const g={};this.listenerIDs[A.getId()]=g;const I=()=>{this.removeGeomItem(A),this.renderer.assignTreeItemToGLPass(A)};g["materialParam.valueChanged"]=A.materialParam.on("valueChanged",I),g["geomParam.valueChanged"]=A.geomParam.on("valueChanged",I);const C=i=>{i.isOpaqueStateChanged&&I()},e=A.materialParam.value;this.materials[A.getId()]=e,g["geomItem.opacityChanged"]=A.on("opacityChanged",C),g["material.opacityChanged"]=e.on("opacityChanged",C)}removeGeomItem(A){const g=A.getId(),I=this.listenerIDs[g];delete this.listenerIDs[g],A.materialParam.removeListenerById("valueChanged",I["materialParam.valueChanged"]),A.geomParam.removeListenerById("valueChanged",I["geomParam.valueChanged"]);const C=this.materials[A.getId()];delete this.materials[g],A.removeListenerById("opacityChanged",I["geomItem.opacityChanged"]),C.removeListenerById("opacityChanged",I["material.opacityChanged"])}constructShaders(A){let g,I;const C=this.__renderer.getOrCreateShader(A);return C.getGeomDataShaderName()?g=this.__renderer.getOrCreateShader(C.getGeomDataShaderName()):g=C,C.getSelectedShaderName()?I=this.__renderer.getOrCreateShader(C.getSelectedShaderName()):I=C,{glShader:C,glgeomdatashader:g,glselectedshader:I}}getGeomItemAndDist(A){let g,I=-1,C;A instanceof Float32Array?(g=Math.round(A[1]),I=Math.round(A[2]),C=A[3]):(g=A[0]+((A[1]&63)<<8),C=P.decode16BitFloatFrom2xUInt8(A.slice(2,3)));const e=this.renderer.glGeomItemLibrary.getGeomItem(g);if(e)return{geomItem:e,componentId:I,dist:C}}}var Xr=`
precision highp float;
#define GLSLIFY 1
attribute vec3 positions;  //(location = 0)

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  v_texCoord = positions.xy+0.5;
  gl_Position = vec4(positions.xy*2.0, -1.0, 1.0);
}
`,Hr=`
precision highp float;
#define GLSLIFY 1

uniform sampler2D colorTexture;
uniform sampler2D depthTexture;
uniform vec2 screenSize;

uniform float growth;

varying vec2 v_texCoord;

bool sampleNeiPixel(vec2 fragCoord, inout vec4 res) {
  res = texture2D(colorTexture, fragCoord/screenSize);
  if (res.a > 0.0) {
    return true;
  }
  return false;
}

vec4 samplePixels(vec2 fragCoord) {
  vec4 res = vec4(0.0);
  
  if (sampleNeiPixel(fragCoord, res)) return res; // M
  
  // Search surrounding pixels for geoms
  if (sampleNeiPixel(fragCoord+vec2( 1, 0), res)) return res; // E
  if (sampleNeiPixel(fragCoord+vec2(-1, 0), res)) return res; // W
  if (sampleNeiPixel(fragCoord+vec2( 0, 1), res)) return res; // N
  if (sampleNeiPixel(fragCoord+vec2( 0,-1), res)) return res; // S
  if (sampleNeiPixel(fragCoord+vec2( 1, 1), res)) return res; // NW
  if (sampleNeiPixel(fragCoord+vec2(-1, 1), res)) return res; // NE
  if (sampleNeiPixel(fragCoord+vec2( 1,-1), res)) return res; // SW
  if (sampleNeiPixel(fragCoord+vec2(-1,-1), res)) return res; // SE
  
  return res;
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  fragColor = samplePixels(gl_FragCoord.xy);
  if (fragColor.a < 0.0001) {
    discard; 
  }

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`;class $o extends OA{constructor(A){super(A,"FattenLinesShader");this.setShaderStage("VERTEX_SHADER",Xr),this.setShaderStage("FRAGMENT_SHADER",Hr)}}const Wr=(t,A)=>t.length==A.length&&!t.some((g,I)=>g!=A[I]);var bg;(function(t){t[t.TRIANGLES=0]="TRIANGLES",t[t.LINES=1]="LINES",t[t.POINTS=2]="POINTS"})(bg||(bg={}));class Yr extends FA{constructor(A){super();this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.dirtyGeomItems=new Set,this.drawIdsBufferDirty=!0,this.drawIdsArraysAllocators={},this.drawIdsArrays={},this.drawIdsTextures={},this.drawElementCounts={},this.drawElementOffsets={},this.drawOrderToIndex=[],this.indexToDrawIndex=[],this.highlightedItems={},this.highlightedIdsArraysAllocators={},this.highlightElementCounts={},this.highlightElementOffsets={},this.highlightedIdsArray={},this.highlightedIdsTextures={},this.dirtyHighlightedGeomItems=new Set,this.highlightedIdsBufferDirty=!0,this.linesGeomDataBuffer=null,this.fattenLinesShader=null,this.quad=null,this.fbo=null,this.renderer=A,this.gl=A.gl,this.renderer.glGeomLibrary.on("geomDataChanged",g=>{const I=this.glGeomIdsMapping[g.index];I!=null&&I.forEach(C=>{this.dirtyGeomItems.add(C),this.drawIdsBufferDirty||(this.drawIdsBufferDirty=!0,this.emit("updated"))})})}addGLGeomItem(A){const g=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[A.geomId]?this.glGeomIdsMapping[A.geomId].push(g):this.glGeomIdsMapping[A.geomId]=[g];const I={};A.visible&&(this.indexToDrawIndex[g]=this.drawOrderToIndex.length,this.drawOrderToIndex.push(g),this.dirtyGeomItems.add(g)),I.visibilityChanged=e=>{if(e.visible){const i=this.renderer.glGeomLibrary.getGeomBuffers(A.geomId);for(let s in i.counts){if(i.counts[s]==0)continue;const o=this.drawIdsArraysAllocators[s];if(o){const a=o.getAllocation(g);if(a){const n=a.start;if(A.shattered)for(let B=0;B<a.size;B++)this.drawElementCounts[s][n+B]=i.subGeomCounts[s][B];else{const B=i.materialSubGeoms[s];for(let d=0;d<a.size;d++){const l=B[d];this.drawElementCounts[s][n+d]=l.count}}}}}}else for(let i in this.drawIdsArraysAllocators){const s=this.drawIdsArraysAllocators[i];if(s){const o=s.getAllocation(g);if(o){const a=o.start;for(let n=0;n<o.size;n++)this.drawElementCounts[i][a+n]=0}}}this.emit("updated")},A.on("visibilityChanged",I.visibilityChanged);const C=e=>{const i=e.indexOf(":");let s=[];i!=-1&&(s=e.substring(i+1).split(",").map(o=>Number.parseInt(o))),!(this.highlightedItems[g]&&Wr(this.highlightedItems[g],s))&&(this.highlightedItems[g]=s,this.highlightedIdsBufferDirty=!0,this.emit("updated"))};A.geomItem.isHighlighted()&&C(A.geomItem.getHighlightName()),I.highlightChanged=e=>{e&&e.name?C(e.name):(delete this.highlightedItems[g],this.highlightedIdsBufferDirty=!0,this.emit("updated"))},A.geomItem.on("highlightChanged",I.highlightChanged),I.shatterStateChanged=e=>{this.dirtyGeomItems.add(g),this.drawIdsBufferDirty=!0,this.renderer.renderGeomDataFbos()},A.on("shatterStateChanged",I.shatterStateChanged),A.geomItem.geomParam.value.materials.forEach(i=>{this.renderer.glMaterialLibrary.addMaterial(i)}),this.glGeomItems[g]=A,this.glgeomItemEventHandlers[g]=I,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(A){const g=this.glGeomItems.indexOf(A),I=this.glGeomIdsMapping[A.geomId];I.splice(I.indexOf(g),1),I.length==0&&delete this.glGeomIdsMapping[A.geomId];const C=this.glgeomItemEventHandlers[g];A.geomItem.off("highlightChanged",C.highlightChanged),A.off("visibilityChanged",C.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,this.freeIndices.push(g),this.dirtyGeomItems.has(g)&&this.dirtyGeomItems.delete(g);for(let e in this.drawIdsArraysAllocators){const i=this.drawIdsArraysAllocators[e].getAllocation(g);if(i){for(let s=0;s<i.size;s++)this.drawElementOffsets[e][i.start+s]=0,this.drawElementCounts[e][i.start+s]=0;this.drawIdsArraysAllocators[e].deallocate(g)}}if(A.isVisible()){const e=this.drawOrderToIndex.indexOf(g);this.drawOrderToIndex.splice(e,1),this.indexToDrawIndex[g]=-1,this.drawIdsBufferDirty=!0}A.geomItem.isHighlighted()&&(delete this.highlightedItems[g],this.highlightedIdsBufferDirty=!0),this.emit("updated")}updateDrawIDsBuffer(A){this.dirtyGeomItems.forEach(i=>{const s=this.glGeomItems[i];if(!!s){const o=this.renderer.glGeomLibrary.getGeomBuffers(s.geomId);let a={};if(s.shattered)for(let n in o.subGeomCounts)a[n]=o.subGeomCounts[n].length;else for(let n in o.materialSubGeoms)a[n]=o.materialSubGeoms[n].length;for(let n in a){const B=a[n];this.drawIdsArraysAllocators[n]||(this.drawIdsArraysAllocators[n]=new QC);const d=this.drawIdsArraysAllocators[n].getAllocation(i);if(d)for(let l=0;l<d.size;l++)this.drawElementCounts[n][d.start+l]=0;this.drawIdsArraysAllocators[n].allocate(i,B)}}});let g=!1;for(let i in this.drawIdsArraysAllocators){const s=this.drawIdsArraysAllocators[i];(!this.drawElementCounts[i]||s.reservedSpace>this.drawElementCounts[i].length-1)&&(this.drawElementCounts[i]&&s.reservedSpace>this.drawElementCounts[i].length-1&&(g=!0),this.drawIdsArrays[i]=new Float32Array(s.reservedSpace*4),this.drawElementOffsets[i]=new Int32Array(s.reservedSpace+1),this.drawElementCounts[i]=new Int32Array(s.reservedSpace+1))}if(g)for(let i=0;i<this.drawOrderToIndex.length;i++)this.dirtyGeomItems.add(i);const I=4;this.dirtyGeomItems.forEach(i=>{const s=this.glGeomItems[i];if(!s)return;const o=this.renderer.glGeomLibrary.getGeomOffsetAndCount(s.geomId),a=this.renderer.glGeomLibrary.getGeomBuffers(s.geomId),n=s.isVisible();if(s.shattered){let B=0;const d=(l,r,c)=>{const h=this.drawIdsArraysAllocators[c],E=this.drawIdsArrays[c],b=this.drawElementOffsets[c],m=this.drawElementCounts[c],G=h.getAllocation(i);if(!G)return;const y=a.materials;for(let Q=0;Q<l.length;Q++){const u=G.start+Q;if(b[u]=o[0]+l[Q]*I,m[u]=n?r[Q]:0,E[u*4+0]=s.geomItemId,E[u*4+1]=B+1,y.length>0&&a.subGeomMaterialIndices[Q]>0){const Z=a.subGeomMaterialIndices[Q]-1,w=a.materials[Z];this.renderer.glMaterialLibrary.addMaterial(w);const R=this.renderer.glMaterialLibrary.getMaterialAllocation(w);E[u*4+2]=R.start}else E[u*4+2]=0;E[u*4+3]=0,B++}};d(a.subGeomOffsets.TRIANGLES,a.subGeomCounts.TRIANGLES,"TRIANGLES"),d(a.subGeomOffsets.LINES,a.subGeomCounts.LINES,"LINES"),d(a.subGeomOffsets.POINTS,a.subGeomCounts.POINTS,"POINTS")}else{const B=(d,l)=>{const r=this.drawIdsArraysAllocators[l],c=this.drawIdsArrays[l],h=this.drawElementOffsets[l],E=this.drawElementCounts[l],b=r.getAllocation(i);if(!b)return;const m=a.materials;for(let G=0;G<d.length;G++){const y=d[G],Q=b.start+G;if(h[Q]=o[0]+y.offset*I,E[Q]=n?y.count:0,c[Q*4+0]=s.geomItemId,c[Q*4+1]=0,m.length>0&&y.materialId>=0&&a.materials[y.materialId]){const u=a.materials[y.materialId];this.renderer.glMaterialLibrary.addMaterial(u);const Z=this.renderer.glMaterialLibrary.getMaterialAllocation(u);c[Q*4+2]=Z.start}else c[Q*4+2]=0;c[Q*4+3]=0}};for(let d in a.materialSubGeoms){if(!this.drawIdsArraysAllocators[d].getAllocation(i))continue;const c=a.materialSubGeoms[d];B(c,d)}}});const C=this.renderer.gl,e=i=>{const s=this.drawIdsArrays[i];let o=this.drawIdsTextures[i];const a=this.drawIdsArraysAllocators[i].reservedSpace,n=A.boundTextures++;C.activeTexture(C.TEXTURE0+n);const B=P.nextPow2(Math.ceil(Math.sqrt(a)));if(!o)o=new KA(this.gl,{format:"RGBA",type:"FLOAT",width:B,height:B,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.drawIdsTextures[i]=o,g=!0;else if(o.width<B||o.height<B){o.resize(B,B);for(let d=0;d<this.drawOrderToIndex.length;d++)this.dirtyGeomItems.add(d);g=!0}{const d=o,l=o.width;C.bindTexture(C.TEXTURE_2D,d.glTex);const r=0,c=0,h=1,E=d.getFormat(),b=d.getType();if(g){const m=this.drawIdsArraysAllocators[i].allocatedSpace,G=Math.ceil((c+m)/l);let y=0,Q=m,u=c;for(let Z=0;Z<G;Z++){let w;u+Q>l?(w=l-u,u=0):w=Q;const R=y%l,S=Math.floor(y/l),H=s.subarray(y*4,(y+w)*4);if(H.length!=w*4)throw new Error("Invalid drawIds subarray :"+H.length+" width:"+w);C.texSubImage2D(C.TEXTURE_2D,r,R,S,w,h,E,b,H),y+=w,Q-=w}}else{const m=this.drawIdsArraysAllocators[i];this.dirtyGeomItems.forEach(G=>{const y=m.getAllocation(G);if(!y)return;const Q=y.start,u=y.size,Z=Q%l,w=Math.ceil((Z+u)/l);let R=0,S=u,H=Z;for(let X=0;X<w;X++){let F;H+S>l?(F=l-H,H=0):F=S;const _=(Q+R)%l,oA=Math.floor((Q+R)/l),sA=s.subarray((Q+R)*4,(Q+R+F)*4);if(sA.length!=F*4)throw new Error("Invalid drawIds subarray :"+sA.length+" width:"+F);C.texSubImage2D(C.TEXTURE_2D,r,_,oA,F,h,E,b,sA),R+=F,S-=F}})}}C.bindTexture(C.TEXTURE_2D,null),A.boundTextures--};for(let i in this.drawIdsArrays)e(i);this.dirtyGeomItems=new Set,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(A){if(this.highlightedIdsBufferDirty){this.highlightedIdsArraysAllocators={},this.highlightedIdsArray={},this.highlightElementOffsets={},this.highlightElementCounts={};for(let e in this.highlightedItems){const i=Number.parseInt(e),s=this.highlightedItems[e],o=this.glGeomItems[i],a=this.renderer.glGeomLibrary.getGeomBuffers(o.geomId);let n={TRIANGLES:0,LINES:0,POINTS:0};if(s.length>0)s.forEach(B=>{if(B<a.subGeomCounts.TRIANGLES.length)n.TRIANGLES+=1;else{const d=B-a.subGeomCounts.TRIANGLES.length;d<a.subGeomCounts.LINES.length?n.LINES+=1:d-a.subGeomCounts.LINES.length<a.subGeomCounts.POINTS.length&&(n.POINTS+=1)}});else for(let B in a.counts)a.counts[B]>0&&(n[B]=1);for(let B in n){const d=n[B];d!=0&&(this.highlightedIdsArraysAllocators[B]||(this.highlightedIdsArraysAllocators[B]=new QC),this.highlightedIdsArraysAllocators[B].allocate(i,d))}}for(let e in this.highlightedIdsArraysAllocators){const i=this.highlightedIdsArraysAllocators[e];(!this.highlightElementCounts[e]||i.reservedSpace>this.highlightElementCounts[e].length-1)&&(this.highlightedIdsArray[e]=new Float32Array(i.reservedSpace*4),this.highlightElementOffsets[e]=new Int32Array(i.reservedSpace+1),this.highlightElementCounts[e]=new Int32Array(i.reservedSpace+1))}const C=4;for(let e in this.highlightedItems){const i=Number.parseInt(e),s=this.highlightedItems[e],o=this.glGeomItems[i],a=this.renderer.glGeomLibrary.getGeomOffsetAndCount(o.geomId),n=this.renderer.glGeomLibrary.getGeomBuffers(o.geomId);if(s.length!=0)s.forEach((B,d)=>{const l=(r,c,h,E)=>{const b=this.highlightedIdsArraysAllocators[h],m=this.highlightedIdsArray[h],G=this.highlightElementOffsets[h],y=this.highlightElementCounts[h],u=b.getAllocation(i).start+d;G[u]=a[0]+r[E]*C,y[u]=c[E],m[u*4+0]=o.geomItemId,m[u*4+1]=B+1,m[u*4+2]=0,m[u*4+3]=0};if(B<n.subGeomCounts.TRIANGLES.length)l(n.subGeomOffsets.TRIANGLES,n.subGeomCounts.TRIANGLES,"TRIANGLES",B);else{const r=B-n.subGeomCounts.TRIANGLES.length;r<n.subGeomCounts.LINES.length?l(n.subGeomOffsets.LINES,n.subGeomCounts.LINES,"LINES",r):r-n.subGeomCounts.LINES.length<n.subGeomCounts.POINTS.length}});else for(let B in n.offsets){const d=n.counts[B];if(d==0)continue;const l=n.offsets[B],h=this.highlightedIdsArraysAllocators[B].getAllocation(i).start;this.highlightElementOffsets[B][h]=a[0]+l*C,this.highlightElementCounts[B][h]=d,this.highlightedIdsArray[B][h*4+0]=o.geomItemId}}this.highlightedIdsBufferDirty=!1}const g=this.renderer.gl,I=C=>{const e=this.highlightedIdsArray[C];if(!e||e.length==0)return;let i=this.highlightedIdsTextures[C];const s=this.highlightedIdsArraysAllocators[C].reservedSpace,o=A.boundTextures++;g.activeTexture(g.TEXTURE0+o);const a=P.nextPow2(Math.ceil(Math.sqrt(s)));i?(i.width<a||i.height<a)&&i.resize(a,a):(i=new KA(this.gl,{format:"RGBA",type:"FLOAT",width:a,height:a,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1}),this.highlightedIdsTextures[C]=i);{const n=i,B=i.width;g.bindTexture(g.TEXTURE_2D,n.glTex);const d=0,l=0,r=1,c=n.getFormat(),h=n.getType(),E=this.highlightedIdsArraysAllocators[C].allocatedSpace,b=Math.ceil((l+E)/B);let m=0,G=E,y=l;for(let Q=0;Q<b;Q++){let u;y+G>B?(u=B-y,y=0):u=G;const Z=m%B,w=Math.floor(m/B),R=e.subarray(m*4,(m+u)*4);if(R.length!=u*4)throw new Error("Invalid drawIds subarray :"+R.length+" width:"+u);g.texSubImage2D(g.TEXTURE_2D,d,Z,w,u,r,c,h,R),m+=u,G-=u}}g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--};for(let C in this.highlightedIdsArray)I(C)}draw(A){if(this.drawOrderToIndex.length==0)return;this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(A),A.pushGLStack();const g=this.drawIdsArrays,I=this.drawElementCounts,C=this.drawElementOffsets,e=this.drawIdsTextures,i=this.drawIdsArraysAllocators,s=this.gl,o=A.unifs;s.depthFunc(s.LEQUAL);const{drawIdsTexture:a,geomType:n,outlineThickness:B,viewportSize:d,occluded:l,renderMode:r}=A.unifs,c=A instanceof Gg&&r?A.renderMode:null,h=c!="flat-noedges"&&c!="shaded-noedges"&&c!="pbr-noedges",E=A instanceof Gg&&B&&d&&A.outlineMethod=="geometry"&&A.outlineThickness>0&&h,b=E&&c=="wireframe",m=A.hiddenLineColor&&A.hiddenLineColor.a>0&&l;if(b?(s.enable(s.STENCIL_TEST),s.clearStencil(0),s.clear(s.STENCIL_BUFFER_BIT),s.stencilOpSeparate(s.FRONT,s.DECR_WRAP,s.DECR_WRAP,s.DECR_WRAP),s.stencilOpSeparate(s.BACK,s.INCR_WRAP,s.INCR_WRAP,s.INCR_WRAP),s.stencilFunc(s.ALWAYS,0,255),s.enable(s.CULL_FACE),s.cullFace(s.BACK),s.disable(s.DEPTH_TEST),s.depthMask(!1),s.colorMask(!1,!1,!1,!1)):c=="hiddenline"?s.colorMask(!1,!1,!1,!1):s.disable(s.CULL_FACE),g.TRIANGLES&&i.TRIANGLES.allocatedSpace>0)if(e.TRIANGLES.bindToUniform(A,a),n&&s.uniform1i(n.location,bg.TRIANGLES),B&&s.uniform1f(B.location,0),A.bindViewports(o,()=>{this.multiDrawMeshes(A,I.TRIANGLES,C.TRIANGLES,i.TRIANGLES.allocatedSpace)}),E){if(s.enable(s.CULL_FACE),s.cullFace(s.FRONT),s.uniform1f(B.location,this.renderer.outlineThickness*window.devicePixelRatio),s.uniform2f(d.location,A.region[2]-A.region[0],A.region[3]-A.region[1]),c=="hiddenline"&&s.colorMask(!0,!0,!0,!1),b||(A.glEnable(s.BLEND),s.blendEquation(s.FUNC_ADD),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA)),A.bindViewports(o,()=>{this.multiDrawMeshes(A,I.TRIANGLES,C.TRIANGLES,i.TRIANGLES.allocatedSpace)}),s.disable(s.CULL_FACE),s.cullFace(s.BACK),b){s.enable(s.DEPTH_TEST),s.depthMask(!0),s.colorMask(!0,!0,!0,!0),s.stencilFunc(s.NOTEQUAL,0,255),s.stencilOp(s.KEEP,s.KEEP,s.KEEP),A.glEnable(s.BLEND),s.blendEquation(s.FUNC_ADD),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA);const G=A.glShader,y=A.shaderkey,Q=this.renderer.screenQuad;Q.bindShader(A),Q.draw(A,this.renderer.outlineColor),G.bind(A,y),this.renderer.glGeomItemLibrary.bind(A),this.renderer.glGeomLibrary.bind(A),this.renderer.glMaterialLibrary.bind(A),s.disable(s.STENCIL_TEST)}}else A.glEnable(s.BLEND),s.blendEquation(s.FUNC_ADD),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA);if(h&&g.LINES&&i.LINES.allocatedSpace>0&&(e.LINES.bindToUniform(A,a),n&&s.uniform1i(n.location,bg.LINES),A.bindViewports(o,()=>{this.multiDrawLines(A,I.LINES,C.LINES,i.LINES.allocatedSpace)}),m)){const{hiddenLineColor:G}=A.unifs;s.uniform1i(l.location,1),s.uniform4fv(G.location,A.hiddenLineColor.asArray()),s.depthFunc(s.GREATER),s.depthMask(!1),A.bindViewports(o,()=>{this.multiDrawLines(A,I.LINES,C.LINES,i.LINES.allocatedSpace)}),s.depthFunc(s.LEQUAL),s.depthMask(!0),s.uniform1i(l.location,0)}if(g.POINTS&&i.POINTS.allocatedSpace>0&&(e.POINTS.bindToUniform(A,a),n&&s.uniform1i(n.location,bg.POINTS),A.bindViewports(o,()=>{this.multiDrawPoints(A,I.POINTS,C.POINTS,i.POINTS.allocatedSpace)}),m)){const{hiddenLineColor:G}=A.unifs;s.uniform1i(l.location,1),s.uniform4fv(G.location,A.hiddenLineColor.asArray()),s.depthFunc(s.GREATER),s.depthMask(!1),A.bindViewports(o,()=>{this.multiDrawPoints(A,I.POINTS,C.POINTS,i.POINTS.allocatedSpace)}),s.depthFunc(s.LEQUAL),s.depthMask(!0),s.uniform1i(l.location,0)}n&&s.uniform1i(n.location,0),A.popGLStack()}drawGeomData(A){this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(A),A.pushGLStack();const g=this.renderer.gl,I=A.unifs,{drawIdsTexture:C,geomType:e}=I,i=this.drawElementCounts,s=this.drawElementOffsets,o=this.drawIdsTextures,a=this.drawIdsArraysAllocators,n=this.drawIdsArrays;this.renderer.renderMode!="wireframe"&&A.bindViewports(I,()=>{n.TRIANGLES&&a.TRIANGLES.allocatedSpace>0&&(o.TRIANGLES.bindToUniform(A,C),e&&g.uniform1i(e.location,bg.TRIANGLES),this.multiDrawMeshes(A,i.TRIANGLES,s.TRIANGLES,a.TRIANGLES.allocatedSpace))});const B=!0;if(A.geomDataFbo&&B){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new KA(g,{type:this.renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new $o(g),this.quad=new ei(g,new zI(1,1)));const d=A.geomDataFbo,l=d.width,r=d.height;if(this.linesGeomDataBuffer.width!=l||this.linesGeomDataBuffer.height!=r){this.fbo&&(g.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(l,r),this.fbo=g.createFramebuffer();const c=this.linesGeomDataBuffer.glTex,h=d.__depthTexture;g.name=="webgl2"?(g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,c,0),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,h,0)):(g.bindFramebuffer(g.FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,c,0),g.framebufferTexture2D(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,h,0)),we(g,l,r)}else g.name=="webgl2"?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.fbo);g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)}if(A.bindViewports(I,()=>{n.LINES&&a.LINES.allocatedSpace>0&&(o.LINES.bindToUniform(A,C),e&&g.uniform1i(e.location,bg.LINES),this.multiDrawLines(A,i.LINES,s.LINES,a.LINES.allocatedSpace)),n.POINTS&&a.POINTS.allocatedSpace>0&&(o.POINTS.bindToUniform(A,C),e&&g.uniform1i(e.location,bg.POINTS),this.multiDrawPoints(A,i.POINTS,s.POINTS,a.POINTS.allocatedSpace))}),this.linesGeomDataBuffer&&A.geomDataFbo&&B){A.boundRendertarget=null,A.geomDataFbo.bindForWriting(A);const d=A.glShader,l=A.shaderkey;this.fattenLinesShader.bind(A),g.disable(g.DEPTH_TEST);const{colorTexture:r,screenSize:c}=A.unifs;this.linesGeomDataBuffer.bindToUniform(A,r);const h=A.geomDataFbo;g.uniform2f(c.location,h.width,h.height),this.quad.bindAndDraw(A),g.enable(g.DEPTH_TEST),d.bind(A,l),this.renderer.glGeomLibrary.bind(A),this.renderer.glMaterialLibrary.bind(A)}A.popGLStack()}drawHighlighted(A){if(Object.keys(this.highlightedItems).length==0)return;this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(A),A.pushGLStack();const g=this.highlightedIdsArray,I=this.highlightElementCounts,C=this.highlightElementOffsets,e=this.highlightedIdsTextures,i=this.highlightedIdsArraysAllocators,s=A.unifs,o=this.renderer.gl;o.depthFunc(o.LEQUAL),A.glDisable(o.CULL_FACE);const{drawIdsTexture:a,geomType:n}=A.unifs;A.bindViewports(s,()=>{g.TRIANGLES&&i.TRIANGLES.allocatedSpace>0&&(e.TRIANGLES.bindToUniform(A,a),n&&o.uniform1i(n.location,bg.TRIANGLES),this.multiDrawMeshes(A,I.TRIANGLES,C.TRIANGLES,i.TRIANGLES.allocatedSpace)),g.LINES&&i.LINES.allocatedSpace>0&&(e.LINES.bindToUniform(A,a),n&&o.uniform1i(n.location,bg.LINES),this.multiDrawLines(A,I.LINES,C.LINES,i.LINES.allocatedSpace)),g.POINTS&&i.POINTS.allocatedSpace>0&&(e.POINTS.bindToUniform(A,a),n&&o.uniform1i(n.location,bg.POINTS),this.multiDrawPoints(A,I.POINTS,C.POINTS,i.POINTS.allocatedSpace))}),n&&o.uniform1i(n.location,0),A.popGLStack()}multiDrawMeshes(A,g,I,C){const e=this.gl;if(e.multiDrawElements)e.multiDrawElements(e.TRIANGLES,g,0,e.UNSIGNED_INT,I,0,C);else{const{drawId:i}=A.unifs;for(let s=0;s<C;s++)e.uniform1i(i.location,s),e.drawElements(e.TRIANGLES,g[s],e.UNSIGNED_INT,I[s])}}multiDrawLines(A,g,I,C){const e=this.gl;if(e.multiDrawElements)e.multiDrawElements(e.LINES,g,0,e.UNSIGNED_INT,I,0,C);else{const{drawId:i}=A.unifs;for(let s=0;s<C;s++)e.uniform1i(i.location,s),e.drawElements(e.LINES,g[s],e.UNSIGNED_INT,I[s])}}multiDrawPoints(A,g,I,C){const e=this.gl;if(e.multiDrawElements)e.multiDrawElements(e.POINTS,g,0,e.UNSIGNED_INT,I,0,C);else{const{drawId:i}=A.unifs;for(let s=0;s<C;s++)e.uniform1i(i.location,s),e.drawElements(e.POINTS,g[s],e.UNSIGNED_INT,I[s])}}sortItems(A){this.drawIdsBufferDirty}destroy(){for(let A in this.drawIdsTextures)this.drawIdsTextures[A].destroy();for(let A in this.highlightedIdsTextures)this.highlightedIdsTextures[A].destroy();this.emit("destructing")}}class pt extends FA{constructor(A){super();this.glGeomItems=[],this.glGeomIdsMapping={},this.glgeomItemEventHandlers=[],this.freeIndices=[],this.viewPos=new f,this.drawElementCounts=new Int32Array(0),this.drawElementOffsets=new Int32Array(0),this.highlightElementCounts=new Int32Array(0),this.highlightElementOffsets=new Int32Array(0),this.drawOrderToIndex=[],this.indexToDrawIndex=[],this.drawIdsArray=new Float32Array(0),this.drawIdsBufferDirty=!0,this.drawIdsTexture=null,this.highlightedItems=[],this.highlightedIdsArray=null,this.highlightedIdsTexture=null,this.highlightedIdsBufferDirty=!1,this.dirtyGeomIndices=new Set,this.renderer=A,this.gl=A.gl,this.renderer.glGeomLibrary.on("geomDataChanged",g=>{this.dirtyGeomIndices.add(g.index)})}addGLGeomItem(A){const g=this.freeIndices.length>0?this.freeIndices.pop():this.glGeomItems.length;this.glGeomIdsMapping[A.geomId]?this.glGeomIdsMapping[A.geomId].push(g):this.glGeomIdsMapping[A.geomId]=[g],this.indexToDrawIndex[g]=this.drawOrderToIndex.length,this.drawOrderToIndex.push(g);const I={};I.visibilityChanged=C=>{const e=this.indexToDrawIndex[g];if(C.visible){const i=this.renderer.glGeomLibrary.getGeomOffsetAndCount(A.geomId);this.drawElementCounts[e]=i[1]}else this.drawElementCounts[e]=0;this.emit("updated")},A.on("visibilityChanged",I.visibilityChanged),A.geomItem.isHighlighted()&&(this.highlightedItems.push(A),this.highlightedIdsBufferDirty=!0),I.highlightChanged=C=>{if(C&&C.name){if(this.highlightedItems.includes(A))return;this.highlightedItems.push(A)}else this.highlightedItems.splice(this.highlightedItems.indexOf(A),1);this.highlightedIdsBufferDirty=!0,this.emit("updated")},A.geomItem.on("highlightChanged",I.highlightChanged),this.glGeomItems[g]=A,this.glgeomItemEventHandlers[g]=I,this.drawIdsBufferDirty=!0,this.emit("updated")}removeGLGeomItem(A){const g=this.glGeomItems.indexOf(A),I=this.glGeomIdsMapping[A.geomId];I.splice(I.indexOf(g),1),I.length==0&&(delete this.glGeomIdsMapping[A.geomId],this.dirtyGeomIndices.has(A.geomId)&&this.dirtyGeomIndices.delete(A.geomId));const C=this.glgeomItemEventHandlers[g];if(A.geomItem.off("highlightChanged",C.highlightChanged),A.off("visibilityChanged",C.visibilityChanged),this.glGeomItems[g]=null,this.glgeomItemEventHandlers[g]=null,this.drawIdsArray[g]=0,this.drawElementOffsets[g]=0,this.drawElementCounts[g]=0,this.freeIndices.push(g),A.isVisible()){const e=this.drawOrderToIndex.indexOf(g);this.drawOrderToIndex.splice(e,1),this.indexToDrawIndex[g]=-1,this.drawElementCounts[e]=0,this.drawIdsBufferDirty=!0}if(A.geomItem.isHighlighted()){const e=this.highlightedItems.indexOf(A);this.highlightedItems.splice(e,1),this.highlightedIdsBufferDirty=!0}this.emit("updated")}cleanGeomIds(){this.dirtyGeomIndices.forEach(A=>{const g=this.glGeomIdsMapping[A];if(g!=null){const I=this.renderer.glGeomLibrary.getGeomOffsetAndCount(A);g.forEach(C=>{const e=this.glGeomItems[C];if(e.isVisible()){const i=this.indexToDrawIndex[C];this.drawElementOffsets[i]=I[0],this.drawElementCounts[i]=I[1],this.drawIdsArray[i]=e.geomItemId;const s=this.highlightedItems.indexOf(e);s!=-1&&(this.highlightElementOffsets[s]=I[0],this.highlightElementCounts[s]=I[1])}})}}),this.dirtyGeomIndices=new Set}updateDrawIDsBuffer(A){(!this.drawIdsArray||this.drawOrderToIndex.length>this.drawIdsArray.length)&&(this.drawIdsArray=new Float32Array(this.drawOrderToIndex.length),this.drawElementOffsets=new Int32Array(this.drawOrderToIndex.length+1),this.drawElementCounts=new Int32Array(this.drawOrderToIndex.length+1)),this.drawOrderToIndex.forEach((e,i)=>{const s=this.glGeomItems[e];if(!s)return;const o=this.renderer.glGeomLibrary.getGeomOffsetAndCount(s.geomId);this.drawElementOffsets[i]=o[0],this.drawElementCounts[i]=s.isVisible()?o[1]:0,this.drawIdsArray[i]=s.geomItemId,this.indexToDrawIndex[e]=i}),this.dirtyGeomIndices=new Set;const g=this.renderer.gl,I=A.boundTextures++;g.activeTexture(g.TEXTURE0+I);const C=P.nextPow2(Math.ceil(Math.sqrt(this.drawOrderToIndex.length)))*2;this.drawIdsTexture?(this.drawIdsTexture.width<C||this.drawIdsTexture.height<C)&&this.drawIdsTexture.resize(C,C):this.drawIdsTexture=new KA(this.gl,{format:g.name=="webgl2"?"RED":"ALPHA",type:"FLOAT",width:C,height:C,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const e=this.drawIdsTexture,i=this.drawIdsTexture.width;g.bindTexture(g.TEXTURE_2D,e.glTex);const s=0,o=0,a=1,n=e.getFormat(),B=e.getType(),d=Math.ceil((o+this.drawOrderToIndex.length)/i);let l=0,r=this.drawOrderToIndex.length,c=o;for(let h=0;h<d;h++){let E;c+r>i?(E=i-c,c=0):E=r;const b=l%i,m=Math.floor(l/i),G=this.drawIdsArray.subarray(l,l+E);g.texSubImage2D(g.TEXTURE_2D,s,b,m,E,a,n,B,G),l+=E,r-=E}}g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--,this.drawIdsBufferDirty=!1}updateHighlightedIDsBuffer(A){if(this.highlightedIdsBufferDirty){(!this.highlightedIdsArray||this.highlightedItems.length>this.highlightedIdsArray.length)&&(this.highlightedIdsArray=new Float32Array(this.highlightedItems.length),this.highlightElementOffsets=new Int32Array(this.highlightedItems.length+1),this.highlightElementCounts=new Int32Array(this.highlightedItems.length+1)),this.highlightedItems.forEach((e,i)=>{this.highlightedIdsArray[i]=e.geomItemId;const s=this.renderer.glGeomLibrary.getGeomOffsetAndCount(e.geomId);this.highlightElementOffsets[i]=s[0],this.highlightElementCounts[i]=s[1]});for(let e=this.highlightedItems.length;e<this.highlightElementCounts.length;e++)this.highlightElementOffsets[e]=0,this.highlightElementCounts[e]=0;this.highlightedIdsBufferDirty=!1}const g=this.renderer.gl,I=A.boundTextures++;g.activeTexture(g.TEXTURE0+I);const C=P.nextPow2(Math.ceil(Math.sqrt(this.highlightedItems.length)));this.highlightedIdsTexture?(this.highlightedIdsTexture.width<C||this.highlightedIdsTexture.height<C)&&this.highlightedIdsTexture.resize(C,C):this.highlightedIdsTexture=new KA(this.gl,{format:g.name=="webgl2"?"RED":"ALPHA",type:"FLOAT",width:C,height:C,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1});{const e=this.highlightedIdsTexture,i=this.highlightedIdsTexture.width;g.bindTexture(g.TEXTURE_2D,e.glTex);const s=0,o=0,a=1,n=e.getFormat(),B=e.getType(),d=Math.ceil((o+this.highlightedIdsArray.length)/i);let l=0,r=this.highlightedIdsArray.length,c=o;for(let h=0;h<d;h++){let E;c+r>i?(E=i-c,c=0):E=r;const b=l%i,m=Math.floor(l/i),G=this.highlightedIdsArray.subarray(l,l+E);g.texSubImage2D(g.TEXTURE_2D,s,b,m,E,a,n,B,G),l+=E,r-=E}}g.bindTexture(g.TEXTURE_2D,null),A.boundTextures--}draw(A){if(this.drawIdsBufferDirty?this.updateDrawIDsBuffer(A):this.dirtyGeomIndices.size>0&&this.cleanGeomIds(),this.drawIdsArray.length!=0){if(this.drawIdsTexture){const{drawIdsTexture:g}=A.unifs;this.drawIdsTexture.bindToUniform(A,g)}this.bindAndRender(A,this.drawElementCounts,this.drawElementOffsets,this.drawOrderToIndex.length)}}drawHighlighted(A){if(this.highlightedItems.length!=0){if(this.highlightedIdsBufferDirty&&this.updateHighlightedIDsBuffer(A),this.highlightedIdsTexture){const{drawIdsTexture:g}=A.unifs;this.highlightedIdsTexture.bindToUniform(A,g)}this.bindAndRender(A,this.highlightElementCounts,this.highlightElementOffsets,this.highlightedItems.length)}}drawGeomData(A){if(this.drawIdsBufferDirty&&this.updateDrawIDsBuffer(A),this.drawOrderToIndex.length!=0){if(this.drawIdsTexture){const{drawIdsTexture:g}=A.unifs;this.drawIdsTexture.bindToUniform(A,g)}this.bindAndRender(A,this.drawElementCounts,this.drawElementOffsets,this.drawOrderToIndex.length)}}bindAndRender(A,g,I,C){const e=this.gl,i=A.unifs;i.instancedDraw&&e.uniform1i(A.unifs.instancedDraw.location,1),A.bindViewports(i,()=>{this.multiDraw(A,g,I,C)})}sortItems(A){const g=new Float32Array(this.drawOrderToIndex.length);this.drawOrderToIndex.forEach(I=>{const C=this.glGeomItems[I];if(C){const e=C.geomItem.boundingBoxParam.value,i=e.center(),s=e.size(),o=i.distanceTo(A)-s;g[I]=o}}),this.drawOrderToIndex.sort((I,C)=>g[C]-g[I]),this.drawOrderToIndex.forEach((I,C)=>{const e=this.glGeomItems[I];e&&(this.drawIdsArray[C]=e.geomItemId,this.indexToDrawIndex[I]=C)}),this.drawIdsBufferDirty=!0,this.viewPos=A}destroy(){this.drawIdsTexture&&this.drawIdsTexture.destroy(),this.highlightedIdsTexture&&this.highlightedIdsTexture.destroy(),this.emit("destructing")}}class Kr extends pt{multiDraw(A,g,I,C){const{occluded:e,hiddenLineColor:i}=A.unifs,s=A.hiddenLineColor&&A.hiddenLineColor.a>0&&e&&i,o=this.gl;if(o.multiDrawArrays)o.multiDrawElements(o.LINES,g,0,o.UNSIGNED_INT,I,0,C),s&&(o.uniform1i(e.location,1),o.uniform4fv(i.location,A.hiddenLineColor.asArray()),o.depthFunc(o.GREATER),o.depthMask(!1),o.multiDrawElements(o.LINES,g,0,o.UNSIGNED_INT,I,0,C),o.depthFunc(o.LEQUAL),o.depthMask(!0),o.uniform1i(e.location,0));else{const{drawId:a}=A.unifs;for(let n=0;n<C;n++)o.uniform1i(a.location,n),o.drawElements(o.LINES,g[n],o.UNSIGNED_INT,I[n]);if(s){o.uniform1i(e.location,1),o.uniform4fv(i.location,A.hiddenLineColor.asArray()),o.depthFunc(o.GREATER),o.depthMask(!1);for(let n=0;n<C;n++)o.uniform1i(a.location,n),o.drawElements(o.LINES,g[n],o.UNSIGNED_INT,I[n]);o.depthFunc(o.LEQUAL),o.depthMask(!0),o.uniform1i(e.location,0)}}}}class Nr extends pt{multiDraw(A,g,I,C){const e=this.gl;if(e.multiDrawArrays)e.multiDrawArrays(e.POINTS,I,0,g,0,C);else{const{drawId:i}=A.unifs;for(let s=0;s<C;s++)e.uniform1i(i.location,s),e.drawArrays(e.POINTS,I[s],g[s])}}}var Pi;(function(t){t[t.TRIANGLES=0]="TRIANGLES",t[t.LINES=1]="LINES",t[t.POINTS=2]="POINTS"})(Pi||(Pi={}));class Jr extends pt{multiDraw(A,g,I,C){const e=this.gl,i=()=>{if(e.multiDrawElements)e.multiDrawElements(e.TRIANGLES,g,0,e.UNSIGNED_INT,I,0,C);else{const{drawId:r}=A.unifs;for(let c=0;c<C;c++)e.uniform1i(r.location,c),e.drawElements(e.TRIANGLES,g[c],e.UNSIGNED_INT,I[c])}};e.depthFunc(e.LEQUAL);const{geomType:s,outlineThickness:o,viewportSize:a,renderMode:n}=A.unifs,B=A instanceof Gg&&n?A.renderMode:null,d=A instanceof Gg&&o&&a&&A.outlineMethod=="geometry"&&A.outlineThickness>0&&B!="flat-noedges"&&B!="pbr-noedges",l=d&&B=="wireframe";if(l?(e.enable(e.STENCIL_TEST),e.clearStencil(0),e.clear(e.STENCIL_BUFFER_BIT),e.stencilOpSeparate(e.FRONT,e.DECR_WRAP,e.DECR_WRAP,e.DECR_WRAP),e.stencilOpSeparate(e.BACK,e.INCR_WRAP,e.INCR_WRAP,e.INCR_WRAP),e.stencilFunc(e.ALWAYS,0,255),e.enable(e.CULL_FACE),e.cullFace(e.BACK),e.disable(e.DEPTH_TEST),e.depthMask(!1),e.colorMask(!1,!1,!1,!1)):B=="hiddenline"&&e.colorMask(!1,!1,!1,!1),s&&e.uniform1i(s.location,Pi.TRIANGLES),o&&e.uniform1f(o.location,0),i(),d){const r=A;if(e.enable(e.CULL_FACE),e.cullFace(e.FRONT),e.uniform1f(o.location,r.outlineThickness*window.devicePixelRatio),e.uniform2f(a.location,A.region[2]-A.region[0],A.region[3]-A.region[1]),B=="hiddenline"&&e.colorMask(!0,!0,!0,!1),l||(e.enable(e.BLEND),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA)),i(),e.disable(e.CULL_FACE),e.cullFace(e.BACK),l){e.enable(e.DEPTH_TEST),e.depthMask(!0),e.colorMask(!0,!0,!0,!0),e.stencilFunc(e.NOTEQUAL,0,255),e.stencilOp(e.KEEP,e.KEEP,e.KEEP),e.enable(e.BLEND),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA);const c=r.glShader,h=r.shaderkey,E=r.screenQuad;E.bindShader(r),E.draw(r,r.outlineColor),c.bind(r,h),this.renderer.glGeomItemLibrary.bind(r),this.renderer.glGeomLibrary.bind(r),this.renderer.glMaterialLibrary.bind(r),e.disable(e.STENCIL_TEST)}}}}class Aa extends FA{constructor(A,g,I){super();this.glGeomItemSets={},this.glGeomDataShaderKey="",this.glHighlightShaderKey="",this.pass=A,this.gl=g,this.glShader=I.glShader,this.glGeomDataShader=I.glgeomdatashader?I.glgeomdatashader:I.glShader,this.glHighlightShader=I.glselectedshader?I.glselectedshader:I.glShader,this.glShaderKey=I.glShader.getId()+"multidraw-draw",this.glGeomDataShader&&(this.glGeomDataShaderKey=this.glGeomDataShader.getId()+"multidraw-geomdata"),this.glHighlightShader&&(this.glHighlightShaderKey=this.glHighlightShader.getId()+"multidraw-highlight")}getOrCreateGLGeomItemSet(A){let g;if(A instanceof ZC){if(this.glGeomItemSets.CompoundGeom)return this.glGeomItemSets.CompoundGeom;g=new Yr(this.pass.renderer),this.glGeomItemSets.CompoundGeom=g}else if(A instanceof yI||A instanceof _g){if(this.glGeomItemSets.GLMesh)return this.glGeomItemSets.GLMesh;g=new Jr(this.pass.renderer),this.glGeomItemSets.GLMesh=g}else if(A instanceof lg||A instanceof pg){if(this.glGeomItemSets.GLLines)return this.glGeomItemSets.GLLines;g=new Kr(this.pass.renderer),this.glGeomItemSets.GLLines=g}else if(A instanceof bI||A instanceof ZI){if(this.glGeomItemSets.GLPoints)return this.glGeomItemSets.GLPoints;g=new Nr(this.pass.renderer),this.glGeomItemSets.GLPoints=g}else throw new Error("Unsupported geom type:"+A.constructor.name);return g.on("updated",()=>{this.emit("updated")}),g}addGLGeomItem(A){const g=A.geomItem.geomParam.value,I=this.getOrCreateGLGeomItemSet(g);A.GLGeomItemSet=I,I.addGLGeomItem(A)}removeGLGeomItem(A){A.GLGeomItemSet.removeGLGeomItem(A),A.GLGeomItemSet=null}bindShader(A,g,I){const C=this.gl;if(A.isCompiledForTarget(I)||(C.multiDrawElements?g.shaderopts.directives.push(`#define ENABLE_MULTI_DRAW
#extension GL_ANGLE_multi_draw : enable`):g.shaderopts.directives.push("#define ENABLE_MULTI_DRAW"),A.compileForTarget(I,g.shaderopts),g.shaderopts.directives.pop()),!A.bind(g,I))throw new Error("Unable to bind shader:"+A);this.pass.renderer.glGeomItemLibrary.bind(g),this.pass.renderer.glGeomLibrary.bind(g),this.pass.renderer.glMaterialLibrary.bind(g)}draw(A){this.bindShader(this.glShader,A,this.glShaderKey);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].draw(A);this.glShader.unbind(A)}drawHighlightedGeoms(A){if(!!this.glHighlightShader){this.bindShader(this.glHighlightShader,A,this.glHighlightShaderKey);for(const g in this.glGeomItemSets)this.glGeomItemSets[g].drawHighlighted(A);this.glHighlightShader.unbind(A)}}drawGeomData(A){var g;this.bindShader(this.glGeomDataShader,A,this.glGeomDataShaderKey);const I=A.gl,{floatGeomBuffer:C,passId:e,occlusionCulling:i,viewportSize:s}=A.unifs;C&&I.uniform1i(C.location,A.floatGeomBuffer?1:0),e&&I.uniform1i(e.location,A.passIndex),i&&I.uniform1i(i.location,(g=A.occlusionCulling)!==null&&g!==void 0?g:0);for(const o in this.glGeomItemSets)this.glGeomItemSets[o].drawGeomData(A);this.glGeomDataShader.unbind(A)}sortItems(A){for(const g in this.glGeomItemSets)this.glGeomItemSets[g].sortItems(A)}}class Ft extends qo{constructor(){super();this.__glshadermaterials={},this.__glShaderGeomSets={}}getPassType(){return Bg.OPAQUE}filterGeomItem(A){const g=A.materialParam.value;return A.isOpaque()&&g.isOpaque()}checkMaterial(A){return A.isOpaque()}removeAndReAddGeomItem(A){this.removeGeomItem(A),this.__renderer.assignTreeItemToGLPass(A)}addGeomItem(A){super.addGeomItem(A);const I=A.materialParam.value,C=this.renderer.glGeomLibrary,e=this.renderer.glGeomItemLibrary;if(!I.isTextured()&&I.getShaderClass().supportsInstancing()){const B=I.getShaderName();let d=this.__glShaderGeomSets[B];if(!d){const r=this.constructShaders(B);d=new Aa(this,this.__gl,r),d.on("updated",()=>{this.__renderer.requestRedraw()}),this.__glShaderGeomSets[B]=d}const l=this.renderer.glGeomItemLibrary.getGLGeomItem(A);return d.addGLGeomItem(l),l.GLShaderGeomSets=d,this.emit("updated"),!0}const i=C.constructGLGeom(A.geomParam.value),s=e.getGLGeomItem(A),o=I.getShaderName(),a=this.renderer.glMaterialLibrary.getGLMaterial(I);let n=this.__glshadermaterials[o];if(!n){const B=this.constructShaders(o);n=new Od(this.__gl,this,B),this.__glshadermaterials[o]=n,n.on("updated",()=>{this.__renderer.requestRedraw()})}return n.addGLGeomItem(s,i,a),!0}removeGeomItem(A){super.removeGeomItem(A);const g=this.renderer.glGeomItemLibrary.getGLGeomItem(A);return g.GLShaderGeomSets?(g.GLShaderGeomSets.removeGLGeomItem(g),g.GLShaderGeomSets=null,!0):(g.GLGeomItemSet&&(g.GLGeomItemSet.removeGLGeomItem(g),g.GLGeomItemSet=null),!0)}removeMaterial(A){const g=A.getShaderName(),I=this.__glshadermaterials[g];if(!I||I!=A.getMetadata("glshaderMaterials")){console.warn("Material not found in pass");return}const C=A.getMetadata("glMaterialGeomItemSets");I.removeMaterialGeomItemSets(C)}__traverseTreeAndDraw(A){for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].draw(A);for(const g in this.__glshadermaterials)this.__glshadermaterials[g].draw(A);A.glGeom&&A.glGeom.unbind(A)}draw(A){const g=this.__gl;A.pushGLStack(),A.glDisable(g.BLEND),A.glEnable(g.DEPTH_TEST),A.glDisable(g.CULL_FACE),g.depthFunc(g.LEQUAL),g.depthMask(!0),this.__traverseTreeAndDraw(A);const I=this.renderer;I.outlineThickness>0&&I.outlineMethod=="image"&&A.viewport.drawSilhouettes(A),A.popGLStack()}drawHighlightedGeoms(A){const g=this.__gl;g.disable(g.CULL_FACE);for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].drawHighlightedGeoms(A);for(const I in this.__glshadermaterials)this.__glshadermaterials[I].drawHighlightedGeoms(A);A.glGeom&&A.glGeom.unbind(A)}drawGeomData(A){A.passIndex=this.passIndex;const g=this.__gl;g.disable(g.BLEND),g.disable(g.CULL_FACE),g.enable(g.DEPTH_TEST),g.depthFunc(g.LEQUAL),g.depthMask(!0);for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].drawGeomData(A);for(const I in this.__glshadermaterials)this.__glshadermaterials[I].drawGeomData(A);A.glGeom&&A.glGeom.unbind(A)}}OI.registerPass(Ft,Bg.OPAQUE);class Dr extends Ft{constructor(){super();this.linesGeomDataBuffer=null,this.fattenLinesShader=null,this.quad=null,this.fbo=null}init(A,g){super.init(A,g)}filterGeomItem(A){const g=A.geomParam.value;return g instanceof lg||g instanceof pg||g instanceof bI||g instanceof ZI}draw(A){const g=this.__gl;A.pushGLStack(),A.glEnable(g.BLEND),A.glEnable(g.DEPTH_TEST),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),g.depthFunc(g.LEQUAL),g.depthMask(!0),this.__traverseTreeAndDraw(A),A.popGLStack()}drawGeomData(A){const g=this.__gl;if(A.geomDataFbo&&!A.occlusionCulling){this.linesGeomDataBuffer||(this.linesGeomDataBuffer=new KA(g,{type:this.__renderer.floatGeomBuffer?"FLOAT":"UNSIGNED_BYTE",format:"RGBA",filter:"NEAREST",width:1,height:2}),this.fattenLinesShader=new $o(g),this.quad=new ei(g,new zI(1,1)));const I=A.geomDataFbo,C=I.width,e=I.height;if(this.linesGeomDataBuffer.width!=C||this.linesGeomDataBuffer.height!=e){this.fbo&&(g.deleteFramebuffer(this.fbo),this.fbo=null),this.linesGeomDataBuffer.resize(C,e),this.fbo=g.createFramebuffer();const i=this.linesGeomDataBuffer.glTex,s=I.__depthTexture;g.name=="webgl2"?(g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,i,0),g.framebufferTexture2D(g.DRAW_FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,s,0)):(g.bindFramebuffer(g.FRAMEBUFFER,this.fbo),g.framebufferTexture2D(g.FRAMEBUFFER,g.COLOR_ATTACHMENT0,g.TEXTURE_2D,i,0),g.framebufferTexture2D(g.FRAMEBUFFER,g.DEPTH_ATTACHMENT,g.TEXTURE_2D,s,0)),we(g,C,e)}else g.name=="webgl2"?g.bindFramebuffer(g.DRAW_FRAMEBUFFER,this.fbo):g.bindFramebuffer(g.FRAMEBUFFER,this.fbo);g.colorMask(!0,!0,!0,!0),g.clearColor(0,0,0,0),g.clear(g.COLOR_BUFFER_BIT)}if(super.drawGeomData(A),A.geomDataFbo&&!A.occlusionCulling){A.geomDataFbo.bindForWriting(A),this.fattenLinesShader.bind(A);const{colorTexture:I,screenSize:C}=A.unifs;this.linesGeomDataBuffer.bindToUniform(A,I);const e=A.geomDataFbo;g.uniform2f(C.location,e.width,e.height),this.quad.bindAndDraw(A)}}}OI.registerPass(Dr,Bg.OPAQUE);class vr extends qo{constructor(){super();this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new f,this.sortCameraMovementDistance=0,this.reSort=!1}init(A,g){super.init(A,g),this.itemCount=0,this.__glShaderGeomSets={},this.transparentItems=[],this.transparentItemIndices={},this.freeList=[],this.visibleItems=[],this.prevSortCameraPos=new f(999,999,999),this.sortCameraMovementDistance=.25,this.reSort=!1}getPassType(){return Bg.TRANSPARENT}filterGeomItem(A){const g=A.geomParam.value;if(g instanceof lg||g instanceof bI||g instanceof ZI||g instanceof pg)return!1;const I=A.materialParam.value;return!A.isOpaque()||!I.isOpaque()}resortNeeded(){this.reSort=!0}addGeomItem(A){super.addGeomItem(A),this.itemCount++;const g=this.listenerIDs[A.getId()],I=A.materialParam.value,C=I.getShaderName(),e=this.constructShaders(C);if(!I.isTextured()&&I.getShaderClass().supportsInstancing()){let d=this.__glShaderGeomSets[C];d||(d=new Aa(this,this.__gl,e),d.on("updated",()=>{this.renderer.requestRedraw()}),this.__glShaderGeomSets[C]=d);const l=this.renderer.glGeomItemLibrary.getGLGeomItem(A);d.addGLGeomItem(l),g["glGeomItem.visibilityChanged"]=l.on("visibilityChanged",()=>{this.resortNeeded()}),this.emit("updated"),l.GLShaderGeomSets=d,this.reSort=!0;return}const i=this.renderer.glGeomLibrary.constructGLGeom(A.geomParam.value),s=this.renderer.glGeomItemLibrary.getGLGeomItem(A);if(!s)throw new Error("glGeomItem not found for geomItem:"+A.getName());const o=this.renderer.glMaterialLibrary.getGLMaterial(I),a=d=>{if(d.visible)this.visibleItems.push(n);else{const l=this.visibleItems.indexOf(n);this.visibleItems.splice(l,1)}this.reSort=!0};g["glGeomItem.visibilityChanged"]=s.on("visibilityChanged",a),g["GeomMat.valueChanged"]=A.geomMatParam.on("valueChanged",()=>{this.reSort=!0});const n={geomItem:A,shaders:e,glGeom:i,glMaterial:o,glGeomItem:s,material:I};let B;this.freeList.length>0?B=this.freeList.pop():B=this.transparentItems.length,this.transparentItems[B]=n,this.transparentItemIndices[A.getId()]=B,A.isVisible()&&this.visibleItems.push(n),this.reSort=!0}removeGeomItem(A){this.itemCount--;const g=this.listenerIDs[A.getId()];super.removeGeomItem(A);const I=this.renderer.glGeomItemLibrary.getGLGeomItem(A);if(!I)throw new Error("glGeomItem not found for geomItem:"+A.getName());if(I.removeListenerById("visibilityChanged",g["glGeomItem.visibilityChanged"]),I.GLShaderGeomSets)I.GLShaderGeomSets.removeGLGeomItem(I),I.GLShaderGeomSets=null;else{const C=this.transparentItemIndices[A.getId()],e=this.transparentItems[C];delete this.transparentItemIndices[A.getId()],this.transparentItems[C]=null,this.freeList.push(C);const i=this.visibleItems.indexOf(e);i!=-1&&this.visibleItems.splice(i,1)}return this.emit("updated"),!0}sortItems(A){for(const g in this.__glShaderGeomSets)this.__glShaderGeomSets[g].sortItems(A);for(const g of this.visibleItems){const I=g.glGeomItem.geomItem.geomMatParam.value;g.dist=I.translation.distanceTo(A)}this.visibleItems.sort((g,I)=>g.dist>I.dist?-1:g.dist<I.dist?1:0),this.reSort=!1}_drawItem(A,g,I){I.currentGLMaterial!=g.glMaterial&&(I.currentGLMaterial=g.glMaterial,I.currentGLMaterial.bind(A)),I.currentGLGeom!=g.glGeom&&(I.currentGLGeom=g.glGeom,I.currentGLGeom.bind(A)),g.glGeomItem.bind(A),A.bindViewports(A.unifs,()=>{I.currentGLGeom.draw(A)})}_drawItems(A){for(const I in this.__glShaderGeomSets)this.__glShaderGeomSets[I].draw(A);const g={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const I of this.visibleItems){const C=I.shaders.glShader;if(g.currentglShader!=C){if(!C.bind(A,"color"))continue;const e=this.__gl,i=A.unifs;i.instancedDraw&&e.uniform1i(i.instancedDraw.location,0),this.renderer.glGeomItemLibrary.bind(A),g.currentglShader=C}this._drawItem(A,I,g)}}draw(A){if(this.itemCount==0)return;const g=this.__gl,I=A.viewXfo.tr;if(this.reSort||I.distanceTo(this.prevSortCameraPos)>this.sortCameraMovementDistance){if(this.sortItems(I),this.prevSortCameraPos=I,A.vrviewport)this.sortCameraMovementDistance=A.viewScale*.2;else if(A.viewport){const C=A.viewport.getCamera();this.sortCameraMovementDistance=C.getFocalDistance()*.3}}A.pushGLStack(),A.glEnable(g.BLEND),A.glEnable(g.DEPTH_TEST),A.glEnable(g.CULL_FACE),g.depthFunc(g.LESS),g.blendEquation(g.FUNC_ADD),A.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),g.cullFace(g.BACK),this._drawItems(A),A.popGLStack()}drawHighlightedGeoms(A){const g=this.__gl;g.disable(g.CULL_FACE);for(const C in this.__glShaderGeomSets)this.__glShaderGeomSets[C].drawHighlightedGeoms(A);const I={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const C of this.visibleItems){if(!C.geomItem.isHighlighted()||!C.shaders.glselectedshader)continue;const e=C.shaders;if(I.currentglShader!=e.glselectedshader){if(!e.glselectedshader.bind(A,"highlight"))continue;I.currentglShader=e.glselectedshader}const{floatGeomBuffer:i,passId:s,instancedDraw:o}=A.unifs;i&&g.uniform1i(i.location,g.floatGeomBuffer?1:0),s&&g.uniform1i(s.location,this.passIndex),o&&g.uniform1i(o.location,0),this.renderer.glGeomItemLibrary.bind(A),this._drawItem(A,C,I)}I.currentGLGeom&&I.currentGLGeom.unbind(A)}drawGeomData(A){const g=this.__gl;A.pushGLStack(),A.glEnable(g.DEPTH_TEST),A.glEnable(g.CULL_FACE);for(const C in this.__glShaderGeomSets)this.__glShaderGeomSets[C].drawGeomData(A);const I={currentglShader:null,currentGLMaterial:null,currentGLGeom:null};for(const C of this.visibleItems){if(!C.glGeomItem.geomItem.isSelectable())continue;const e=C.shaders;if(!e.glgeomdatashader)continue;if(I.currentglShader!=e.glgeomdatashader){if(!e.glgeomdatashader.bind(A,"geomdata"))continue;I.currentglShader=e.glgeomdatashader}const{floatGeomBuffer:i,passId:s,instancedDraw:o}=A.unifs;i&&g.uniform1i(i.location,g.floatGeomBuffer?1:0),s&&g.uniform1i(s.location,this.passIndex),o&&g.uniform1i(o.location,0),this.renderer.glGeomItemLibrary.bind(A),this._drawItem(A,C,I)}I.currentGLGeom&&I.currentGLGeom.unbind(A),A.popGLStack()}}OI.registerPass(vr,Bg.TRANSPARENT);var Mr=`

precision highp float;
#define GLSLIFY 1

import 'quadVertexFromID.glsl'

uniform vec2 pos;
uniform vec2 size;
uniform vec2 srctextureDim;
const int border = 2;

/* VS Outputs */
varying vec2 v_texCoord;
 
void main()
{
  vec2 position = getQuadVertexPositionFromID();
  v_texCoord = position+0.5;
  gl_Position = vec4(vec2(-1.0, -1.0) + (pos * 2.0) + (v_texCoord * size * 2.0), 0.0, 1.0);

  vec2 borderVec2 = vec2(float(border), float(border));
  v_texCoord *= (srctextureDim + (borderVec2 * 2.0)) / srctextureDim;
  v_texCoord -= borderVec2 / srctextureDim;
}

`,Lr=`
precision highp float;
#define GLSLIFY 1

uniform sampler2D srctexture;
uniform vec2 srctextureDim;
uniform bool alphaFromLuminance;
uniform bool invert;

/* VS Outputs */
varying vec2 v_texCoord;

float luminanceFromRGB(vec3 rgb) {
  return 0.2126*rgb.r + 0.7152*rgb.g + 0.0722*rgb.b;
}

#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif

void main(void) {
  vec2 pixelCoord = v_texCoord*srctextureDim;
  vec2 uv = v_texCoord;

  // Wrap X coords
  if (pixelCoord.x < 0.0) {
    uv.x += 1.0/srctextureDim.x;
    uv.y = 1.0 - uv.y;
  }
  else if (pixelCoord.x > srctextureDim.x) {
    uv.x -= 1.0/srctextureDim.x;
    uv.y = 1.0 - uv.y;
  }

  // Wrap Y coords
  if (pixelCoord.y < 0.0) {
    uv.y += 1.0/srctextureDim.y;
    uv.x = 1.0 - uv.x;
  }
  else if (pixelCoord.y > srctextureDim.y) {
    uv.y -= 1.0/srctextureDim.y;
    uv.x = 1.0 - uv.x;
  }

  vec4 texel = texture2D(srctexture, uv);

#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  // TODO: check why we pre-multiply alphas here.
  // fragColor = vec4(texel.rgb/texel.a, texel.a);

  if (alphaFromLuminance) {
    fragColor = vec4(texel.rgb, luminanceFromRGB(texel.rgb));
  }
  else {
    fragColor = texel;
  }
  
  if (invert) {
    fragColor = vec4(1.0) - fragColor;
  }

#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}

`;class Ur extends OA{constructor(A){super(A,"AtlasLayoutShader");this.setShaderStage("VERTEX_SHADER",Mr),this.setShaderStage("FRAGMENT_SHADER",Lr)}}class kr extends fC{constructor(A,g,I="RGBA",C="FLOAT"){super(A);this.__asyncCount=0,this.loaded=!1,this.ready=!1,this.__layout=[],this.__layoutVec4s=[],this.__atlasLayoutShaderBinding=null,this.__atlasLayoutShader=null,this.__name=g,this.__formatParam=I,this.__typeParam=C,this.clearColor=new W(0,0,0,0),this.__subImages=[],this.__layoutNeedsRegeneration=!1,this.__asyncCount=0,this.loaded=!1}incAsyncCount(A=1){this.__asyncCount+=A,this.ready=!1}decAsyncCount(){this.__asyncCount>0&&(this.__asyncCount--,this.__asyncCount==0&&(this.loaded=!0,this.emit("loaded")))}isLoaded(){return this.__asyncCount==0}addSubImage(A){if(A instanceof Fg){const g=new KA(this.__gl,A);A.isLoaded()||(this.incAsyncCount(),A.on("loaded",()=>{this.decAsyncCount()})),A.setMetadata("ImageAtlas_gltex",g),g.addRef(this);const I=()=>{this.__layoutNeedsRegeneration=!0,this.renderAtlas()};A.on("updated",I),this.__subImages.push(g)}else{const g=A;g.addRef(this),this.__subImages.push(g)}return this.__layoutNeedsRegeneration=!0,this.__subImages.length-1}removeSubImage(A){let g;if(A instanceof Fg){const C=A.getMetadata("ImageAtlas_gltex");g=this.__subImages.indexOf(C),A.deleteMetadata("ImageAtlas_gltex")}else g=this.__subImages.indexOf(A);this.__subImages[g].removeRef(this),this.__subImages.splice(g,1),this.__layoutNeedsRegeneration=!0}getSubImage(A){return this.__subImages[A]}numSubImages(){return this.__layout?this.__layout.length:this.__subImages.length}generateAtlasLayout(A){if(this.__subImages.length==0){this.__layoutNeedsRegeneration=!1;return}const g=2,I=[];this.__subImages.forEach((n,B)=>{I.push({w:n.width+g*2,h:n.height+g*2,area:n.width*n.height,index:B})}),I.sort((n,B)=>n.area>B.area?-1:n.area<B.area?1:0);const C=new cn;C.fit(I),this.__layout=[],I.forEach((n,B)=>{n.fit?this.__layout[n.index]={pos:new K(n.fit.x+g,n.fit.y+g),size:new K(n.w,n.h)}:console.warn("Unable to fit image")});const e=C.root.w,i=C.root.h;this.configure({width:e,height:i,format:this.__typeParam=="FLOAT"&&this.__formatParam=="RGB"?"RGBA":this.__formatParam,type:this.__typeParam,filter:"LINEAR"});const s=this.__gl;if(s.__quadVertexIdsBuffer||s.setupInstancedQuad(),!this.__atlasLayoutShader){this.__atlasLayoutShader=new Ur(this.__gl);const n=[];s.name=="webgl2"&&n.push("#define ENABLE_ES3");const B=this.__atlasLayoutShader.compileForTarget("GLImageAtlas",{directives:n});this.__atlasLayoutShaderBinding=dg(this.__gl,B.attrs,s.__quadattrbuffers,s.__quadIndexBuffer)}const o=1;let a=Math.round(Math.sqrt(this.__layout.length*o)+.5);if(a=P.nextPow2(a),a%o!=0&&(a+=o-a%o),!s.floatTexturesSupported)this.__layoutVec4s=[],this.__layout.forEach((n,B)=>{this.__layoutVec4s[B]=[n.pos.x/e,n.pos.y/i,n.size.x/e,n.size.y/i]});else{const n=new Float32Array(a*a*4);for(let B=0;B<this.__layout.length;B++){const d=this.__layout[B];new cA(new Float32Array(n.buffer,B*4*4,4)).set(d.pos.x/e,d.pos.y/i,d.size.x/e,d.size.y/i)}!this.__atlasLayoutTexture||this.__atlasLayoutTexture.width!=a||this.__atlasLayoutTexture.height!=a?(this.__atlasLayoutTexture&&this.__atlasLayoutTexture.destroy(),this.__atlasLayoutTexture=new KA(s,{format:"RGBA",type:"FLOAT",filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1,width:a,height:a,data:n})):this.__atlasLayoutTexture.bufferData(n,a,a)}this.textureDesc[0]=this.width,this.textureDesc[1]=this.height,this.textureDesc[2]=this.__atlasLayoutTexture.width,this.__layoutNeedsRegeneration=!1}getLayoutData(A){return this.__layoutVec4s[A]}renderAtlas(A=!1,g=0){if(this.__subImages.length==0)return;this.__layoutNeedsRegeneration&&this.generateAtlasLayout();const I=this.__gl,C=new PI(I);this.bindForWriting(C,!0),this.__atlasLayoutShader.bind(C,"GLImageAtlas"),this.__atlasLayoutShaderBinding.bind(C);const e=new K(1/this.width,1/this.height),i=C.unifs;for(let s=g;s<this.__subImages.length;s++){const o=this.__subImages[s],a=this.__layout[s];!o.bindToUniform(C,i.srctexture)||(I.uniform2fv(i.pos.location,a.pos.multiply(e).asArray()),I.uniform2fv(i.size.location,a.size.multiply(e).asArray()),I.uniform2f(i.srctextureDim.location,o.width,o.height),I.uniform1i(i.alphaFromLuminance.location,o.alphaFromLuminance?1:0),I.uniform1i(i.invert.location,o.invert?1:0),I.drawQuad(),C.boundTextures--)}A&&this.cleanup(),this.unbind(C),this.emit("updated")}isReady(){return this.__atlasLayoutTexture!=null}bindToUniform(A,g){super.bindToUniform(A,g);const I=A.unifs;if(this.__atlasLayoutTexture){const C=I[g.name+"_layout"];C&&this.__atlasLayoutTexture.bindToUniform(A,C);const e=I[g.name+"_desc"];e&&this.__gl.uniform4fv(e.location,this.textureDesc)}else{const C=I[g.name+"_desc"];C&&this.__gl.uniform4f(C.location,this.width,this.height,0,0)}return!0}cleanup(){for(const A of this.__subImages)A.removeRef(this);this.__subImages=[],this.destroy()}destroy(){this.cleanup(),super.destroy()}}const Wg=7;class xr extends vo{constructor(){super();this.atlas=null,this.indexArrayUpdateNeeded=!1,this.instanceIdsBuffer=null,this.indexArray=new Float32Array(0),this.glshader=null,this.shaderComp={},this.shaderBinding=null,this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.width=0,this.drawItemsTexture=null,this.billboards=[],this.dirtyBillboards=new Set,this.freeIndices=[],this.drawCount=0,this.threshold=0,this.updateRequested=!1,this.prevSortCameraPos=new f}init(A,g){super.init(A,g),this.atlas=new kr(this.renderer.gl,"Billboards","RGBA","UNSIGNED_BYTE"),this.atlas.clearColor=new W(1,1,1,0);const I=C=>this.emit("updated",C);this.atlas.on("loaded",I),this.atlas.on("updated",I)}getPassType(){return Bg.TRANSPARENT}itemAddedToScene(A,g){return A instanceof RC?(this.addBillboard(A),!0):!1}itemRemovedFromScene(A,g){return A instanceof RC?(this.removeBillboard(A),!0):!1}addBillboard(A){const g=A.imageParam,I=g.value;if(!I){g.on("valueChanged",()=>this.addBillboard(A));return}let C;this.freeIndices.length>0?C=this.freeIndices.pop():C=this.billboards.length;const e=this.atlas.addSubImage(I);A.setMetadata("GLBillboardsPass_Index",C);const i=()=>{A.isVisible()?(this.drawCount++,this.dirtyBillboards.add(C)):this.drawCount--,this.reqUpdateIndexArray()};A.on("visibilityChanged",i);const s=()=>{A.isVisible()&&(this.dirtyBillboards.add(C),this.emit("updated"))};A.globalXfoParam.on("valueChanged",s),A.alphaParam.on("valueChanged",s),A.on("highlightChanged",s),A.isVisible()&&this.drawCount++,this.billboards[C]={billboard:A,imageIndex:e,visibilityChanged:i,updateBillboard:s},this.indexArrayUpdateNeeded=!0,this.requestUpdate()}removeBillboard(A){const g=A.getMetadata("GLBillboardsPass_Index");if(g==-1){console.warn("Billboard already removed.");return}const I=this.billboards[g],C=I.billboard.imageParam.value;this.atlas.removeSubImage(C),A.off("visibilityChanged",I.visibilityChanged),A.off("highlightChanged",I.updateBillboard),A.globalXfoParam.off("valueChanged",I.updateBillboard),A.alphaParam.off("valueChanged",I.updateBillboard),this.billboards[g]=null,this.freeIndices.push(g),A.isVisible()&&this.drawCount--,this.indexArrayUpdateNeeded=!0,this.requestUpdate()}populateBillboardDataArray(A,g,I){const C=A.billboard,e=C.globalXfoParam.value.toMat4(),i=C.pixelsPerMeterParam.value,s=C.pivotParam.value,o=1/i;let a=0;C.alignedToCameraParam.value&&(a|=1<<2),C.drawOnTopParam.value&&(a|=1<<3),C.fixedSizeOnscreenParam.value&&(a|=1<<4);const n=C.alphaParam.value,B=C.colorParam.value,d=g*Wg*4,l=new cA(new Float32Array(I.buffer,d*4,4)),r=new cA(new Float32Array(I.buffer,(d+4)*4,4)),c=new cA(new Float32Array(I.buffer,(d+8)*4,4)),h=new cA(new Float32Array(I.buffer,(d+12)*4,4));if(l.set(e.xAxis.x,e.yAxis.x,e.zAxis.x,e.translation.x),r.set(e.xAxis.y,e.yAxis.y,e.zAxis.y,e.translation.y),c.set(e.xAxis.z,e.yAxis.z,e.zAxis.z,e.translation.z),h.set(o,a,A.imageIndex,n),new cA(new Float32Array(I.buffer,(d+16)*4,4)).set(s.x,s.y,0,0),new cA(new Float32Array(I.buffer,(d+20)*4,4)).set(B.r,B.g,B.b,B.a),C.isHighlighted()){const m=C.getHighlight();new cA(new Float32Array(I.buffer,(d+24)*4,4)).set(m.r,m.g,m.b,m.a)}}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.emit("updated"))}reqUpdateIndexArray(){this.indexArrayUpdateNeeded||(this.indexArrayUpdateNeeded=!0,this.emit("updated"))}updateIndexArray(){const A=this.__gl;this.indexArray&&this.indexArray.length!=this.drawCount&&(A.deleteBuffer(this.instanceIdsBuffer),this.instanceIdsBuffer=null),this.indexArray=new Float32Array(this.drawCount);let g=0;for(let I=0;I<this.billboards.length;I++)this.billboards[I]&&this.billboards[I].billboard.isVisible()&&(this.indexArray[g]=I,g++);this.instanceIdsBuffer||(this.instanceIdsBuffer=A.createBuffer()),A.bindBuffer(A.ARRAY_BUFFER,this.instanceIdsBuffer),A.bufferData(A.ARRAY_BUFFER,this.indexArray,A.STATIC_DRAW),this.indexArrayUpdateNeeded=!1}updateBillboards(A){const g=()=>{this.indexArrayUpdateNeeded&&this.updateIndexArray();const I=this.__gl;if(!this.glshader){I.__quadVertexIdsBuffer||I.setupInstancedQuad(),this.glshader=new $d(I);const e=this.glshader.compileForTarget("GLBillboardsPass",A.shaderopts);this.shaderBinding=dg(I,e.attrs,I.__quadattrbuffers,I.__quadIndexBuffer)}if(this.atlas.renderAtlas(),!I.floatTexturesSupported||!I.drawElementsInstanced){this.modelMatrixArray=[],this.billboardDataArray=[],this.tintColorArray=[],this.indexArray.forEach(e=>{const i=this.billboards[e],s=i.billboard,o=s.globalXfoParam.value.toMat4(),a=s.pixelsPerMeterParam.value,n=1/a;let B=0;s.alignedToCameraParam.value&&(B|=4),s.drawOnTopParam.value&&(B|=8),s.fixedSizeOnscreenParam.value&&(B|=16);const d=s.alphaParam.value,l=s.colorParam.value;this.modelMatrixArray[e]=o.asArray(),this.billboardDataArray[e]=[n,B,i.imageIndex,d],this.tintColorArray[e]=[l.r,l.g,l.b,l.a]}),this.updateRequested=!1;return}let C=Math.round(Math.sqrt((this.billboards.length-this.freeIndices.length)*Wg)+.5);if(C%Wg!=0&&(C+=Wg-C%Wg),this.width=C,this.drawItemsTexture)this.drawItemsTexture.resize(C,C);else{const e={format:"RGBA",type:"FLOAT",width:C,height:C,filter:"NEAREST",wrap:"CLAMP_TO_EDGE",mipMapped:!1};this.drawItemsTexture=new KA(I,e),this.drawItemsTexture.clear()}this.indexArray.forEach(e=>{e!=-1&&this.updateBillboard(e)}),this.updateRequested=!1};this.atlas.isLoaded()?g():this.atlas.on("loaded",g)}updateBillboard(A){if(this.drawCount==0||!this.drawItemsTexture)return;const g=this.billboards[A];if(!g.billboard.isVisible())return;const I=this.__gl,C=new Float32Array(Wg*4);this.populateBillboardDataArray(g,0,C),I.bindTexture(I.TEXTURE_2D,this.drawItemsTexture.glTex);const e=A*Wg%this.width,i=Math.floor(A*Wg/this.width),s=Wg,o=1,a=this.drawItemsTexture.getType(),n=this.drawItemsTexture.getFormat();if(a==I.FLOAT)I.texSubImage2D(I.TEXTURE_2D,0,e,i,s,o,n,a,C);else{const B=P.convertFloat32ArrayToUInt16Array(C);I.texSubImage2D(I.TEXTURE_2D,0,e,i,s,o,n,a,B)}}sort(A){for(const I of this.billboards){const{billboard:C}=I;if(C&&C.isVisible()){const e=C.globalXfoParam.value;I.dist=e.tr.distanceTo(A)}}this.indexArray.sort((I,C)=>I==-1?1:C==-1||this.billboards[I].dist>this.billboards[C].dist?-1:this.billboards[I].dist<this.billboards[C].dist?1:0);const g=this.__gl;g.floatTexturesSupported&&this.instanceIdsBuffer&&(g.bindBuffer(g.ARRAY_BUFFER,this.instanceIdsBuffer),g.bufferData(g.ARRAY_BUFFER,this.indexArray,g.STATIC_DRAW))}__draw(A,g){const I=this.__gl;if(!this.glshader)return;this.glshader.bind(A,g),this.shaderBinding.bind(A);const C=A.unifs,{atlasBillboards:e,passId:i,floatGeomBuffer:s,inVR:o}=A.unifs;if(e&&this.atlas.bindToUniform(A,C.atlasBillboards),s&&A instanceof wC&&I.uniform1i(s.location,A.floatGeomBuffer?1:0),i&&I.uniform1i(i.location,this.passIndex),o&&I.uniform1i(o.location,A.vrPresenting?1:0),!I.floatTexturesSupported||!I.drawElementsInstanced){const{modelMatrix:a,billboardData:n,tintColor:B,layoutData:d}=A.unifs,l=this.indexArray.length;for(let r=0;r<l;r++)I.uniformMatrix4fv(a.location,!1,this.modelMatrixArray[r]),I.uniform4fv(n.location,this.billboardDataArray[r]),I.uniform4fv(B.location,this.tintColorArray[r]),I.uniform4fv(d.location,this.atlas.getLayoutData(this.billboards[r].imageIndex)),A.bindViewports(C,()=>{I.drawQuad()})}else{const{instancesTexture:a,instancesTextureSize:n}=A.unifs;this.drawItemsTexture.bindToUniform(A,a),I.uniform1i(n.location,this.width);{const B=A.attrs.instanceIds.location;I.enableVertexAttribArray(B),I.bindBuffer(I.ARRAY_BUFFER,this.instanceIdsBuffer),I.vertexAttribPointer(B,1,I.FLOAT,!1,4,0),I.vertexAttribDivisor(B,1)}A.bindViewports(C,()=>{I.drawElementsInstanced(I.TRIANGLES,6,I.UNSIGNED_SHORT,0,this.drawCount)})}}draw(A){if(this.drawCount==0||(this.updateRequested&&this.updateBillboards(A),this.dirtyBillboards.size>0&&(this.dirtyBillboards.forEach(e=>{this.updateBillboard(e)}),this.dirtyBillboards.clear()),this.indexArrayUpdateNeeded&&this.updateIndexArray(),!this.glshader))return;const g=A.viewXfo.tr;if(g.distanceTo(this.prevSortCameraPos)>this.threshold)if(this.sort(g),this.prevSortCameraPos=g.clone(),this.drawCount>1){const e=this.indexArray[this.indexArray.length-1],i=this.indexArray[this.indexArray.length-2],s=this.billboards[e].billboard,o=this.billboards[i].billboard,a=s.globalXfoParam.value.tr,n=o.globalXfoParam.value.tr;this.threshold=a.distanceTo(n)}else this.threshold=9999;const C=this.__gl;C.depthMask(!1),C.disable(C.CULL_FACE),C.enable(C.BLEND),C.blendEquation(C.FUNC_ADD),C.blendFunc(C.SRC_ALPHA,C.ONE_MINUS_SRC_ALPHA),this.__draw(A,"DRAW_COLOR"),C.disable(C.BLEND),C.depthMask(!0)}drawHighlightedGeoms(A){this.drawCount!=0&&this.__draw(A,"DRAW_HIGHLIGHT")}drawGeomData(A){this.drawCount!=0&&this.__draw(A,"DRAW_GEOMDATA")}getGeomItemAndDist(A){let g,I;if(A instanceof Float32Array?(g=Math.round(A[1]),I=A[3]):(g=A[0]+((A[1]&63)<<8),I=P.decode16BitFloatFrom2xUInt8(A.slice(2,3))),g>=this.billboards.length){console.warn("Invalid Draw Item id:"+g+" NumBillboards:"+(this.billboards.length-1));return}return{geomItem:this.billboards[g].billboard,componentId:0,dist:I}}}OI.registerPass(xr,Bg.TRANSPARENT);class Tr extends Ft{constructor(){super()}getPassType(){return Bg.OVERLAY}filterGeomItem(A){if(A.isOverlay())return!0;const g=A.materialParam.value.getShaderClass();return!!(g&&g.isOverlay())}draw(A){const g=this.__gl;g.clear(g.DEPTH_BUFFER_BIT),g.enable(g.CULL_FACE),g.cullFace(g.BACK),g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),A.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),this.__traverseTreeAndDraw(A),g.disable(g.BLEND)}drawGeomData(A){const g=this.__gl;g.clear(g.DEPTH_BUFFER_BIT),g.enable(g.CULL_FACE),g.cullFace(g.BACK),g.enable(g.BLEND),g.blendEquation(g.FUNC_ADD),A.pass="ADD",g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA),super.drawGeomData(A),g.disable(g.BLEND),g.enable(g.DEPTH_TEST)}}OI.registerPass(Tr,Bg.OVERLAY);console.log(`Zea Engine v${wo}`);const pe=new on(wo);var zr="@zeainc/zea-ux",_r="4.1.0",Pr="Zea UX",Or="dist/index.cjs.js",Xt="dist/index.esm.js",jr="dist/index.umd.js",qr="dist/zea-ux.d.ts",$r=["dist/","css/"],Ac=["Zea","UX"],gc={"build:tsc":"npx tsc","build:tsc:watch":"npx tsc --watch","clean:build":"rm -Rf dist/ buildcache","build:rollup":"rollup -c","build:rollup:watch":"rollup -w -c",build:"npm-run-all clean:build build:rollup",dev:"npm-run-all --parallel build:rollup:watch start:watch",start:"es-dev-server --app-index testing-e2e/index.html --open","start:watch":"es-dev-server --app-index testing-e2e/index.html --open --watch",release:"standard-version",dist:"yarn publish --access=public",docs:"adg --config adg.config.json","docs-w":"adg -w --config=adg.config.json","docs:serve":"docsify serve docs/",lint:"eslint src/",prepare:"yarn run build",test:"jest",generate:"plop","test:coverage":"jest --coverage","test:debug":"node --inspect ./node_modules/jest/bin/jest.js --runInBand --watch","test:watch":"jest --watch","test:e2e":"percy exec cypress run --browser chrome --headless","test:e2e:watch":"percy exec cypress open","to-cleanup":"rm -Rf dist/ node_modules/ yarn.lock","to-link-packages":"yarn link @zeainc/zea-engine"},Ic={type:"git",url:"git+ssh://git@github.com/ZeaInc/zea-ux.git"},Cc={url:"https://github.com/ZeaInc/zea-ux/issues"},ec="https://github.com/ZeaInc/zea-ux#readme",ic="Zea Inc.",tc="MIT",sc={"@babel/preset-env":"^7.12.7","@percy/cypress":"^2.3.1","@rollup/plugin-commonjs":"^21.0.1","@rollup/plugin-json":"^4.1.0","@rollup/plugin-node-resolve":"^13.0.6","@zeainc/jsdocs2md":"^0.0.7","@zeainc/zea-collab":"^6.0.1","@zeainc/zea-engine":"^4",canvas:"^2.6.1",copyfiles:"^2.4.1",cypress:"^5.6.0","docsify-cli":"^4.4.2",documentation:"^13.1.0","es-dev-server":"^1.60.1",eslint:"^7.14.0","eslint-config-google":"^0.14.0","eslint-config-prettier":"^6.15.0","eslint-plugin-prettier":"^3.2.0",husky:"^4.3.0","husky-run":"^0.0.0",jest:"^26.6.3","npm-run-all":"^4.1.5",plop:"^2.7.4",prettier:"^2.2.1",rollup:"^2.34.1","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-dts":"^4.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-terser":"^7.0.2","rollup-plugin-typescript":"^1.0.1","standard-version":"^9.0.0","ts-node":"^10.4.0",tslib:"^2.3.1",typescript:"^4.4.4"},oc={"dom-to-image":"^2.6.0"},ac={hooks:{"disabled=pre-commit":"npm test","disabled=pre-push":"npm test"}},nc={name:zr,version:_r,description:Pr,main:Or,module:Xt,browser:jr,types:qr,files:$r,keywords:Ac,scripts:gc,repository:Ic,bugs:Cc,homepage:ec,author:ic,license:tc,devDependencies:sc,dependencies:oc,husky:ac};function vI(t){if(typeof t=="undefined"){console.warn("undefined event");return}if(t instanceof wg)return t.pointerRay;if(t instanceof kg)return t.touches[0].touchRay;if(t instanceof nI){const A=t.controller.getTipXfo(),g=A.ori.getZaxis().negate();return new rg(A.tr,g)}else return console.warn("unhandled pointer event"),new rg}class VC extends L{constructor(A){super(A);this.captured=!1,this.colorParam=new ag("Color",new W),this.highlightColorParam=new ag("HighlightColor",new W(1,1,1)),this.addParameter(this.colorParam),this.addParameter(this.highlightColorParam)}highlight(){this.emit("highlight")}unhighlight(){this.emit("unhighlight")}getManipulationPlane(){const A=this.globalXfoParam.value;return new rg(A.tr,A.ori.getZaxis())}onPointerEnter(A){this.highlight()}onPointerLeave(A){this.unhighlight()}onPointerDown(A){A.setCapture(this),A.stopPropagation(),this.captured=!0,this.changedTouches&&this.highlight(),A.pointerType=="mouse"||A.pointerType=="touch"?this.handlePointerDown(A):A.pointerType=="xr"&&this.onVRControllerButtonDown(A)}onPointerMove(A){this.captured&&(A.stopPropagation(),A.pointerType=="mouse"||A.pointerType=="touch"?this.handlePointerMove(A):A.pointerType=="xr"&&this.onVRPoseChanged(A)),A.preventDefault()}onPointerUp(A){this.captured&&(A.releaseCapture(),A.stopPropagation(),this.captured=!1,this.changedTouches&&this.unhighlight(),A.pointerType=="mouse"||A.pointerType=="touch"?this.handlePointerUp(A):A.pointerType=="xr"&&this.onVRControllerButtonUp(A))}onWheel(A){}handlePointerDown(A){this.gizmoRay=this.getManipulationPlane();const g=vI(A),I=g.intersectRayPlane(this.gizmoRay);this.grabPos=g.pointAtDist(I),this.onDragStart(A)}handlePointerMove(A){const g=vI(A),I=g.intersectRayPlane(this.gizmoRay);this.holdPos=g.pointAtDist(I),this.onDrag(A)}handlePointerUp(A){const g=vI(A);if(g){const I=g.intersectRayPlane(this.gizmoRay);this.releasePos=g.pointAtDist(I)}this.onDragEnd(A)}onVRControllerButtonDown(A){this.activeController=A.controller;const g=this.activeController.getTipXfo().clone(),I=this.getManipulationPlane(),C=g.tr.subtract(I.start),e=g.tr.subtract(I.dir.scale(C.dot(I.dir)));this.grabPos=e,this.onDragStart(A)}onVRPoseChanged(A){if(this.activeController){const g=this.activeController.getTipXfo(),I=this.getManipulationPlane(),C=g.tr.subtract(I.start),e=g.tr.subtract(I.dir.scale(C.dot(I.dir)));this.holdPos=e,this.onDrag(A)}}onVRControllerButtonUp(A){this.activeController==A.controller&&(this.activeController.getTipXfo(),this.onDragEnd(A),this.activeController=void 0)}onDragStart(A){console.warn("@Handle#onDragStart - Implement me!",A)}onDrag(A){console.warn("@Handle#onDrag - Implement me!",A)}onDragEnd(A){console.warn("@Handle#onDragEnd - Implement me!",A)}setTargetParam(A,g){console.warn("setTargetParam not implemented")}}class ga extends VC{constructor(A){super(A)}handlePointerDown(A){this.gizmoRay=this.getManipulationPlane();const g=vI(A);this.grabDist=g.intersectRayVector(this.gizmoRay)[1];const I=this.gizmoRay.pointAtDist(this.grabDist);this.grabPos=I,this.onDragStart(A)}handlePointerMove(A){const I=vI(A).intersectRayVector(this.gizmoRay)[1];this.holdPos=this.gizmoRay.pointAtDist(I),this.holdDist=I,this.value=I,this.delta=I-this.grabDist,this.onDrag(A)}handlePointerUp(A){const g=vI(A);if(g){const I=g.intersectRayVector(this.gizmoRay)[1],C=this.gizmoRay.pointAtDist(I);this.releasePos=C}this.onDragEnd(A)}onVRControllerButtonDown(A){this.gizmoRay=this.getManipulationPlane(),this.activeController=A.controller;const g=this.activeController.getTipXfo();this.grabDist=g.tr.subtract(this.gizmoRay.start).dot(this.gizmoRay.dir),this.grabPos=this.gizmoRay.start.add(this.gizmoRay.dir.scale(this.grabDist)),this.onDragStart(A)}onVRPoseChanged(A){const I=this.activeController.getTipXfo().tr.subtract(this.gizmoRay.start).dot(this.gizmoRay.dir);this.holdPos=this.gizmoRay.start.add(this.gizmoRay.dir.scale(I)),this.value=I,this.delta=I-this.grabDist,this.onDrag(A)}onVRControllerButtonUp(A){this.activeController==A.controller&&(this.onDragEnd(),this.activeController=void 0)}}class fA extends FA{constructor(){super();this.__undoStack=[],this.__redoStack=[],this.__currChange=null,this.__currChangeUpdated=this.__currChangeUpdated.bind(this)}flush(){for(const A of this.__undoStack)A.destroy();this.__undoStack=[];for(const A of this.__redoStack)A.destroy();this.__redoStack=[],this.__currChange&&(this.__currChange.off("updated",this.__currChangeUpdated),this.__currChange=null)}addChange(A){this.__currChange&&this.__currChange.off&&this.__currChange.off("updated",this.__currChangeUpdated),this.__undoStack.push(A),this.__currChange=A,this.__currChange.on&&this.__currChange.on("updated",this.__currChangeUpdated);for(const g of this.__redoStack)g.destroy();this.__redoStack=[],this.emit("changeAdded",{change:A})}getCurrentChange(){return this.__currChange}__currChangeUpdated(A){this.emit("changeUpdated",A)}undo(A=!0){if(this.__undoStack.length>0){this.__currChange&&(this.__currChange.off("updated",this.__currChangeUpdated),this.__currChange=null);const g=this.__undoStack.pop();g.undo(),A&&(this.__redoStack.push(g),this.emit("changeUndone"))}}cancel(){this.__undoStack.length>0&&(this.__currChange&&(this.__currChange.off("updated",this.__currChangeUpdated),this.__currChange=null),this.__undoStack.pop().undo())}redo(){if(this.__redoStack.length>0){const A=this.__redoStack.pop();A.redo(),this.__undoStack.push(A),this.emit("changeRedone")}}constructChange(A){return p.constructClass(A)}static isChangeClassRegistered(A){try{const g=p.getClassName(Object.getPrototypeOf(A).constructor);return!0}catch{return!1}}static getChangeClassName(A){return p.getClassName(Object.getPrototypeOf(A).constructor)}static registerChange(A,g){p.register(A,g)}static getInstance(){return Ri||(Ri=new fA),Ri}}let Ri;class Hg extends FA{constructor(A){super();this.secondaryChanges=[],this.suppressPrimaryChange=!1,this.name=A||fA.getChangeClassName(this)}addSecondaryChange(A){const g=this.secondaryChanges.length;return this.secondaryChanges.push(A),g}undo(){this.secondaryChanges.forEach(A=>A.undo())}redo(){this.secondaryChanges.forEach(A=>A.redo())}update(A){throw new Error("Implement me")}toJSON(A){return{}}fromJSON(A,g){}updateFromJSON(A){this.update(A)}destroy(){}}class fI extends Hg{constructor(A,g){if(A){super(A?A.getName()+" Changed":"ParameterValueChange");this.prevValue=A.getValue(),this.param=A,g!=null&&(this.nextValue=g,this.param.value=this.nextValue)}else super()}undo(){this.param&&!this.suppressPrimaryChange&&(this.param.value=this.prevValue),super.undo()}redo(){this.param&&!this.suppressPrimaryChange&&(this.param.value=this.nextValue),super.redo()}update(A){!this.param||(this.nextValue=A.value,this.param.value=this.nextValue,this.emit("updated",A))}toJSON(A){const g={name:this.name,paramPath:this.param.getPath()};return this.nextValue!=null&&(this.nextValue.toJSON?g.value=this.nextValue.toJSON():g.value=this.nextValue),g}fromJSON(A,g){const I=g.appData.scene.getRoot().resolvePath(A.paramPath,1);if(!I||!(I instanceof zA)){console.warn("resolvePath is unable to resolve",A.paramPath);return}this.param=I,this.prevValue=this.param.getValue(),this.prevValue.clone?this.nextValue=this.prevValue.clone():this.nextValue=this.prevValue,this.name=A.name,A.value!=null&&this.updateFromJSON(A)}updateFromJSON(A){!this.param||(this.nextValue.fromJSON?this.nextValue.fromJSON(A.value):this.nextValue=A.value,this.param.value=this.nextValue)}}fA.registerChange("ParameterValueChange",fI);class Ht extends wA{constructor(A){super(A);this.baseColorParam=new VA("BaseColor",new W(1,1,.5)),this.maintainScreenSizeParam=new Y("MaintainScreenSize",0),this.overlayParam=new Y("Overlay",0,[0,1]),this.__shaderName="HandleShader",this.addParameter(this.baseColorParam),this.addParameter(this.maintainScreenSizeParam),this.addParameter(this.overlayParam)}}p.register("HandleMaterial",Ht);class Bc extends OA{constructor(A){super(A);this.__shaderStages.VERTEX_SHADER=SA.parseShader("HandleShader.vertexShader",`
precision highp float;

attribute vec3 positions;
#ifdef ENABLE_TEXTURES
attribute vec2 texCoords;
#endif

<%include file="GLSLUtils.glsl"/>
<%include file="stack-gl/transpose.glsl"/>
<%include file="drawItemId.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="modelMatrix.glsl"/>

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

#ifdef ENABLE_MULTI_DRAW
<%include file="materialparams.glsl"/>
#else
uniform int MaintainScreenSize;
uniform float Overlay;
#endif

/* VS Outputs */
varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif

void main(void) {
  int drawItemId = getDrawItemId();
  v_drawItemId = float(drawItemId);
  v_geomItemData  = getInstanceData(drawItemId);

  //////////////////////////////////////////////
  // Material

#ifdef ENABLE_MULTI_DRAW
  vec2 materialCoords = v_geomItemData.zw;
  vec4 materialValue1 = getMaterialValue(materialCoords, 1);
  int maintainScreenSize = int(materialValue1.x + 0.5);
  float overlay = materialValue1.y;
#else
  int maintainScreenSize = MaintainScreenSize;
  float overlay = Overlay;
#endif

  //////////////////////////////////////////////
  // Matrix
  
  mat4 modelMatrix = getModelMatrix(drawItemId);
  if (maintainScreenSize != 0) {
    // Remove the scale from the model matrix.
    vec3 row0 = normalize(vec3(modelMatrix[0][0], modelMatrix[0][1], modelMatrix[0][2]));
    vec3 row1 = normalize(vec3(modelMatrix[1][0], modelMatrix[1][1], modelMatrix[1][2]));
    vec3 row2 = normalize(vec3(modelMatrix[2][0], modelMatrix[2][1], modelMatrix[2][2]));
    modelMatrix = mat4(
      row0.x, row0.y, row0.z, 0.0,
      row1.x, row1.y, row1.z, 0.0,
      row2.x, row2.y, row2.z, 0.0,
      modelMatrix[3][0], modelMatrix[3][1], modelMatrix[3][2], 1.0
    );
  }
  mat4 modelViewMatrix = viewMatrix * modelMatrix;
  if (maintainScreenSize != 0) {
    float dist = modelViewMatrix[3][2];
    float sc = abs(dist); // Note: items in front of the camera will have a negative value here.
    mat4 scmat = mat4(
      sc, 0.0, 0.0, 0.0,
      0.0, sc, 0.0, 0.0,
      0.0, 0.0, sc, 0.0,
      0.0, 0.0, 0.0, 1.0
    );
    modelViewMatrix = modelViewMatrix * scmat;
  }

  vec4 viewPos = modelViewMatrix * vec4(positions, 1.0);
  gl_Position = projectionMatrix * viewPos;

  if(overlay > 0.0){
    gl_Position.z = mix(gl_Position.z, -gl_Position.w, overlay);
  }

  v_viewPos = viewPos.xyz;
  v_textureCoord = texCoords;
  v_textureCoord.y = 1.0 - v_textureCoord.y;// Flip y
}
`),this.__shaderStages.FRAGMENT_SHADER=SA.parseShader("HandleShader.fragmentShader",`
precision highp float;

<%include file="GLSLUtils.glsl"/>
<%include file="math/constants.glsl"/>
<%include file="drawItemTexture.glsl"/>
<%include file="stack-gl/gamma.glsl"/>
<%include file="materialparams.glsl"/>


#if defined(DRAW_COLOR)

uniform color BaseColor;

#ifdef ENABLE_TEXTURES
uniform sampler2D BaseColorTex;
uniform int BaseColorTexType;
#endif

#elif defined(DRAW_GEOMDATA)

uniform int isOrthographic;
import 'surfaceGeomData.glsl'

#elif defined(DRAW_HIGHLIGHT)

#ifdef ENABLE_FLOAT_TEXTURES
vec4 getHighlightColor(int id) {
  return fetchTexel(instancesTexture, instancesTextureSize, (id * pixelsPerItem) + 4);
}
#else // ENABLE_FLOAT_TEXTURES

uniform vec4 highlightColor;

vec4 getHighlightColor() {
    return highlightColor;
}

#endif // ENABLE_FLOAT_TEXTURES

#endif // DRAW_HIGHLIGHT

/* VS Outputs */
varying float v_drawItemId;
varying vec4 v_geomItemData;
varying vec3 v_viewPos;
#ifdef ENABLE_TEXTURES
varying vec2 v_textureCoord;
#endif


#ifdef ENABLE_ES3
  out vec4 fragColor;
#endif
void main(void) {
#ifndef ENABLE_ES3
  vec4 fragColor;
#endif

  int drawItemId = int(v_drawItemId + 0.5);

  //////////////////////////////////////////////
  // Color
#if defined(DRAW_COLOR)


#ifdef ENABLE_MULTI_DRAW

  vec2 materialCoords = v_geomItemData.zw;
  vec4 baseColor = toLinear(getMaterialValue(materialCoords, 0));

#else // ENABLE_MULTI_DRAW

#ifndef ENABLE_TEXTURES
  vec4 baseColor = toLinear(BaseColor);
#else
  vec4 baseColor = getColorParamValue(BaseColor, BaseColorTex, BaseColorTexType, v_textureCoord);
#endif // ENABLE_TEXTURES

#endif // ENABLE_MULTI_DRAW

  fragColor = baseColor;

#ifdef ENABLE_INLINE_GAMMACORRECTION
  fragColor.rgb = toGamma(fragColor.rgb);
#endif

  //////////////////////////////////////////////
  // GeomData
#elif defined(DRAW_GEOMDATA)

  fragColor = setFragColor_geomData(v_viewPos, floatGeomBuffer, passId, v_drawItemId, isOrthographic);
  //////////////////////////////////////////////
  // Highlight
#elif defined(DRAW_HIGHLIGHT)
  
  fragColor = getHighlightColor(drawItemId);

#endif // DRAW_HIGHLIGHT


#ifndef ENABLE_ES3
  gl_FragColor = fragColor;
#endif
}
`)}static getPackedMaterialData(A){const g=new Float32Array(8),I=A.getParameter("BaseColor").getValue();return g[0]=I.r,g[1]=I.g,g[2]=I.b,g[3]=I.a,g[4]=A.getParameter("MaintainScreenSize").getValue(),g[5]=A.getParameter("Overlay").getValue(),g}static isOverlay(){return!0}static getMaterialTemplate(){return lc}}const lc=new Ht("HandleShader_template");p.register("HandleShader",Bc);const Ia=(t,A)=>{t.update();const g=t.getVertexAttribute("positions");for(let I=0;I<g.getCount();I++){const C=g.getValueRef(I),e=A.transformVec3(C);C.set(e.x,e.y,e.z)}};class ti extends Hg{constructor(A,g){super("SelectionXfoChange");this.treeItems=[],this.localXfos=[],this.prevValues=[],this.newValues=[],this.treeItems=A,this.baseXfo=g;const I=g.inverse();this.treeItems.forEach(C=>{this.localXfos.push(I.multiply(C.globalXfoParam.value)),this.prevValues.push(C.globalXfoParam.value),this.newValues.push(C.globalXfoParam.value)})}setDeltaXfo(A){const g=this.baseXfo.clone();g.tr=A.tr.add(g.tr),g.ori=A.ori.multiply(g.ori),g.sc=A.sc.multiply(g.sc),this.prevValues.forEach((I,C)=>{const e=g.multiply(this.localXfos[C]);this.newValues[C]=e,this.treeItems[C].globalXfoParam.value=this.newValues[C].clone()}),this.emit("updated")}setDone(){this.emit("done")}undo(){this.treeItems.forEach((A,g)=>{A.globalXfoParam.value=this.prevValues[g]}),super.undo()}redo(){this.treeItems.forEach((A,g)=>{A.globalXfoParam.value=this.newValues[g]}),super.redo()}update(A){this.newValues=A.newValues,this.treeItems.forEach((g,I)=>{g.globalXfoParam.value=this.newValues[I]}),this.emit("updated",A)}toJSON(A){const g={name:this.name,treeItems:[],prevValues:[],newValues:[]};return this.treeItems.forEach((I,C)=>{g.treeItems[C]=this.treeItems[C].getPath(),g.prevValues[C]=this.prevValues[C].toJSON(),g.newValues[C]=this.newValues[C].toJSON()}),g}fromJSON(A,g){const I=g.appData.scene.getRoot().resolvePath(A.paramPath,1);if(!I||!(I instanceof zA)){console.warn("resolvePath is unable to resolve",A.paramPath);return}A.treeItems.forEach((C,e)=>{this.treeItems[e]=g.appData.scene.getRoot().resolvePath(C,1),this.prevValues[e]||(this.prevValues[e]=new D),this.prevValues[e].fromJSON(A.prevValues[e]),this.newValues[e]||(this.newValues[e]=new D),this.newValues[e].fromJSON(A.newValues[e])})}updateFromJSON(A){A.treeItems.forEach((g,I)=>{this.prevValues[I].fromJSON(A.prevValues[I]),this.newValues[I].fromJSON(A.newValues[I])})}}fA.registerChange("SelectionXfoChange",ti);class ne extends ga{constructor(A,g=.1,I=.003,C=new W){super(A);this.colorParam.value=C,this.handleMat=new wA("handle","HandleShader"),this.handleMat.getParameter("BaseColor").value=C,this.handleMat.getParameter("MaintainScreenSize").value=1,this.handleMat.getParameter("Overlay").value=.9;const e=new ht(I,g,64);e.baseZAtZeroParam.value=!0;const i=new ct(I*4,I*10,64,!0),s=new gA("handle",e,this.handleMat),o=new gA("tip",i,this.handleMat),a=new D;a.tr.set(0,0,g),Ia(i,a),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(s),this.addChild(o)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}setSelectionGroup(A){this.selectionGroup=A}setTargetParam(A,g=!0){if(this.param=A,g){const I=()=>{this.globalXfoParam.value=A.getValue()};I(),A.on("valueChanged",I)}}getTargetParam(){return this.param?this.param:this.globalXfoParam}onDragStart(A){const g=this.getTargetParam();if(this.baseXfo=g.getValue(),this.selectionGroup){const I=this.selectionGroup.getItems();this.change=new ti(Array.from(I),this.globalXfoParam.value),fA.getInstance().addChange(this.change)}else this.change=new fI(g),fA.getInstance().addChange(this.change)}onDrag(A){const g=this.holdPos.subtract(this.grabPos);if(this.selectionGroup){const I=this.change,C=new D(g);I.setDeltaXfo(C)}else{const I=this.baseXfo.clone();I.tr.addInPlace(g),this.change.update({value:I})}}onDragEnd(A){this.selectionGroup&&this.change.setDone(),this.change=null}}class Ca extends VC{constructor(A){super(A)}setSelectionGroup(A){this.selectionGroup=A}setTargetParam(A,g=!0){if(this.param=A,g){const I=()=>{this.globalXfoParam.value=A.getValue()};I(),A.on("valueChanged",I)}}getTargetParam(){return this.param?this.param:this.globalXfoParam}onDragStart(A){if(this.baseXfo=this.globalXfoParam.value.clone(),this.vec0=this.grabPos.subtract(this.baseXfo.tr),this.grabCircleRadius=this.vec0.length(),this.vec0.normalizeInPlace(),this.selectionGroup){const g=this.selectionGroup.getItems();this.change=new ti(Array.from(g),this.baseXfo),fA.getInstance().addChange(this.change)}else{const g=this.getTargetParam();this.change=new fI(g),fA.getInstance().addChange(this.change)}}onDrag(A){const g=this.holdPos.subtract(this.baseXfo.tr);g.normalizeInPlace();const I=1;let C=this.vec0.angleTo(g)*I;if(this.vec0.cross(g).dot(this.baseXfo.ori.getZaxis())<0&&(C=-C),this.range&&(C=P.clamp(C,this.range[0],this.range[1])),(A instanceof wg||A instanceof kg)&&A.shiftKey){const o=22.5*(Math.PI/180);C=Math.floor(C/o)*o}const e=new D;if(e.ori.setFromAxisAndAngle(this.baseXfo.ori.getZaxis(),C),this.selectionGroup)this.change.setDeltaXfo(e);else{const i=this.baseXfo.clone();i.ori=e.ori.multiply(i.ori),this.change.update({value:i})}}onDragEnd(A){this.selectionGroup&&this.change.setDone(),this.change=null}}class Be extends Ca{constructor(A,g,I,C=new W(1,1,0)){super(A);this.radiusParam=new Y("Radius",g),this.colorParam.value=C,this.addParameter(this.radiusParam),this.handleMat=new wA("handle","HandleShader"),this.handleMat.getParameter("BaseColor").value=C,this.handleMat.getParameter("MaintainScreenSize").value=1,this.handleMat.getParameter("Overlay").value=.9;const e=new Jo(I,g,64,Math.PI*.5);this.handle=new gA("handle",e,this.handleMat),this.handleXfo=new D,this.radiusParam.on("valueChanged",()=>{g=this.radiusParam.getValue(),e.outerRadiusParam.value=g,e.innerRadiusParam.value=g*.02}),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(this.handle)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}getBaseXfo(){return this.globalXfoParam.value}onDragStart(A){super.onDragStart(A)}onDrag(A){super.onDrag(A)}onDragEnd(A){super.onDragEnd(A)}}class dc extends VC{constructor(A){super(A);this.fullXfoManipulationInVR=!0}setSelectionGroup(A){this.selectionGroup=A}setTargetParam(A,g=!0){if(this.param=A,g){const I=()=>{this.globalXfoParam.value=A.getValue()};I(),A.on("valueChanged",I)}}getTargetParam(){return this.param?this.param:this.globalXfoParam}onDragStart(A){this.grabPos=this.grabPos;const g=this.getTargetParam();if(this.baseXfo=g.value,this.selectionGroup){const I=this.selectionGroup.getItems();this.change=new ti(Array.from(I),this.globalXfoParam.value),fA.getInstance().addChange(this.change)}else this.change=new fI(g),fA.getInstance().addChange(this.change)}onDrag(A){const g=this.holdPos.subtract(this.grabPos);if(this.selectionGroup){const I=this.change,C=new D(g);I.setDeltaXfo(C)}else{const I=this.baseXfo.clone();I.tr.addInPlace(g),this.change.update({value:I})}}onDragEnd(A){this.selectionGroup&&this.change.setDone(),this.change=null}onVRControllerButtonDown(A){if(this.fullXfoManipulationInVR){this.activeController=A.controller;const g=this.activeController.getTipXfo(),I=this.globalXfoParam.value;this.grabOffset=g.inverse().multiply(I)}else super.onVRControllerButtonDown(A)}onVRPoseChanged(A){if(this.fullXfoManipulationInVR){const I=this.activeController.getTipXfo().multiply(this.grabOffset);if(this.change)this.change.update({value:I});else{const C=this.getTargetParam();C.value=I}}else super.onVRPoseChanged(A)}onVRControllerButtonUp(A){this.fullXfoManipulationInVR?this.change=null:super.onVRControllerButtonUp(A)}}class le extends dc{constructor(A,g,I,C=new W){super(A);this.sizeParam=new Y("Size",g),this.addParameter(this.sizeParam),this.colorParam.value=C,this.handleMat=new wA("handle","HandleShader"),this.handleMat.getParameter("BaseColor").value=C,this.handleMat.getParameter("MaintainScreenSize").value=1,this.handleMat.getParameter("Overlay").value=.9;const e=new _e(g,g,g*.02),i=new D;i.tr=I,Ia(e,i),this.handle=new gA("handle",e,this.handleMat),this.sizeParam.on("valueChanged",()=>{g=this.sizeParam.getValue(),e.sizeXParam.value=g,e.sizeYParam.value=g,e.sizeZParam.value=g*.02}),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(this.handle)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}}class rc extends L{constructor(A=.1,g=.003){super("XfoHandle");this.highlightColorParam=new ag("HighlightColor",new W(1,1,1)),this.highlightColorParam.on("valueChanged",()=>{const a=this.highlightColorParam.getValue();this.traverse(n=>{n instanceof VC&&(n.highlightColorParam.value=a)})}),this.addParameter(this.highlightColorParam);const I=new L("Translate");this.addChild(I);const C=new W(1,.1,.1),e=new W("#32CD32"),i=new W("#1E90FF");C.a=1,e.a=1,i.a=1;{const a=new ne("linearX",A,g,C),n=new D;n.ori.setFromAxisAndAngle(new f(0,1,0),Math.PI*.5),a.localXfoParam.value=n,I.addChild(a)}{const a=new ne("linearY",A,g,e),n=new D;n.ori.setFromAxisAndAngle(new f(1,0,0),Math.PI*-.5),a.localXfoParam.value=n,I.addChild(a)}{const a=new ne("linearZ",A,g,i);I.addChild(a)}const s=A*.35;{const a=new le("planarXY",s,new f(s*.5,s*.5,0),i),n=new D;a.localXfoParam.value=n,I.addChild(a)}{const a=new le("planarYZ",s,new f(s*-.5,s*.5,0),C),n=new D;n.ori.setFromAxisAndAngle(new f(0,1,0),Math.PI*.5),a.localXfoParam.value=n,I.addChild(a)}{const a=new le("planarXZ",s,new f(s*.5,s*.5,0),e),n=new D;n.ori.setFromAxisAndAngle(new f(1,0,0),Math.PI*.5),a.localXfoParam.value=n,I.addChild(a)}const o=new L("Rotate");this.addChild(o);{const a=new Be("rotationX",A*.75,g,C),n=new D;n.ori.setFromEulerAngles(new oI(Math.PI*-.5,Math.PI*-.5,0)),a.localXfoParam.value=n,o.addChild(a)}{const a=new Be("rotationY",A*.75,g,e),n=new D;n.ori.setFromAxisAndAngle(new f(1,0,0),Math.PI*-.5),a.localXfoParam.value=n,o.addChild(a)}{const a=new Be("rotationZ",A*.75,g,i),n=new D;n.ori.setFromAxisAndAngle(new f(0,0,1),Math.PI*.5),a.localXfoParam.value=n,o.addChild(a)}}showHandles(A){A?this.setVisible(!0):this.setVisible(!1)}setTargetParam(A,g=!0){this.param=A,this.traverse(I=>{I instanceof VC&&I.setTargetParam(A,!1)})}setSelectionGroup(A){this.traverse(g=>{(g instanceof ne||g instanceof le||g instanceof Be)&&g.setSelectionGroup(A)})}}class cc extends og{constructor(A,g){super();this.xfoModeInput=new eB("InitialXfoMode"),this.xfoOutput=new xe("GroupGlobalXfo"),this.addInput(this.xfoModeInput).setParam(A),this.addOutput(this.xfoOutput).setParam(g),this.currGroupXfo=new D}addItem(A){const g=new $g("MemberGlobalXfo"+this.getNumInputs());g.setParam(A.globalXfoParam),this.addInput(g),this.setDirty()}removeItem(A){const g=A.globalXfoParam;for(let I=1;I<this.getNumInputs();I++){const C=this.getInputByIndex(I);if(C.getParam()==g){this.removeInput(C),this.setDirty();return}}throw new Error("Item not found in SelectionGroupXfoOperator")}backPropagateValue(A){const g=this.currGroupXfo.inverse(),I=A.multiply(g);I.ori.normalizeInPlace(),this.currGroupXfo=I.multiply(this.currGroupXfo);for(let C=1;C<this.getNumInputs();C++){const e=this.getInputByIndex(C),i=e.getValue(),s=I.multiply(i);e.setValue(s)}}evaluate(){if(this.currGroupXfo=new D,this.getNumInputs()==1){this.xfoOutput.setClean(this.currGroupXfo);return}const A=this.xfoModeInput.getValue();if(A==BI.INITIAL_XFO_MODES.manual){this.currGroupXfo=this.xfoOutput.getValue().clone();return}else if(A==BI.INITIAL_XFO_MODES.first){const g=this.getInputByIndex(1).getValue();this.currGroupXfo.tr=g.tr.clone(),this.currGroupXfo.ori=g.ori.clone()}else if(A==BI.INITIAL_XFO_MODES.average){this.currGroupXfo.ori.set(0,0,0,0);let g=0;for(let I=1;I<this.getNumInputs();I++){const C=this.getInputByIndex(I).getValue();this.currGroupXfo.tr.addInPlace(C.tr),g==0&&this.currGroupXfo.ori.addInPlace(C.ori),g++}this.currGroupXfo.tr.scaleInPlace(1/g)}else if(A==BI.INITIAL_XFO_MODES.globalOri){let g=0;for(let I=1;I<this.getNumInputs();I++){const C=this.getInputByIndex(I).getValue();this.currGroupXfo.tr.addInPlace(C.tr),g++}this.currGroupXfo.tr.scaleInPlace(1/g)}else throw new Error("Invalid KinematicGroup.INITIAL_XFO_MODES.");this.currGroupXfo.ori.normalizeInPlace(),this.xfoOutput.setClean(this.currGroupXfo)}}const Ss={disabled:0,manual:1,first:2,average:3,globalOri:4};class Wt extends PC{constructor(A){super();this.initialXfoModeParam=new tt("InitialXfoMode",Ss.average,["manual","first","average","global"]);const g=A.selectionOutlineColor?A.selectionOutlineColor:new W(3/255,227/255,172/255,.1);this.highlightColorParam.value=g,this.itemsParam.setFilterFn(I=>I instanceof gI),this.addParameter(this.initialXfoModeParam),this.selectionGroupXfoOp=new cc(this.initialXfoModeParam,this.globalXfoParam)}static get INITIAL_XFO_MODES(){return Ss}clone(){const A=new Wt;return A.copyFrom(this),A}bindItem(A,g){if(A instanceof L){const I=this.highlightColorParam.value;I.a=this.highlightFillParam.value,A.addHighlight("selected"+this.getId(),I,!0),this.selectionGroupXfoOp.addItem(A)}}unbindItem(A,g){A instanceof L&&(A.removeHighlight("selected"+this.getId(),!0),this.selectionGroupXfoOp.removeItem(A))}}class JI extends Hg{constructor(A,g,I){super("SelectionChange");this.__selectionManager=A,this.__prevSelection=g,this.__newSelection=I}undo(){this.__selectionManager.setSelection(this.__prevSelection,!1)}redo(){this.__selectionManager.setSelection(this.__newSelection,!1)}toJSON(A){const g=super.toJSON(A),I=[];for(const C of this.__newSelection)I.push(C.getPath());return g.itemPaths=I,g}fromJSON(A,g){super.fromJSON(A,g),this.__selectionManager=g.appData.selectionManager,this.__prevSelection=new Set(this.__selectionManager.getSelection());const I=g.appData.scene.getRoot(),C=new Set;for(const e of A.itemPaths)C.add(I.resolvePath(e,1));this.__newSelection=C,this.__selectionManager.setSelection(this.__newSelection,!1)}}fA.registerChange("SelectionChange",JI);class ea extends Hg{constructor(A,g){super("Selection Visibility Change");this.selection=A,this.state=g,this._changeItemsVisibility(this.state)}undo(){this._changeItemsVisibility(!this.state)}redo(){this._changeItemsVisibility(this.state)}_changeItemsVisibility(A){for(const g of this.selection)g.getParameter("Visible").value=A}}fA.registerChange("ToggleSelectionVisibility",ea);class hc extends FA{constructor(A,g={}){super();this.leadSelection=void 0,this.appData=A,this.selectionGroup=new Wt(g),g.enableXfoHandles===!0&&(this.xfoHandle=new rc(.1,.002),this.xfoHandle.setSelectionGroup(this.selectionGroup),this.xfoHandle.setVisible(!1),this.xfoHandle.highlightColorParam.value=new W(1,1,0),this.xfoHandleVisible=!0,this.selectionGroup.addChild(this.xfoHandle)),this.appData.renderer&&this.setRenderer(this.appData.renderer)}setRenderer(A){if(this.__renderer==A){console.warn("Renderer already set on SelectionManager");return}this.__renderer=A,this.__renderer.addTreeItem(this.selectionGroup)}setXfoMode(A){this.xfoHandle&&(this.selectionGroup.initialXfoModeParam.value=A)}showHandles(A){this.xfoHandleVisible=A}updateHandleVisibility(){if(!this.xfoHandle)return;const A=this.selectionGroup.getItems(),g=Array.from(A).length>0;this.xfoHandle.setVisible(g&&this.xfoHandleVisible),this.__renderer.requestRedraw()}getSelection(){return this.selectionGroup.getItems()}setSelection(A,g=!0){const I=new Set(this.selectionGroup.getItems()),C=new Set(I);for(const e of A)I.has(e)||(e.setSelected(!0),I.add(e));for(const e of I)A.has(e)||(e.setSelected(!1),I.delete(e));if(this.selectionGroup.setItems(I),I.size>0?this.__setLeadSelection(I.values().next().value):this.__setLeadSelection(),this.updateHandleVisibility(),g){const e=new JI(this,C,I);fA.getInstance().addChange(e)}this.emit("selectionChanged",{prevSelection:C,selection:I})}__setLeadSelection(A){this.leadSelection!=A&&(this.leadSelection=A,this.emit("leadSelectionChanged",{treeItem:A}))}toggleItemSelection(A,g=!0){const I=new Set(this.selectionGroup.getItems()),C=new Set(I);if(g&&!(I.size==1&&I.has(A))){let s=!0;if(I.has(A)){let o=1;A.traverse(a=>{I.has(a)&&o++}),s=o!=I.size}s&&(Array.from(I).forEach(o=>{o.setSelected(!1)}),I.clear())}let e;I.has(A)?(A.setSelected(!1),I.delete(A),e=!1):(A.setSelected(!0),I.add(A),e=!0),this.selectionGroup.setItems(I),e&&I.size===1?this.__setLeadSelection(A):e||(I.size===1?this.__setLeadSelection(I.values().next().value):I.size===0&&this.__setLeadSelection());const i=new JI(this,C,I);fA.getInstance().addChange(i),this.updateHandleVisibility(),this.emit("selectionChanged",{prevSelection:C,selection:I})}clearSelection(A=!0){const g=new Set(this.selectionGroup.getItems());if(g.size==0)return!1;let I;A&&(I=new Set(g));for(const C of g)C.setSelected(!1);if(g.clear(),this.selectionGroup.setItems(g),this.__setLeadSelection(),this.updateHandleVisibility(),A){const C=new JI(this,I,g);fA.getInstance().addChange(C),this.emit("selectionChanged",{selection:g,prevSelection:I})}return!0}selectItems(A,g=!0){const I=new Set(this.selectionGroup.getItems()),C=new Set(I);g&&I.clear();for(const i of A)I.has(i)||(i.setSelected(!0),I.add(i));const e=new JI(this,C,I);fA.getInstance().addChange(e),this.selectionGroup.setItems(I),I.size===1?this.__setLeadSelection(I.values().next().value):I.size===0&&this.__setLeadSelection(),this.updateHandleVisibility(),this.emit("selectionChanged",{prevSelection:C,selection:I})}deselectItems(A){const g=new Set(this.selectionGroup.getItems()),I=new Set(g);for(const e of A)g.has(e)&&(e.setSelected(!1),g.delete(e));this.selectionGroup.setItems(g);const C=new JI(this,I,g);fA.getInstance().addChange(C),g.size===1?this.__setLeadSelection(g.values().next().value):g.size===0&&this.__setLeadSelection(),this.updateHandleVisibility(),this.emit("selectionChanged",{prevSelection:I,selection:g})}toggleSelectionVisibility(){if(this.leadSelection){const A=this.selectionGroup.getItems(),g=!this.leadSelection.getVisible(),I=new ea(A,g);fA.getInstance().addChange(I)}}startPickingMode(A,g,I,C){console.log(A),this.__pickCB=g,this.__pickFilter=I,this.__pickCount=C,this.__picked=[]}pickingFilter(A){return this.__pickFilter(A)}pickingModeActive(){return this.__pickCB!=null}cancelPickingMode(){this.__pickCB=void 0}pick(A){if(this.__pickCB){if(Array.isArray(A))this.__pickFilter?this.__picked=this.__picked.concat(A.filter(this.__pickFilter)):this.__picked=this.__picked.concat(A);else{if(this.__pickFilter&&!this.__pickFilter(A))return;this.__picked.push(A)}this.__picked.length==this.__pickCount&&(this.__pickCB(this.__picked),this.__pickCB=void 0)}}}class mc extends Hg{constructor(A,g,I){if(A){super(A.getName()+" Added");this.treeItem=A,this.owner=g,this.selectionManager=I,this.prevSelection=new Set(this.selectionManager.getSelection()),this.treeItemIndex=this.owner.getChildIndex(this.owner.addChild(this.treeItem)),this.selectionManager.setSelection(new Set([this.treeItem]),!1)}else super()}undo(){this.treeItem instanceof og?this.treeItem.detach():this.treeItem instanceof L&&this.treeItem.traverse(A=>{A instanceof og&&A.detach()},!1),this.owner.removeChild(this.treeItemIndex),this.selectionManager&&this.selectionManager.setSelection(this.prevSelection,!1)}redo(){this.treeItem instanceof og?this.treeItem.reattach():this.treeItem instanceof L&&this.treeItem.traverse(A=>{A instanceof og&&A.reattach()},!1),this.owner.addChild(this.treeItem),this.selectionManager&&this.selectionManager.setSelection(new Set([this.treeItem]),!1)}toJSON(A){return{name:this.name,treeItem:this.treeItem.toJSON(A),treeItemPath:this.treeItem.getPath(),treeItemIndex:this.treeItemIndex}}fromJSON(A,g){const I=p.constructClass(A.treeItem.type);if(!I){console.warn("resolvePath is unable to construct",A.treeItem);return}this.name=A.name,this.treeItem=I,this.treeItem.fromJSON(A.treeItem,g),this.treeItemIndex=this.owner.getChildIndex(this.owner.addChild(this.treeItem))}destroy(){}}fA.registerChange("TreeItemAddChange",mc);class Gc extends Hg{constructor(A,g){if(A){super(A.getName()+" Moved");this.treeItem=A,this.oldOwner=this.treeItem.getOwner(),this.oldOwnerIndex=this.oldOwner.getChildIndex(this.treeItem),this.newOwner=g,this.newOwner.addChild(this.treeItem,!0)}else super()}undo(){this.oldOwner.insertChild(this.treeItem,this.oldOwnerIndex,!0)}redo(){this.newOwner.addChild(this.treeItem,!0)}toJSON(A){return{name:this.name,treeItemPath:this.treeItem.getPath(),newOwnerPath:this.newOwner.getPath()}}fromJSON(A,g){if(!g||!g.scene)return;const I=g.scene.getRoot().resolvePath(A.treeItemPath,1);if(!I){console.warn("resolvePath is unable to resolve",A.treeItemPath);return}const C=g.scene.getRoot().resolvePath(A.newOwnerPath,1);if(!C){console.warn("resolvePath is unable to resolve",A.newOwnerPath);return}this.name=A.name,this.treeItem=I,this.newOwner=C,this.oldOwner=this.treeItem.getOwner(),this.oldOwnerIndex=this.oldOwner.getChildIndex(this.treeItem),this.newOwner.addChild(this.treeItem,!0)}}fA.registerChange("TreeItemMoveChange",Gc);class Ec extends Hg{constructor(A,g){super();if(this.items=[],this.itemOwners=[],this.itemPaths=[],this.itemIndices=[],A){this.selectionManager=g.selectionManager,this.prevSelection=new Set(this.selectionManager.getSelection()),this.items=A,this.newSelection=new Set(this.prevSelection);const I=[];this.items.forEach(C=>{const e=C.getOwner(),i=e.getChildIndex(C);I.push(C.getName()),this.itemOwners.push(e),this.itemPaths.push(C.getPath()),this.itemIndices.push(i),this.selectionManager&&this.newSelection.has(C)&&this.newSelection.delete(C),C instanceof og?C.detach():C instanceof L&&C.traverse(s=>{s instanceof og&&s.detach(),this.selectionManager&&this.newSelection.has(s)&&this.newSelection.delete(s)},!1),e.removeChild(i)}),this.selectionManager.setSelection(this.newSelection,!1),this.name=I+" Deleted"}}undo(){this.items.forEach((A,g)=>{this.itemOwners[g].insertChild(A,this.itemIndices[g],!1,!1),A instanceof og?A.reattach():A instanceof L&&A.traverse(I=>{I instanceof og&&I.reattach()},!1)}),this.selectionManager&&this.selectionManager.setSelection(this.prevSelection,!1)}redo(){this.selectionManager&&this.selectionManager.setSelection(this.newSelection,!1),this.items.forEach((A,g)=>{this.itemOwners[g].removeChild(this.itemIndices[g]),A instanceof og?A.detach():A instanceof L&&A.traverse(I=>{I instanceof og&&I.detach()},!1)})}toJSON(A){const g={name:this.name,items:[],itemPaths:this.itemPaths,itemIndices:this.itemIndices};return this.items.forEach(I=>{g.items.push(I.toJSON())}),g}fromJSON(A,g){this.name=A.name,A.itemPaths.forEach(I=>{const C=g.scene.getRoot().resolvePath(I,1);if(!C){console.warn("resolvePath is unable to resolve",I);return}const e=C.getOwner();this.itemOwners.push(e),this.itemPaths.push(C.getPath()),this.itemIndices.push(e.getChildIndex(C))})}destroy(){}}fA.registerChange("TreeItemsRemoveChange",Ec);new zI(1,1);class Qc extends Hg{constructor(A){super("HoldObjectsChange");this.__selection=[],this.__prevXfos=[],this.__newXfos=[],A&&this.update(A)}undo(){for(let A=0;A<this.__selection.length;A++)this.__selection[A]&&this.__prevXfos[A]&&(this.__selection[A].globalXfoParam.value=this.__prevXfos[A])}redo(){for(let A=0;A<this.__selection.length;A++)this.__selection[A]&&this.__newXfos[A]&&(this.__selection[A].globalXfoParam.value=this.__newXfos[A])}update(A){if(A.newItem)this.__selection[A.newItemId]=A.newItem,this.__prevXfos[A.newItemId]=A.newItem.globalXfoParam.value;else if(A.changeXfos)for(let g=0;g<A.changeXfoIds.length;g++){const I=A.changeXfoIds[g];!this.__selection[I]||(this.__selection[I].globalXfoParam.value=A.changeXfos[g],this.__newXfos[I]=A.changeXfos[g])}this.emit("updated",A)}toJSON(A){const g=super.toJSON(A),I=[];for(let C=0;C<this.__selection.length;C++)this.__selection[C]?I[C]=this.__selection[C].getPath():I.push(null);return g.itemPaths=I,g}fromJSON(A,g){super.fromJSON(A,g);const I=g.appData.scene.getRoot();this.__selection=[];for(let C=0;C<A.itemPaths.length;C++){const e=A.itemPaths[C];if(e&&e!=""){const i=I.resolvePath(e,1);i!=I&&(this.__selection[C]=i,this.__prevXfos[C]=i.globalXfoParam.value)}}}updateFromJSON(A){this.update(A)}}fA.registerChange("HoldObjectsChange",Qc);class wI extends Hg{constructor(A,g){super(A);this.parentItem=g||null}setParentAndXfo(A,g){this.parentItem=A;const I=this.parentItem.generateUniqueName(this.geomItem.getName());this.geomItem.setName(I),this.geomItem.globalXfoParam.value=g,this.parentItem.addChild(this.geomItem)}undo(){this.parentItem.removeChild(this.parentItem.getChildIndex(this.geomItem))}redo(){this.parentItem.addChild(this.geomItem,!1,!1)}toJSON(A){const g=super.toJSON(A);g.parentItemPath=this.parentItem.getPath(),g.geomItemName=this.geomItem.getName(),g.geomItemXfo=this.geomItem.localXfoParam.getValue();const I=this.geomItem.getParameter("Material").getValue();return g.color=I.getParameter("BaseColor").getValue(),g}fromJSON(A,g){const I=g.appData.scene.getRoot();this.parentItem=I.resolvePath(A.parentItemPath,1),this.geomItem.setName(this.parentItem.generateUniqueName(A.geomItemName));const C=new D;if(C.fromJSON(A.geomItemXfo),this.geomItem.localXfoParam.value=C,this.childIndex=this.parentItem.getChildIndex(this.parentItem.addChild(this.geomItem,!1)),A.color){const e=new W(.7,.2,.2);e.fromJSON(A.color);const i=this.geomItem.getParameter("Material").getValue();i.getParameter("BaseColor").value=e}}destroy(){}}class uc extends wI{constructor(A,g,I,C=.001){super("Create Line");this.line=new lg,this.line.setNumVertices(2),this.line.setNumSegments(1),this.line.getVertexAttribute("positions").setValue(0,new f),this.line.setSegmentVertexIndices(0,0,1);const i=new Oe("Line");I&&(i.baseColorParam.value=I),i.lineThicknessParam&&(i.lineThicknessParam.value=C),this.geomItem=new gA("Line",this.line,i),A&&g&&this.setParentAndXfo(A,g)}update(A){A.p1&&(this.line.positions.getValueRef(1).setFromOther(A.p1),this.line.setBoundingBoxDirty(),this.line.emit("geomDataChanged")),this.emit("updated",A)}fromJSON(A,g){if(super.fromJSON(A,g),A.color){const I=new W;I.fromJSON(A.color);const C=this.geomItem.materialParam.value;C.getParameter("BaseColor").value=I}}}fA.registerChange("CreateLineChange",uc);class bc extends wI{constructor(A,g,I){super("Create Cone");const C=new ct(0,0);C.heightParam.value=0;const e=new wA("Cone","SimpleSurfaceShader");this.geomItem=new gA("Cone",C,e),A&&g&&(e.getParameter("BaseColor").value=I,this.setParentAndXfo(A,g))}update(A){A.radius&&(this.geomItem.getParameter("Geometry").getValue().radiusParam.value=A.radius),A.height&&(this.geomItem.getParameter("Geometry").getValue().getParameter("Height").value=A.height),this.emit("updated",A)}}fA.registerChange("CreateConeChange",bc);class yc extends wI{constructor(A,g){super("CreateCircle");this.circle=new rt(0,64);const I=new wA("circle","FatLinesShader");I.getParameter("BaseColor").value=new W(.7,.2,.2),this.geomItem=new gA("Circle",this.circle,I),A&&g&&this.setParentAndXfo(A,g)}update(A){this.circle.radiusParam.value=A.radius,this.emit("updated",A)}toJSON(){const A=super.toJSON();return A.radius=this.circle.radiusParam.value,A}updateFromJSON(A){console.log("CreateCircleChange:",A),A.radius&&(this.circle.radiusParam.value=A.radius)}}fA.registerChange("CreateCircleChange",yc);class Zc extends wI{constructor(A,g){super("CreateRect");this.rect=new dt(0,0);const I=new wA("circle","FatLinesShader");I.getParameter("BaseColor").value=new W(.7,.2,.2),this.geomItem=new gA("Rect",this.rect,I),A&&g&&this.setParentAndXfo(A,g)}update(A){if(A.baseSize&&(this.rect.sizeXParam.value=A.baseSize[0],this.rect.sizeYParam.value=A.baseSize[1]),A.tr){const g=this.geomItem.localXfoParam.getValue();g.tr.fromJSON(A.tr),this.geomItem.localXfoParam.value=g}this.emit("updated",A)}}fA.registerChange("CreateRectChange",Zc);class Rc extends wI{constructor(A,g,I,C=.001){super("CreateFreehandLine");this.vertexCount=100,this.used=0,this.line=new lg,this.line.setNumVertices(this.vertexCount),this.line.setNumSegments(this.vertexCount-1),this.line.getVertexAttribute("positions").setValue(0,new f);const i=new Oe("freeHandLine");I&&(i.baseColorParam.value=I),i.lineThicknessParam&&(i.lineThicknessParam.value=C),this.geomItem=new gA("freeHandLine",this.line,i),A&&g&&this.setParentAndXfo(A,g)}update(A){this.used++;let g=!1;this.used>=this.line.getNumSegments()&&(this.vertexCount=this.vertexCount+100,this.line.setNumVertices(this.vertexCount),this.line.setNumSegments(this.vertexCount-1),g=!0),this.line.getVertexAttribute("positions").setValue(this.used,A.point),this.line.setSegmentVertexIndices(this.used-1,this.used-1,this.used),this.line.setBoundingBoxDirty(),g?this.line.emit("geomDataTopologyChanged",{topologyChanged:!0}):this.line.emit("geomDataChanged",{topologyChanged:!0}),this.emit("updated",A)}toJSON(A){const g=super.toJSON(A),I=this.geomItem.materialParam.value;return g.lineThickness=I.lineThicknessParam.value,g.color=I.baseColorParam.value,g}fromJSON(A,g){if(A.lineThickness){const I=this.geomItem.materialParam.value;I.lineThicknessParam.value=A.lineThickness}if(A.color){const I=new W(.7,.2,.2);I.fromJSON(A.color);const C=this.geomItem.materialParam.value;C.baseColorParam.value=I}super.fromJSON(A,g)}}fA.registerChange("CreateFreehandLineChange",Rc);class fc extends wI{constructor(A,g,I){super("CreateSphere",A);this.sphere=new _I(0,24,12);const C=new wA("Sphere","SimpleSurfaceShader");this.geomItem=new gA("Sphere",this.sphere,C),this.geomItem.setSelectable(!1),A&&g&&I&&(C.getParameter("BaseColor").value=I,this.setParentAndXfo(A,g))}update(A){this.sphere.radiusParam.value=A.radius,this.emit("updated",A)}toJSON(){const A=super.toJSON();return A.radius=this.sphere.radiusParam.getValue(),A}updateFromJSON(A){A.radius&&(this.sphere.radiusParam.value=A.radius)}}fA.registerChange("CreateSphereChange",fc);class wc extends wI{constructor(A,g,I){super("CreateCuboid");this.cuboid=new _e(0,0,0,!0);const C=new wA("Cuboid","SimpleSurfaceShader");this.geomItem=new gA("Cuboid",this.cuboid,C),A&&g&&(C.getParameter("BaseColor").value=I,this.setParentAndXfo(A,g))}update(A){if(A.baseSize&&(this.cuboid.sizeXParam.value=A.baseSize[0],this.cuboid.sizeYParam.value=A.baseSize[1]),A.tr){const g=this.geomItem.localXfoParam.getValue();g.tr.fromJSON(A.tr),this.geomItem.localXfoParam.value=g}A.height&&(this.cuboid.sizeZParam.value=A.height),this.emit("updated",A)}}fA.registerChange("CreateCuboidChange",wc);class Vc extends ft{constructor(){super();this.tools={},this.toolStack=[]}registerTool(A,g){this.tools[A]=g}pushTool(A){const g=this.tools[A];if(!g)throw Error("Tool not found"+A);g.activateTool&&g.activateTool(),this.toolStack.push(this.tools[A])}popTool(){if(this.toolStack.length==0)throw Error("Tool stack is empty");const A=this.toolStack[this.toolStack.length-1];A.deactivateTool&&A.deactivateTool(),this.toolStack.pop()}activeTool(){if(this.toolStack.length>0)return this.toolStack[this.toolStack.length-1]}activeToolName(){if(this.toolStack.length>0){const A=this.toolStack[this.toolStack.length-1];for(const g in this.tools)if(this.tools[g]==A)return g}return""}onPointerDown(A){for(let g=this.toolStack.length-1;g>=0;g--){const I=this.toolStack[g];if(I.onPointerDown&&(I.onPointerDown(A),!A.propagating))break}}onPointerMove(A){for(let g=this.toolStack.length-1;g>=0;g--){const I=this.toolStack[g];if(I.onPointerMove&&(I.onPointerMove(A),!A.propagating))break}}onPointerUp(A){for(let g=this.toolStack.length-1;g>=0;g--){const I=this.toolStack[g];if(I.onPointerUp&&(I.onPointerUp(A),!A.propagating))break}}onPointerDoublePress(A){for(let g=this.toolStack.length-1;g>=0;g--){const I=this.toolStack[g];if(I.onPointerDoublePress&&(I.onPointerDoublePress(A),!A.propagating))break}}onWheel(A){for(let g=this.toolStack.length-1;g>=0;g--){const I=this.toolStack[g];if(I.onWheel&&(I.onWheel(A),!A.propagating))break}}onKeyPressed(A){for(let g=this.toolStack.length-1;g>=0;g--){const I=this.toolStack[g];if(I.onKeyPressed&&(I.onKeyPressed(A),!A.propagating))break}}onKeyDown(A){for(let g=this.toolStack.length-1;g>=0;g--){const I=this.toolStack[g];if(I.onKeyDown&&(I.onKeyDown(A),!A.propagating))break}}onKeyUp(A){for(let g=this.toolStack.length-1;g>=0;g--){const I=this.toolStack[g];if(I.onKeyUp&&(I.onKeyUp(A),!A.propagating))break}}}class Sc extends ga{constructor(A,g=.5,I=.02,C=new W("#F9CE03")){super(A);this.handleXfo=new D,this.baseBarXfo=new D,this.topBarXfo=new D,this.lengthParam=new Y("Length",g),this.handleRadiusParam=new Y("HandleRadius",I),this.barRadiusParam=new Y("BarRadius",I*.25),this.addParameter(this.lengthParam),this.addParameter(this.handleRadiusParam),this.addParameter(this.barRadiusParam),this.colorParam.value=C,this.handleMat=new wA("handle","FlatSurfaceShader"),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue();const e=new wA("topBar","FlatSurfaceShader");e.getParameter("BaseColor").value=new W(.5,.5,.5);const i=new ht(I*.25,1,64,2,!0,!0),s=new _I(I,64);this.handle=new gA("handle",s,this.handleMat),this.baseBar=new gA("baseBar",i,this.handleMat),this.topBar=new gA("topBar",i,e),this.barRadiusParam.on("valueChanged",()=>{i.radiusParam.value=this.barRadiusParam.getValue()}),this.handleRadiusParam.on("valueChanged",()=>{s.radiusParam.value=this.handleRadiusParam.getValue()}),this.lengthParam.on("valueChanged",()=>{this.__updateSlider(this.value)}),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(this.handle),this.addChild(this.baseBar),this.addChild(this.topBar),this.__updateSlider(0)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}setTargetParam(A){this.param=A;const g=()=>{this.__updateSlider(A.getValue())};g(),A.on("valueChanged",g)}__updateSlider(A){this.value=A;const g=this.param,I=g&&g.getRange()?g.getRange():[0,1],C=P.remap(A,I[0],I[1],0,1),e=this.lengthParam.getValue();this.baseBarXfo.sc.z=C*e,this.handleXfo.tr.z=C*e,this.topBarXfo.tr.z=C*e,this.topBarXfo.sc.z=(1-C)*e,this.handle.localXfoParam.value=this.handleXfo,this.baseBar.localXfoParam.value=this.baseBarXfo,this.topBar.localXfoParam.value=this.topBarXfo}onDragStart(A){this.handleXfo.sc.x=this.handleXfo.sc.y=this.handleXfo.sc.z=1.2,this.handle.localXfoParam.value=this.handleXfo,this.param&&(this.change=new fI(this.param),fA.getInstance().addChange(this.change))}onDrag(A){const g=this.lengthParam.getValue(),I=this.param,C=I&&I.getRange()?I.getRange():[0,1],e=P.clamp(P.remap(this.value,0,g,C[0],C[1]),C[0],C[1]);if(!this.param){this.__updateSlider(e),this.value=e;return}this.change.update({value:e})}onDragEnd(A){this.change=null,this.handleXfo.sc.x=this.handleXfo.sc.y=this.handleXfo.sc.z=1,this.handle.localXfoParam.value=this.handleXfo}toJSON(A){const g=super.toJSON(A);return this.param&&(g.targetParam=this.param.getPath()),g}fromJSON(A,g){super.fromJSON(A,g),A.targetParam&&g.resolvePath(A.targetParam).then(I=>{this.setTargetParam(I)})}}p.register("SliderHandle",Sc);class pc extends Ca{constructor(A,g=1,I=1,C=.02,e=new W(1,1,0)){super(A);this.handleXfo=new D,this.handleGeomOffsetXfo=new D,this.arcRadiusParam=new Y("ArcRadius",g),this.arcAngleParam=new Y("ArcAngle",I),this.handleRadiusParam=new Y("HandleRadius",C),this.addParameter(this.arcRadiusParam),this.addParameter(this.arcAngleParam),this.addParameter(this.handleRadiusParam),this.colorParam.value=e,this.handleMat=new wA("handleMat","HandleShader"),this.handleMat.getParameter("BaseColor").value=e;const i=new rt(g,64,I),s=new _I(C,64);this.handle=new gA("handle",s,this.handleMat),this.arc=new gA("arc",i,this.handleMat),this.handleGeomOffsetXfo.tr.x=g,this.handle.geomOffsetXfoParam.value=this.handleGeomOffsetXfo,this.range=[0,I],this.arcAngleParam.on("valueChanged",()=>{const o=this.arcAngleParam.getValue();i.angleParam.value=o,this.range=[0,o]}),this.arcRadiusParam.on("valueChanged",()=>{const o=this.arcRadiusParam.getValue();i.radiusParam.value=o,this.handleGeomOffsetXfo.tr.x=o,this.handle.geomOffsetXfoParam.value=this.handleGeomOffsetXfo}),this.handleRadiusParam.on("valueChanged",()=>{s.radiusParam.value=this.handleRadiusParam.getValue()}),this.colorParam.on("valueChanged",()=>{this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}),this.addChild(this.handle),this.addChild(this.arc),this.setTargetParam(this.handle.globalXfoParam,!1)}onPointerEnter(A){A.intersectionData&&A.intersectionData.geomItem==this.handle&&this.highlight()}onPointerLeave(A){this.unhighlight()}onPointerDown(A){A.intersectionData&&A.intersectionData.geomItem==this.handle&&super.onPointerDown(A)}highlight(){super.highlight(),this.handleMat.getParameter("BaseColor").value=this.highlightColorParam.getValue()}unhighlight(){super.unhighlight(),this.handleMat.getParameter("BaseColor").value=this.colorParam.getValue()}setTargetParam(A,g=!0){if(this.param=A,g){if(this.param instanceof yg){const I=()=>{this.globalXfoParam.value=A.value};I(),A.on("valueChanged",I)}else if(this.param instanceof Y){const I=()=>{this.handleXfo.ori.setFromAxisAndAngle(new f(0,0,1),A.getValue()),this.handle.globalXfoParam.value=this.handleXfo};I(),A.on("valueChanged",I)}}}getBaseXfo(){return this.handle.globalXfoParam.value}onDragStart(A){this.baseXfo=this.globalXfoParam.value.clone(),this.baseXfo.sc.set(1,1,1),this.vec0=this.globalXfoParam.value.ori.getXaxis(),this.vec0.normalizeInPlace(),this.change=new fI(this.param),fA.getInstance().addChange(this.change),this.handleGeomOffsetXfo.sc.x=this.handleGeomOffsetXfo.sc.y=this.handleGeomOffsetXfo.sc.z=1.2,this.handle.geomOffsetXfoParam.value=this.handleGeomOffsetXfo,this.emit("dragStart")}onDrag(A){const g=this.holdPos.subtract(this.baseXfo.tr);g.normalizeInPlace();let I=this.vec0.angleTo(g);if(this.vec0.cross(g).dot(this.baseXfo.ori.getZaxis())<0&&(I=-I),this.range&&(I=P.clamp(I,this.range[0],this.range[1])),(A instanceof wg||A instanceof kg)&&A.shiftKey){const a=22.5*(Math.PI/180);I=Math.floor(I/a)*a}const C=new D;C.ori.setFromAxisAndAngle(new f(0,0,1),I);const i=this.baseXfo.multiply(C);this.change?this.param instanceof yg?this.change.update({value:i}):this.param instanceof Y&&this.change.update({value:I}):this.param instanceof yg?this.param.value=i:this.param instanceof Y&&(this.param.value=I)}onDragEnd(A){this.change=null,this.handleGeomOffsetXfo.sc.x=this.handleGeomOffsetXfo.sc.y=this.handleGeomOffsetXfo.sc.z=1,this.handle.geomOffsetXfoParam.value=this.handleGeomOffsetXfo,this.emit("dragEnd")}toJSON(A){const g=super.toJSON(A);return this.param&&(g.targetParam=this.param.getPath()),g}fromJSON(A,g){super.fromJSON(A,g),A.targetParam&&g.resolvePath(A.targetParam).then(I=>{this.setTargetParam(I)})}}p.register("ArcSlider",pc);const ps=new _I(.003,24,12,!1);class ia extends L{constructor(A="Measure",g=new W("#F9CE03")){super(A);this.colorParam=this.addParameter(new ag("Color",g)),this.markerMaterial=new Ht("Marker"),this.markerMaterial.getParameter("BaseColor").value=new W(0,0,0),this.markerMaterial.getParameter("MaintainScreenSize").value=1,this.markerMaterial.getParameter("Overlay").value=.5,this.lineMaterial=new Dg("Line"),this.lineMaterial.baseColorParam.value=new W(0,0,0),this.lineMaterial.overlayParam.value=.5,this.markerA=new gA("markerA",ps,this.markerMaterial),this.markerB=new gA("markerB",ps,this.markerMaterial),this.addChild(this.markerA),this.addChild(this.markerB),this.colorParam.on("valueChanged",()=>{const I=this.colorParam.getValue();this.label.getParameter("BackgroundColor").value=I})}}const VI=new lg;VI.setNumVertices(2);VI.setNumSegments(1);VI.setSegmentVertexIndices(0,0,1);VI.getVertexAttribute("positions").setValue(0,new f);VI.getVertexAttribute("positions").setValue(1,new f(0,0,1));VI.setBoundingBoxDirty();class Fc extends ia{constructor(A="MeasureDistance",g=new W("#F9CE03"),I="Meters"){super(A,g);this.lineGeomItem=null,this.sceneUnits=null,this.sceneUnits=I}updateMeasurement(){const A=this.markerA.globalXfoParam.value,I=this.markerB.globalXfoParam.value.tr.subtract(A.tr),C=I.length();if(C==0)return;const e=this.colorParam.getValue();let i=1;switch(this.sceneUnits){case"Millimeters":break;case"Meters":i=1e3;break}const s=C*i,o=`${parseFloat(s.toFixed(3))}mm`;this.label?this.label.getParameter("Text").value=o:(this.label=new ut("Distance"),this.label.getParameter("FontSize").value=20,this.label.getParameter("BackgroundColor").value=e,this.label.getParameter("Text").value=o,this.billboard=new RC("DistanceBillboard",this.label),this.billboard.localXfoParam.value=new D,this.billboard.getParameter("PixelsPerMeter").value=1500,this.billboard.getParameter("AlignedToCamera").value=!0,this.billboard.getParameter("DrawOnTop").value=!0,this.billboard.getParameter("FixedSizeOnscreen").value=!0,this.billboard.getParameter("Alpha").value=1,this.addChild(this.billboard),this.lineMaterial=new Dg("Line"),this.lineMaterial.getParameter("BaseColor").value=new W(0,0,0),this.lineMaterial.getParameter("Overlay").value=.5,this.lineGeomItem=new gA("Line",VI,this.lineMaterial),this.lineGeomItem.setSelectable(!1),this.addChild(this.lineGeomItem));const a=A.clone();a.ori.setFromDirectionAndUpvector(I,new f(I.z,I.x,I.y)),a.sc.z=C,this.lineGeomItem.globalXfoParam.value=a,I.normalizeInPlace();const n=A.tr.add(I.scale(C*.5)),B=new D(n);B.ori.setFromDirectionAndUpvector(I,new f(I.z,I.x,I.y)),this.billboard.globalXfoParam.value=B}setStartMarkerPos(A){const g=this.markerA.globalXfoParam.value;g.tr=A,this.markerA.globalXfoParam.value=g,this.label&&this.updateMeasurement()}setEndMarkerPos(A){const g=this.markerB.globalXfoParam.value;g.tr=A,this.markerB.globalXfoParam.value=g,this.updateMeasurement()}setGeomBuffersVisibility(A){this.markerA.setSelectable(!A),this.markerB.setSelectable(!A)}getMeasurementText(){return this.label.getParameter("Text").getValue()}}p.register("MeasureDistance",Fc);const GI=new lg;GI.setNumVertices(2);GI.setNumSegments(1);GI.setSegmentVertexIndices(0,0,1);const ta=GI.getVertexAttribute("positions");ta.setValue(0,new f);ta.setValue(1,new f(0,0,1));GI.setBoundingBoxDirty();class Xc extends ia{constructor(A="MeasureAngle",g=new W("#F9CE03")){super(A,g)}createLinesAndLabel(){const A=this.markerA.globalXfoParam.value,g=this.markerB.globalXfoParam.value,I=A.ori.getZaxis(),C=g.ori.getZaxis(),e=I.cross(C).normalize(),i=e.cross(I).normalize(),s=e.cross(C).normalize(),o=new rg(A.tr,i),a=new rg(g.tr,s),n=o.intersectRayVector(a),B=I.angleTo(C),d=new gA("Line",GI,this.lineMaterial),l=new gA("Line",GI,this.lineMaterial);this.markerA.addChild(d,!1),this.markerB.addChild(l,!1),this.label=new ut("Distance"),this.label.fontSizeParam.value=20,this.label.backgroundColorParam.value=this.colorParam.getValue(),this.label.textParam.value=`${(B/(Math.PI/180)).toFixed(3)} \xB0`,this.billboard=new RC("DistanceBillboard",this.label),this.billboard.localXfoParam.value=new D,this.billboard.pixelsPerMeterParam.value=1500,this.billboard.alignedToCameraParam.value=!0,this.billboard.drawOnTopParam.value=!0,this.billboard.fixedSizeOnscreenParam.value=!0,this.billboard.alphaParam.value=1,this.addChild(this.billboard),this.colorParam.on("valueChanged",()=>{const E=this.colorParam.getValue();this.markerMaterial.getParameter("BaseColor").value=E,this.lineMaterial.baseColorParam.value=E,this.label.backgroundColorParam.value=E});const r=new D;r.tr.addInPlace(o.pointAtDist(n[0])),r.tr.addInPlace(a.pointAtDist(n[1])),r.tr.scaleInPlace(.5),A.ori.setFromDirectionAndUpvector(i,I),this.markerA.globalXfoParam.value=A,g.ori.setFromDirectionAndUpvector(s,I),this.markerB.globalXfoParam.value=g;const c=new D;c.sc.z=n[0],d.localXfoParam.value=c;const h=new D;h.sc.z=n[1],l.localXfoParam.value=h,this.billboard.globalXfoParam.value=r}setXfoA(A){this.markerA.globalXfoParam.value=A,this.markerB.globalXfoParam.value=A}getXfoA(){return this.markerA.globalXfoParam.value}setXfoB(A){this.markerB.globalXfoParam.value=A,this.createLinesAndLabel()}}p.register("MeasureAngle",Xc);class Hc extends Hg{constructor(A){super("MeasurementChange");A&&(this.measurement=A)}update(A){this.measurement.fromJSON(A.measurementData),this.emit("updated",A)}end(){this.measurement.setGeomBuffersVisibility(!0)}undo(){console.log("undo MeasurementChange"),this.parentItem=this.measurement.getOwner(),this.childIndex=this.parentItem.getChildIndex(this.measurement),this.parentItem.removeChild(this.childIndex)}redo(){console.log("redo MeasurementChange"),this.parentItem.insertChild(this.measurement,this.childIndex)}toJSON(A){const g=super.toJSON(A);return g.parentItemPath=this.measurement.getOwner().getPath(),g.measurementType=p.getClassName(Object.getPrototypeOf(this.measurement).constructor),g.measurementData=this.measurement.toJSON(A),g}fromJSON(A,g){const C=g.appData.scene.getRoot().resolvePath(A.parentItemPath,1);C&&(this.measurement=p.constructClass(A.measurementType),this.measurement.fromJSON(A.measurementData),C.addChild(this.measurement))}destroy(){}}fA.registerChange("MeasurementChange",Hc);class Wc extends HTMLElement{constructor(){var A,g,I;super();this.perspective=!0,this.attachShadow({mode:"open"}),this.scene=document.createElement("div"),this.scene.classList.add("scene"),(A=this.shadowRoot)===null||A===void 0||A.appendChild(this.scene),this.cube=document.createElement("div"),this.cube.classList.add("cube"),this.scene.appendChild(this.cube);const C=(B,d)=>{const l=document.createElement("div");l.classList.add("cube__face"),l.classList.add("cube__face_"+B),l.textContent=B,l.addEventListener("click",()=>{this.alignFace(d)}),this.cube.appendChild(l)};C("X",new f(1,0,0)),C("-X",new f(-1,0,0)),C("Y",new f(0,1,0)),C("-Y",new f(0,-1,0)),C("Z",new f(0,0,1)),C("-Z",new f(0,0,-1));const e=document.createElement("div");e.classList.add("home"),(g=this.shadowRoot)===null||g===void 0||g.appendChild(e);const i=document.createElement("label"),s=document.createElement("input"),o=document.createElement("span");s.setAttribute("type","checkbox"),i.classList.add("switch"),o.classList.add("slider"),o.classList.add("round"),i.appendChild(s);const a=document.createElement("span");a.classList.add("switch-label"),a.textContent="Persp",e.appendChild(a),i.appendChild(o),e.appendChild(i),s.checked=!0,s.addEventListener("change",()=>{this.perspective=!this.perspective;const l=this.viewport.getCamera().globalXfoParam.getValue().ori.getZaxis();this.alignFace(l)});const n=document.createElement("style");n.appendChild(document.createTextNode(`

      
      .home {
        position: absolute;
        bottom: 0px;
        right: 10px;
        font-family: sans-serif;
      }

      /* The switch - the box around the slider */
.switch {
  position: relative;
  display: inline-block;
  width: 40px;
  height: 20px;
}

.switch-label {
  position: absolute;
  left: -50px;
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 16px;
  width: 16px;
  left: 2px;
  bottom: 2px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + .slider {
  background-color: #2196F3;
}

input:focus + .slider {
  box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
  -webkit-transform: translateX(20px);
  -ms-transform: translateX(20px);
  transform: translateX(20px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 10px;
}

.slider.round:before {
  border-radius: 50%;
}

      .scene {
        width: 80px;
        height: 95px;
        border: 0px;
        margin: 20px;
        perspective: 800px;
        font-family: sans-serif;
        -webkit-touch-callout: none; /* iOS Safari */
        -webkit-user-select: none; /* Safari */
        user-select: none; /* Non-prefixed version, currently
                                  supported by Chrome, Edge, Opera and Firefox */
      }
      
      .cube {
        width: 80px;
        height: 80px;
        position: relative;
        transform-style: preserve-3d;
        transform: translateZ(-80px);
      }
      
      .cube__face {
        position: absolute;
        width: 76px;
        height: 76px;
        border: 2px solid black;
        line-height: 76px;
        font-size: 20px;
        font-weight: bold;
        color: black;
        text-align: center;
      }
      
      .cube__face:hover {
        border: 2px solid white;
        color: white;
      }
      
      .cube__face_X   { background: rgba(255, 0, 0, 0.85); }
      .cube__face_-X  { background: rgba(255, 0, 0, 0.85); }
      .cube__face_Y  { background: rgba(  0, 255, 0, 0.85); }
      .cube__face_-Y   { background: rgba(  0, 255, 0, 0.85); }
      .cube__face_Z    { background: rgba(0, 0, 255, 0.85); }
      .cube__face_-Z { background: rgba(0, 0, 255, 0.85); }
      
      .cube__face_X   { transform: rotateY(-90deg) translateZ(40px); }
      .cube__face_-X  { transform: rotateY( 90deg) translateZ(40px); }
      .cube__face_Y  { transform: rotateY(  0deg) translateZ(40px); }
      .cube__face_-Y   { transform: rotateY(180deg) translateZ(40px); }
      .cube__face_Z    { transform: rotateX( 90deg) translateZ(40px); }
      .cube__face_-Z { transform: rotateX(-90deg) translateZ(40px); }
      
`)),(I=this.shadowRoot)===null||I===void 0||I.appendChild(n)}alignFace(A,g=400){const I=this.viewport.getCamera(),C=I.getTargetPosition(),e=I.getFocalDistance(),i=I.globalXfoParam.getValue(),s=i.ori.getYaxis(),o=I.isOrthographicParam.value;s.subtractInPlace(A.scale(s.dot(A)));const a=new f,n=()=>{Math.abs(s.x)>Math.abs(s.y)&&Math.abs(s.x)>Math.abs(s.z)?s.x>0?a.x=1:a.x=-1:Math.abs(s.y)>Math.abs(s.x)&&Math.abs(s.y)>Math.abs(s.z)?s.y>0?a.y=1:a.y=-1:Math.abs(s.z)>Math.abs(s.x)&&Math.abs(s.z)>Math.abs(s.y)?s.z>0?a.z=1:a.z=-1:(console.warn("Invalid Starting Camera Xfo"),a.z=1)};let B=this.viewport.getManipulator();if(B instanceof Vc){const m=B;if("CameraManipulator"in m.tools)B=m.tools.CameraManipulator;else for(let G in m.tools)if(m.tools[G]instanceof Ee){B=m.tools[G];break}}B instanceof Ee&&(B.defaultManipulationState==Ee.MANIPULATION_MODES.turntable?A.approxEqual(new f(0,0,1))||A.approxEqual(new f(0,0,-1))?n():a.z=1:n());const d=new BA;d.setFromDirectionAndUpvector(A,a),d.alignWith(i.ori);const l=C.clone(),r=e,c=this.perspective?0:1;c>.5&&o<.5&&(I.viewHeight=Math.sin(I.fovParam.value*.5)*e*2);const h=Math.round(g/20);let E=1;const b=()=>{const m=P.smoothStep(0,1,E/h),G=new D;G.ori=i.ori.slerp(d,m).normalize();const y=C.lerp(l,m),Q=P.lerp(e,r,m),u=G.ori.getZaxis().negate();if(G.tr=y.subtract(u.scale(Q)),I.globalXfoParam.setValue(G),I.setFocalDistance(Q),c>.5&&o<.5||c<.5&&o>.5){const Z=P.lerp(o,c,m);c>.5?this.scene.style.perspective="none":this.scene.style.perspective="800px",I.setIsOrthographic(Z,0)}E++,E<=h?setTimeout(b,20):I.emit("movementFinished")};b()}updateViewCubeTransform(A){const g=A.inverse().toMat4(),I=`translateZ(-80px) rotateY(180deg) matrix3d(${g.m00},${g.m01},${g.m02},${g.m03},${g.m10},${g.m11},${g.m12},${g.m13},${g.m20},${g.m21},${g.m22},${g.m23},${0},${0},${0},${1}) rotateX( 90deg)`;this.cube.style.transform=I}setViewport(A){this.viewport=A;const g=this.viewport.getCamera();this.updateViewCubeTransform(g.globalXfoParam.value),g.globalXfoParam.on("valueChanged",()=>{this.updateViewCubeTransform(g.globalXfoParam.value)})}}customElements.define("zea-view-cube",Wc);pe?pe.registerLib(nc):console.warn("The version of the Zea Engine that you're using doesn't support the libraries registry. Please upgrade to the latest Zea Engine version.");function Yc(t,A){t.prototype=Object.create(A.prototype),t.prototype.constructor=t,SC(t,A)}function Oi(t){return Oi=Object.setPrototypeOf?Object.getPrototypeOf:function(g){return g.__proto__||Object.getPrototypeOf(g)},Oi(t)}function SC(t,A){return SC=Object.setPrototypeOf||function(I,C){return I.__proto__=C,I},SC(t,A)}function Kc(){if(typeof Reflect=="undefined"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}function Qe(t,A,g){return Kc()?Qe=Reflect.construct:Qe=function(C,e,i){var s=[null];s.push.apply(s,e);var o=Function.bind.apply(C,s),a=new o;return i&&SC(a,i.prototype),a},Qe.apply(null,arguments)}function Nc(t){return Function.toString.call(t).indexOf("[native code]")!==-1}function ji(t){var A=typeof Map=="function"?new Map:void 0;return ji=function(I){if(I===null||!Nc(I))return I;if(typeof I!="function")throw new TypeError("Super expression must either be null or a function");if(typeof A!="undefined"){if(A.has(I))return A.get(I);A.set(I,C)}function C(){return Qe(I,arguments,Oi(this).constructor)}return C.prototype=Object.create(I.prototype,{constructor:{value:C,enumerable:!1,writable:!0,configurable:!0}}),SC(C,I)},ji(t)}var Jc=function(t){Yc(A,t);function A(){var I,C,e;e=t.call(this)||this,e.columns=[],e.expandedItemsTracker={},e.selectionManager=null,e.isSearching=!1,e.$styleTag=document.createElement("style"),e.$tableWrapper=document.createElement("div"),e.$thead=document.createElement("thead"),e.$tbody=document.createElement("tbody"),e.listenerIds={},e.rows={},e.attachShadow({mode:"open"}),(I=e.shadowRoot)==null||I.appendChild(e.$styleTag),e.setStyles();var i=document.createElement("div");i.className="MainWrapper",(C=e.shadowRoot)==null||C.appendChild(i);var s=document.createElement("div");s.className="search-wrapper",i.appendChild(s);var o=document.createElement("input");return o.type="search",o.classList.add("search"),o.placeholder="Search",o.addEventListener("keydown",function(a){a.key==="Enter"&&e.search(o.value)}),o.addEventListener("input",function(){var a=o.value==="";a&&e.clearSearch()}),s.appendChild(o),e.$tableWrapper.className="table-wrapper",i.appendChild(e.$tableWrapper),e.renderTable(),e}var g=A.prototype;return g.setTreeItem=function(C){this.rootTreeItem=C,this.expandedItemsTracker={},this.resetRows(),this.addRow(this.rootTreeItem)},g.hasTreeItem=function(){return!!this.rootTreeItem},g.setSelectionManager=function(C){var e=this;this.selectionManager=C,this.selectionManager.on("selectionChanged",function(i){var s=i.selection;e.isSearching||s.forEach(function(o){e.expandAncestorsOf(o)})})},g.setColumns=function(C){this.columns=C,this.renderTable()},g.setStyles=function(){this.$styleTag.textContent=`
      .MainWrapper {
        --search-wrapper-height: 35px;

        height: 100%;
      }

      .invisible {
        visibility: hidden;
      }

      .toggle-expanded {
        background: none;
        border: none;
        color: var(--zea-tree-button-text-color, black);
        width: 20px;
      }

      .toggle-expanded:hover {
        background-color: var(--zea-tree-button-bg-color, silver);
        border-radius: 2px;
      }

      .toggle-visible {
        margin: 0 5px;
      }

      .invisible-item {
        color: darkgrey;
      }

      .search-wrapper {
        box-sizing: border-box;
        display: flex;
        height: var(--search-wrapper-height);
        padding: 0.2rem;
      }

      .table-wrapper {
        height: calc(100% - var(--search-wrapper-height));
        overflow: auto;
      }

      .search {
        border-radius: 0.2rem;
        width: 100%;
        padding: 0.2rem;
        border: 1px solid gray;
      }

      table {
        border: 1px solid var(--zea-tree-border-color, darkgray);
        border-collapse: collapse;
        color: var(--zea-text-color-primary, white);
        width: 100%;
      }

      thead {
        position: sticky;
        top: -1px;
      }

      th {
        background-color: var(--zea-tree-header-color, gray)
      }

      th:not(:last-child), td:not(:last-child) {
        border-right: 1px solid var(--zea-tree-border-color, darkgray);
      }

      tbody {
        white-space: nowrap;
      }

      tr {
        background-color: var(--zea-tree-even-row-bg-color, gray);
        outline-offset: -1px;
      }

      tr:nth-child(odd) {
        background-color: var(--zea-tree-odd-row-bg-color, dimgray);
      }
    `},g.isItemExpanded=function(C){var e=C.getId();return e in this.expandedItemsTracker?this.expandedItemsTracker[e]:(this.expandedItemsTracker[e]=!1,!1)},g.toggleItemExpanded=function(C){var e=C.getId(),i=!this.isItemExpanded(C);return this.expandedItemsTracker[e]=i,i},g.setVisibilityOf=function(C,e){try{var i=fA.getInstance(),s=new fI(C.visibleParam,e);i.addChange(s)}catch{C.visibleParam.value=e}},g.renderTable=function(){var C=document.createElement("table");this.$tableWrapper.replaceChildren(C);var e=this.columns.map(function(s){return"<th>"+s.title+"</th>"}).join("");this.$thead.replaceChildren(),C.appendChild(this.$thead);var i=document.createElement("tr");this.$thead.appendChild(i),i.innerHTML=`
      <th>Name</th>
      `+e+`
    `,this.$tbody=document.createElement("tbody"),C.appendChild(this.$tbody)},g.setSelection=function(C,e){if(e===void 0&&(e=!0),!!this.selectionManager){if(this.selectionManager.pickingModeActive()){this.selectionManager.pick(C);return}this.selectionManager.toggleItemSelection(C,e)}},g.addRow=function(C,e,i){var s=this;e===void 0&&(e=-1);var o=document.createElement("tr");if(o.treeItem=C,o.title=this.getTooltipFor(C),o.tabIndex=0,o.addEventListener("click",function(Z){var w=!Z.ctrlKey&&!Z.metaKey;s.setSelection(C,w)}),o.addEventListener("keydown",function(Z){switch(Z.key){case"ArrowUp":Z.preventDefault();var w=o.previousSibling;if(!w)return;w.focus(),s.setSelection(w==null?void 0:w.treeItem);break;case"ArrowDown":Z.preventDefault();var R=o.nextSibling;if(!R)return;R.focus(),s.setSelection(R.treeItem);break;case"ArrowRight":Z.preventDefault(),Q();break;case"ArrowLeft":Z.preventDefault(),u();break}}),i)if(e>=0){for(var a=0,n=i;a<e;)n=n.nextSibling,a+=1;this.insertAfter(n,o)}else this.insertAfter(i,o);else this.$tbody.appendChild(o);var B=this.childrenOf(C),d=this.isSearching?!1:this.isItemExpanded(C),l=B.length,r=document.createElement("button");r.classList.add("toggle-expanded"),(this.isSearching||!l)&&r.classList.add("invisible"),r.textContent=d?"-":"+";var c=C.getPath().length-1;r.style.marginLeft=c*10+"px",r.addEventListener("click",function(Z){Z.stopPropagation(),s.toggleItemExpanded(C)?Q():u()});var h=document.createElement("input");h.classList.add("toggle-visible"),h.type="checkbox",h.checked=C.visibleParam.value,h.addEventListener("click",function(Z){Z.stopPropagation(),s.setVisibilityOf(C,!C.visibleParam.value)}),C.isVisible()||o.classList.add("invisible-item");var E=document.createElement("td");E.appendChild(r),E.appendChild(h);var b=document.createElement("span");b.textContent=this.nameOf(C),E.appendChild(b),o.appendChild(E),this.columns.forEach(function(Z){var w=Z.paramName,R=document.createElement("td");if(o.appendChild(R),C.hasParameter(w)){var S;R.textContent=(S=C.getParameter(w))==null?void 0:S.getValue()}});var m={};this.listenerIds[C.getId()]=m,m.nameChanged=C.on("nameChanged",function(Z){b.textContent=Z.newName}),m.highlightChanged=C.on("highlightChanged",function(){G()}),m.visibilityChanged=C.on("visibilityChanged",function(Z){Z.visible?o.classList.remove("invisible-item"):o.classList.add("invisible-item")}),m.childAdded=C.on("childAdded",function(Z){var w=s.isItemExpanded(C);if(w){var R=Z.index,S=Z.childItem;s.addRow(S,R,o)}else r.classList.remove("invisible"),r.textContent=w?"-":"+"}),m.childRemoved=C.on("childRemoved",function(Z){var w=s.isItemExpanded(C);if(w){var R=Z.childItem;s.removeRow(R)}});var G=function(){var w=C.getHighlight();if(w){o.style.setProperty("outline","1px solid "+w.toHex());return}o.style.removeProperty("outline")},y=C.isHighlighted();y&&G();var Q=function(){var w=s.isItemExpanded(C);if(!!w)for(var R=0;R<B.length;R+=1){var S=B[R];s.shouldRenderItem(S)&&s.addRow(S,R,o)}},u=function(){B.forEach(function(w){s.shouldRenderItem(w)&&s.removeRow(w)})};o.expandChildren=Q,this.rows[C.getId()]=o,d&&Q()},g.removeRow=function(C){var e,i=this,s=this.rows[C.getId()];if(!!s){delete this.rows[C.getId()],(e=s.parentElement)==null||e.removeChild(s);var o=C.getId(),a=this.listenerIds[o];delete this.listenerIds[o],C.removeListenerById("nameChanged",a.nameChanged),C.removeListenerById("highlightChanged",a.highlightChanged),C.removeListenerById("visibilityChanged",a.visibilityChanged),C.removeListenerById("childAdded",a.childAdded),C.removeListenerById("childRemoved",a.childRemoved);var n=this.childrenOf(C);n.forEach(function(B){i.shouldRenderItem(B)&&i.removeRow(B)})}},g.shouldRenderItem=function(C){var e=!!C;return e},g.childrenOf=function(C){var e=C instanceof rI&&C.getNumChildren()===1?C.getChild(0).getChildren():C.getChildren();return e},g.nameOf=function(C){var e,i=C.getParameter("DisplayName");if(i?e=i.getValue():e=C.getName(),e==""&&C instanceof rI&&C.getNumChildren()==1){var s=C.getChild(0),o=s.getParameter("DisplayName");o?e=o.getValue():e=s.getName()}return e},g.getTooltipFor=function(C){if(C instanceof rI&&C.getNumChildren()==1){var e=C.getChild(0);return"Instance of ("+e.getClassName()+")"}else return"("+C.getClassName()+")"},g.expandAncestorsOf=function(C){var e=C.getParentItem();if(!!e){var i=this.isItemExpanded(e);if(!i){var s=e.getId(),o=this.rows[s];this.expandedItemsTracker[s]=!0,o?o.expandChildren():this.expandAncestorsOf(e)}}},g.search=function(C){var e=this;if(this.isSearching=!0,this.resetRows(),!!this.rootTreeItem){this.rootTreeItem.removeHighlight("selected",!0);var i=[],s=function o(a){var n=e.nameOf(a),B=C.toLowerCase();n.toLowerCase().includes(B)&&i.push(a);var d=e.childrenOf(a);d.forEach(function(l){o(l)})};s(this.rootTreeItem),i.forEach(function(o,a){e.addRow(o,a)})}},g.clearSearch=function(){this.isSearching=!1,this.resetRows(),this.addRow(this.rootTreeItem)},g.resetRows=function(){var C=this;Object.values(this.rows).forEach(function(e){C.removeRow(e.treeItem)})},g.insertAfter=function(C,e){var i;(i=C.parentNode)==null||i.insertBefore(e,C.nextSibling)},A}(ji(HTMLElement));customElements.define("zea-tree-view",Jc);var sa={exports:{}};(function(t){function A(I){var C=Math.floor,e=new Array(64),i=new Array(64),s=new Array(64),o=new Array(64),a,n,B,d,l=new Array(65535),r=new Array(65535),c=new Array(64),h=new Array(64),E=[],b=0,m=7,G=new Array(64),y=new Array(64),Q=new Array(64),u=new Array(256),Z=new Array(2048),w,R=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],S=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],H=[0,1,2,3,4,5,6,7,8,9,10,11],X=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],F=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],_=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],oA=[0,1,2,3,4,5,6,7,8,9,10,11],sA=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],x=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function IA(V){for(var z=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],$=0;$<64;$++){var j=C((z[$]*V+50)/100);j<1?j=1:j>255&&(j=255),e[R[$]]=j}for(var aA=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],GA=0;GA<64;GA++){var YA=C((aA[GA]*V+50)/100);YA<1?YA=1:YA>255&&(YA=255),i[R[GA]]=YA}for(var rA=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],U=0,k=0;k<8;k++)for(var J=0;J<8;J++)s[U]=1/(e[R[U]]*rA[k]*rA[J]*8),o[U]=1/(i[R[U]]*rA[k]*rA[J]*8),U++}function q(V,z){for(var $=0,j=0,aA=new Array,GA=1;GA<=16;GA++){for(var YA=1;YA<=V[GA];YA++)aA[z[j]]=[],aA[z[j]][0]=$,aA[z[j]][1]=GA,j++,$++;$*=2}return aA}function lA(){a=q(S,H),n=q(_,oA),B=q(X,F),d=q(sA,x)}function iA(){for(var V=1,z=2,$=1;$<=15;$++){for(var j=V;j<z;j++)r[32767+j]=$,l[32767+j]=[],l[32767+j][1]=$,l[32767+j][0]=j;for(var aA=-(z-1);aA<=-V;aA++)r[32767+aA]=$,l[32767+aA]=[],l[32767+aA][1]=$,l[32767+aA][0]=z-1+aA;V<<=1,z<<=1}}function hA(){for(var V=0;V<256;V++)Z[V]=19595*V,Z[V+256>>0]=38470*V,Z[V+512>>0]=7471*V+32768,Z[V+768>>0]=-11059*V,Z[V+1024>>0]=-21709*V,Z[V+1280>>0]=32768*V+8421375,Z[V+1536>>0]=-27439*V,Z[V+1792>>0]=-5329*V}function T(V){for(var z=V[0],$=V[1]-1;$>=0;)z&1<<$&&(b|=1<<m),$--,m--,m<0&&(b==255?(v(255),v(0)):v(b),m=7,b=0)}function v(V){E.push(V)}function CA(V){v(V>>8&255),v(V&255)}function bA(V,z){var $,j,aA,GA,YA,rA,U,k,J=0,QA,EA=8,HA=64;for(QA=0;QA<EA;++QA){$=V[J],j=V[J+1],aA=V[J+2],GA=V[J+3],YA=V[J+4],rA=V[J+5],U=V[J+6],k=V[J+7];var O=$+k,nA=$-k,MA=j+U,LA=j-U,UA=aA+rA,mg=aA-rA,$I=GA+YA,Bi=GA-YA,eI=O+$I,pI=O-$I,iI=MA+UA,FI=MA-UA;V[J]=eI+iI,V[J+4]=eI-iI;var AC=(FI+pI)*.707106781;V[J+2]=pI+AC,V[J+6]=pI-AC,eI=Bi+mg,iI=mg+LA,FI=LA+nA;var gC=(eI-FI)*.382683433,IC=.5411961*eI+gC,CC=1.306562965*FI+gC,Ut=iI*.707106781,kt=nA+Ut,xt=nA-Ut;V[J+5]=xt+IC,V[J+3]=xt-IC,V[J+1]=kt+CC,V[J+7]=kt-CC,J+=8}for(J=0,QA=0;QA<EA;++QA){$=V[J],j=V[J+8],aA=V[J+16],GA=V[J+24],YA=V[J+32],rA=V[J+40],U=V[J+48],k=V[J+56];var Tt=$+k,li=$-k,zt=j+U,_t=j-U,Pt=aA+rA,Ot=aA-rA,jt=GA+YA,$a=GA-YA,eC=Tt+jt,di=Tt-jt,ge=zt+Pt,Ie=zt-Pt;V[J]=eC+ge,V[J+32]=eC-ge;var qt=(Ie+di)*.707106781;V[J+16]=di+qt,V[J+48]=di-qt,eC=$a+Ot,ge=Ot+_t,Ie=_t+li;var $t=(eC-Ie)*.382683433,As=.5411961*eC+$t,gs=1.306562965*Ie+$t,Is=ge*.707106781,Cs=li+Is,es=li-Is;V[J+40]=es+As,V[J+24]=es-As,V[J+8]=Cs+gs,V[J+56]=Cs-gs,J++}var Ce;for(QA=0;QA<HA;++QA)Ce=V[QA]*z[QA],c[QA]=Ce>0?Ce+.5|0:Ce-.5|0;return c}function WA(){CA(65504),CA(16),v(74),v(70),v(73),v(70),v(0),v(1),v(1),v(0),CA(1),CA(1),v(0),v(0)}function dA(V){if(!!V){CA(65505),V[0]===69&&V[1]===120&&V[2]===105&&V[3]===102?CA(V.length+2):(CA(V.length+5+2),v(69),v(120),v(105),v(102),v(0));for(var z=0;z<V.length;z++)v(V[z])}}function XA(V,z){CA(65472),CA(17),v(8),CA(z),CA(V),v(3),v(1),v(17),v(0),v(2),v(17),v(1),v(3),v(17),v(1)}function yA(){CA(65499),CA(132),v(0);for(var V=0;V<64;V++)v(e[V]);v(1);for(var z=0;z<64;z++)v(i[z])}function JA(){CA(65476),CA(418),v(0);for(var V=0;V<16;V++)v(S[V+1]);for(var z=0;z<=11;z++)v(H[z]);v(16);for(var $=0;$<16;$++)v(X[$+1]);for(var j=0;j<=161;j++)v(F[j]);v(1);for(var aA=0;aA<16;aA++)v(_[aA+1]);for(var GA=0;GA<=11;GA++)v(oA[GA]);v(17);for(var YA=0;YA<16;YA++)v(sA[YA+1]);for(var rA=0;rA<=161;rA++)v(x[rA])}function mA(){CA(65498),CA(12),v(3),v(1),v(0),v(2),v(17),v(3),v(17),v(0),v(63),v(0)}function M(V,z,$,j,aA){for(var GA=aA[0],YA=aA[240],rA,U=16,k=63,J=64,QA=bA(V,z),EA=0;EA<J;++EA)h[R[EA]]=QA[EA];var HA=h[0]-$;$=h[0],HA==0?T(j[0]):(rA=32767+HA,T(j[r[rA]]),T(l[rA]));for(var O=63;O>0&&h[O]==0;O--);if(O==0)return T(GA),$;for(var nA=1,MA;nA<=O;){for(var LA=nA;h[nA]==0&&nA<=O;++nA);var UA=nA-LA;if(UA>=U){MA=UA>>4;for(var mg=1;mg<=MA;++mg)T(YA);UA=UA&15}rA=32767+h[nA],T(aA[(UA<<4)+r[rA]]),T(l[rA]),nA++}return O!=k&&T(GA),$}function N(){for(var V=String.fromCharCode,z=0;z<256;z++)u[z]=V(z)}this.encode=function(V,z){new Date().getTime(),z&&ZA(z),E=new Array,b=0,m=7,CA(65496),WA(),dA(V.exifBuffer),yA(),XA(V.width,V.height),JA(),mA();var $=0,j=0,aA=0;b=0,m=7,this.encode.displayName="_encode_";for(var GA=V.data,YA=V.width,rA=V.height,U=YA*4,k,J=0,QA,EA,HA,O,nA,MA,LA,UA;J<rA;){for(k=0;k<U;){for(O=U*J+k,nA=O,MA=-1,LA=0,UA=0;UA<64;UA++)LA=UA>>3,MA=(UA&7)*4,nA=O+LA*U+MA,J+LA>=rA&&(nA-=U*(J+1+LA-rA)),k+MA>=U&&(nA-=k+MA-U+4),QA=GA[nA++],EA=GA[nA++],HA=GA[nA++],G[UA]=(Z[QA]+Z[EA+256>>0]+Z[HA+512>>0]>>16)-128,y[UA]=(Z[QA+768>>0]+Z[EA+1024>>0]+Z[HA+1280>>0]>>16)-128,Q[UA]=(Z[QA+1280>>0]+Z[EA+1536>>0]+Z[HA+1792>>0]>>16)-128;$=M(G,s,$,a,B),j=M(y,o,j,n,d),aA=M(Q,o,aA,n,d),k+=32}J+=8}if(m>=0){var mg=[];mg[1]=m+1,mg[0]=(1<<m+1)-1,T(mg)}return CA(65497),Buffer.from(E)};function ZA(V){if(V<=0&&(V=1),V>100&&(V=100),w!=V){var z=0;V<50?z=Math.floor(5e3/V):z=Math.floor(200-V*2),IA(z),w=V}}function tA(){var V=new Date().getTime();I||(I=50),N(),lA(),iA(),hA(),ZA(I),new Date().getTime()-V}tA()}t.exports=g;function g(I,C){typeof C=="undefined"&&(C=50);var e=new A(C),i=e.encode(I,C);return{data:i,width:I.width,height:I.height}}})(sa);var oa={exports:{}};(function(t){var A=function(){var C=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),e=4017,i=799,s=3406,o=2276,a=1567,n=3784,B=5793,d=2896;function l(){}function r(y,Q){for(var u=0,Z=[],w,R,S=16;S>0&&!y[S-1];)S--;Z.push({children:[],index:0});var H=Z[0],X;for(w=0;w<S;w++){for(R=0;R<y[w];R++){for(H=Z.pop(),H.children[H.index]=Q[u];H.index>0;){if(Z.length===0)throw new Error("Could not recreate Huffman Table");H=Z.pop()}for(H.index++,Z.push(H);Z.length<=w;)Z.push(X={children:[],index:0}),H.children[H.index]=X.children,H=X;u++}w+1<S&&(Z.push(X={children:[],index:0}),H.children[H.index]=X.children,H=X)}return Z[0].children}function c(y,Q,u,Z,w,R,S,H,X,F){u.precision,u.samplesPerLine,u.scanLines;var _=u.mcusPerLine,oA=u.progressive;u.maxH,u.maxV;var sA=Q,x=0,IA=0;function q(){if(IA>0)return IA--,x>>IA&1;if(x=y[Q++],x==255){var U=y[Q++];if(U)throw new Error("unexpected marker: "+(x<<8|U).toString(16))}return IA=7,x>>>7}function lA(U){for(var k=U,J;(J=q())!==null;){if(k=k[J],typeof k=="number")return k;if(typeof k!="object")throw new Error("invalid huffman sequence")}return null}function iA(U){for(var k=0;U>0;){var J=q();if(J===null)return;k=k<<1|J,U--}return k}function hA(U){var k=iA(U);return k>=1<<U-1?k:k+(-1<<U)+1}function T(U,k){var J=lA(U.huffmanTableDC),QA=J===0?0:hA(J);k[0]=U.pred+=QA;for(var EA=1;EA<64;){var HA=lA(U.huffmanTableAC),O=HA&15,nA=HA>>4;if(O===0){if(nA<15)break;EA+=16;continue}EA+=nA;var MA=C[EA];k[MA]=hA(O),EA++}}function v(U,k){var J=lA(U.huffmanTableDC),QA=J===0?0:hA(J)<<X;k[0]=U.pred+=QA}function CA(U,k){k[0]|=q()<<X}var bA=0;function WA(U,k){if(bA>0){bA--;return}for(var J=R,QA=S;J<=QA;){var EA=lA(U.huffmanTableAC),HA=EA&15,O=EA>>4;if(HA===0){if(O<15){bA=iA(O)+(1<<O)-1;break}J+=16;continue}J+=O;var nA=C[J];k[nA]=hA(HA)*(1<<X),J++}}var dA=0,XA;function yA(U,k){for(var J=R,QA=S,EA=0;J<=QA;){var HA=C[J],O=k[HA]<0?-1:1;switch(dA){case 0:var nA=lA(U.huffmanTableAC),MA=nA&15,EA=nA>>4;if(MA===0)EA<15?(bA=iA(EA)+(1<<EA),dA=4):(EA=16,dA=1);else{if(MA!==1)throw new Error("invalid ACn encoding");XA=hA(MA),dA=EA?2:3}continue;case 1:case 2:k[HA]?k[HA]+=(q()<<X)*O:(EA--,EA===0&&(dA=dA==2?3:0));break;case 3:k[HA]?k[HA]+=(q()<<X)*O:(k[HA]=XA<<X,dA=0);break;case 4:k[HA]&&(k[HA]+=(q()<<X)*O);break}J++}dA===4&&(bA--,bA===0&&(dA=0))}function JA(U,k,J,QA,EA){var HA=J/_|0,O=J%_,nA=HA*U.v+QA,MA=O*U.h+EA;U.blocks[nA]===void 0&&F.tolerantDecoding||k(U,U.blocks[nA][MA])}function mA(U,k,J){var QA=J/U.blocksPerLine|0,EA=J%U.blocksPerLine;U.blocks[QA]===void 0&&F.tolerantDecoding||k(U,U.blocks[QA][EA])}var M=Z.length,N,ZA,tA,V,z,$;oA?R===0?$=H===0?v:CA:$=H===0?WA:yA:$=T;var j=0,aA,GA;M==1?GA=Z[0].blocksPerLine*Z[0].blocksPerColumn:GA=_*u.mcusPerColumn,w||(w=GA);for(var YA,rA;j<GA;){for(ZA=0;ZA<M;ZA++)Z[ZA].pred=0;if(bA=0,M==1)for(N=Z[0],z=0;z<w;z++)mA(N,$,j),j++;else for(z=0;z<w;z++){for(ZA=0;ZA<M;ZA++)for(N=Z[ZA],YA=N.h,rA=N.v,tA=0;tA<rA;tA++)for(V=0;V<YA;V++)JA(N,$,j,tA,V);if(j++,j===GA)break}if(j===GA)do{if(y[Q]===255&&y[Q+1]!==0)break;Q+=1}while(Q<y.length-2);if(IA=0,aA=y[Q]<<8|y[Q+1],aA<65280)throw new Error("marker was not found");if(aA>=65488&&aA<=65495)Q+=2;else break}return Q-sA}function h(y,Q){var u=[],Z=Q.blocksPerLine,w=Q.blocksPerColumn,R=Z<<3,S=new Int32Array(64),H=new Uint8Array(64);function X(iA,hA,T){var v=Q.quantizationTable,CA,bA,WA,dA,XA,yA,JA,mA,M,N=T,ZA;for(ZA=0;ZA<64;ZA++)N[ZA]=iA[ZA]*v[ZA];for(ZA=0;ZA<8;++ZA){var tA=8*ZA;if(N[1+tA]==0&&N[2+tA]==0&&N[3+tA]==0&&N[4+tA]==0&&N[5+tA]==0&&N[6+tA]==0&&N[7+tA]==0){M=B*N[0+tA]+512>>10,N[0+tA]=M,N[1+tA]=M,N[2+tA]=M,N[3+tA]=M,N[4+tA]=M,N[5+tA]=M,N[6+tA]=M,N[7+tA]=M;continue}CA=B*N[0+tA]+128>>8,bA=B*N[4+tA]+128>>8,WA=N[2+tA],dA=N[6+tA],XA=d*(N[1+tA]-N[7+tA])+128>>8,mA=d*(N[1+tA]+N[7+tA])+128>>8,yA=N[3+tA]<<4,JA=N[5+tA]<<4,M=CA-bA+1>>1,CA=CA+bA+1>>1,bA=M,M=WA*n+dA*a+128>>8,WA=WA*a-dA*n+128>>8,dA=M,M=XA-JA+1>>1,XA=XA+JA+1>>1,JA=M,M=mA+yA+1>>1,yA=mA-yA+1>>1,mA=M,M=CA-dA+1>>1,CA=CA+dA+1>>1,dA=M,M=bA-WA+1>>1,bA=bA+WA+1>>1,WA=M,M=XA*o+mA*s+2048>>12,XA=XA*s-mA*o+2048>>12,mA=M,M=yA*i+JA*e+2048>>12,yA=yA*e-JA*i+2048>>12,JA=M,N[0+tA]=CA+mA,N[7+tA]=CA-mA,N[1+tA]=bA+JA,N[6+tA]=bA-JA,N[2+tA]=WA+yA,N[5+tA]=WA-yA,N[3+tA]=dA+XA,N[4+tA]=dA-XA}for(ZA=0;ZA<8;++ZA){var V=ZA;if(N[8+V]==0&&N[16+V]==0&&N[24+V]==0&&N[32+V]==0&&N[40+V]==0&&N[48+V]==0&&N[56+V]==0){M=B*T[ZA+0]+8192>>14,N[0+V]=M,N[8+V]=M,N[16+V]=M,N[24+V]=M,N[32+V]=M,N[40+V]=M,N[48+V]=M,N[56+V]=M;continue}CA=B*N[0+V]+2048>>12,bA=B*N[32+V]+2048>>12,WA=N[16+V],dA=N[48+V],XA=d*(N[8+V]-N[56+V])+2048>>12,mA=d*(N[8+V]+N[56+V])+2048>>12,yA=N[24+V],JA=N[40+V],M=CA-bA+1>>1,CA=CA+bA+1>>1,bA=M,M=WA*n+dA*a+2048>>12,WA=WA*a-dA*n+2048>>12,dA=M,M=XA-JA+1>>1,XA=XA+JA+1>>1,JA=M,M=mA+yA+1>>1,yA=mA-yA+1>>1,mA=M,M=CA-dA+1>>1,CA=CA+dA+1>>1,dA=M,M=bA-WA+1>>1,bA=bA+WA+1>>1,WA=M,M=XA*o+mA*s+2048>>12,XA=XA*s-mA*o+2048>>12,mA=M,M=yA*i+JA*e+2048>>12,yA=yA*e-JA*i+2048>>12,JA=M,N[0+V]=CA+mA,N[56+V]=CA-mA,N[8+V]=bA+JA,N[48+V]=bA-JA,N[16+V]=WA+yA,N[40+V]=WA-yA,N[24+V]=dA+XA,N[32+V]=dA-XA}for(ZA=0;ZA<64;++ZA){var z=128+(N[ZA]+8>>4);hA[ZA]=z<0?0:z>255?255:z}}G(R*w*8);for(var F,_,oA=0;oA<w;oA++){var sA=oA<<3;for(F=0;F<8;F++)u.push(new Uint8Array(R));for(var x=0;x<Z;x++){X(Q.blocks[oA][x],H,S);var IA=0,q=x<<3;for(_=0;_<8;_++){var lA=u[sA+_];for(F=0;F<8;F++)lA[q+F]=H[IA++]}}}return u}function E(y){return y<0?0:y>255?255:y}l.prototype={load:function(Q){var u=new XMLHttpRequest;u.open("GET",Q,!0),u.responseType="arraybuffer",u.onload=function(){var Z=new Uint8Array(u.response||u.mozResponseArrayBuffer);this.parse(Z),this.onload&&this.onload()}.bind(this),u.send(null)},parse:function(Q){var u=this.opts.maxResolutionInMP*1e3*1e3,Z=0;Q.length;function w(){var O=Q[Z]<<8|Q[Z+1];return Z+=2,O}function R(){var O=w(),nA=Q.subarray(Z,Z+O-2);return Z+=nA.length,nA}function S(O){var nA=0,MA=0,LA,UA;for(UA in O.components)O.components.hasOwnProperty(UA)&&(LA=O.components[UA],nA<LA.h&&(nA=LA.h),MA<LA.v&&(MA=LA.v));var mg=Math.ceil(O.samplesPerLine/8/nA),$I=Math.ceil(O.scanLines/8/MA);for(UA in O.components)if(O.components.hasOwnProperty(UA)){LA=O.components[UA];var Bi=Math.ceil(Math.ceil(O.samplesPerLine/8)*LA.h/nA),eI=Math.ceil(Math.ceil(O.scanLines/8)*LA.v/MA),pI=mg*LA.h,iI=$I*LA.v,FI=iI*pI,AC=[];G(FI*256);for(var gC=0;gC<iI;gC++){for(var IC=[],CC=0;CC<pI;CC++)IC.push(new Int32Array(64));AC.push(IC)}LA.blocksPerLine=Bi,LA.blocksPerColumn=eI,LA.blocks=AC}O.maxH=nA,O.maxV=MA,O.mcusPerLine=mg,O.mcusPerColumn=$I}var H=null,X=null,F,_,oA=[],sA=[],x=[],IA=[],q=w(),lA=-1;if(this.comments=[],q!=65496)throw new Error("SOI not found");for(q=w();q!=65497;){var iA,hA;switch(q){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var T=R();if(q===65534){var v=String.fromCharCode.apply(null,T);this.comments.push(v)}q===65504&&T[0]===74&&T[1]===70&&T[2]===73&&T[3]===70&&T[4]===0&&(H={version:{major:T[5],minor:T[6]},densityUnits:T[7],xDensity:T[8]<<8|T[9],yDensity:T[10]<<8|T[11],thumbWidth:T[12],thumbHeight:T[13],thumbData:T.subarray(14,14+3*T[12]*T[13])}),q===65505&&T[0]===69&&T[1]===120&&T[2]===105&&T[3]===102&&T[4]===0&&(this.exifBuffer=T.subarray(5,T.length)),q===65518&&T[0]===65&&T[1]===100&&T[2]===111&&T[3]===98&&T[4]===101&&T[5]===0&&(X={version:T[6],flags0:T[7]<<8|T[8],flags1:T[9]<<8|T[10],transformCode:T[11]});break;case 65499:for(var CA=w(),bA=CA+Z-2;Z<bA;){var WA=Q[Z++];G(256);var dA=new Int32Array(64);if(WA>>4===0)for(hA=0;hA<64;hA++){var XA=C[hA];dA[XA]=Q[Z++]}else if(WA>>4===1)for(hA=0;hA<64;hA++){var XA=C[hA];dA[XA]=w()}else throw new Error("DQT: invalid table spec");oA[WA&15]=dA}break;case 65472:case 65473:case 65474:w(),F={},F.extended=q===65473,F.progressive=q===65474,F.precision=Q[Z++],F.scanLines=w(),F.samplesPerLine=w(),F.components={},F.componentsOrder=[];var yA=F.scanLines*F.samplesPerLine;if(yA>u){var JA=Math.ceil((yA-u)/1e6);throw new Error(`maxResolutionInMP limit exceeded by ${JA}MP`)}var mA=Q[Z++],M;for(iA=0;iA<mA;iA++){M=Q[Z];var N=Q[Z+1]>>4,ZA=Q[Z+1]&15,tA=Q[Z+2];F.componentsOrder.push(M),F.components[M]={h:N,v:ZA,quantizationIdx:tA},Z+=3}S(F),sA.push(F);break;case 65476:var V=w();for(iA=2;iA<V;){var z=Q[Z++],$=new Uint8Array(16),j=0;for(hA=0;hA<16;hA++,Z++)j+=$[hA]=Q[Z];G(16+j);var aA=new Uint8Array(j);for(hA=0;hA<j;hA++,Z++)aA[hA]=Q[Z];iA+=17+j,(z>>4===0?IA:x)[z&15]=r($,aA)}break;case 65501:w(),_=w();break;case 65500:w(),w();break;case 65498:w();var GA=Q[Z++],YA=[],rA;for(iA=0;iA<GA;iA++){rA=F.components[Q[Z++]];var U=Q[Z++];rA.huffmanTableDC=IA[U>>4],rA.huffmanTableAC=x[U&15],YA.push(rA)}var k=Q[Z++],J=Q[Z++],QA=Q[Z++],EA=c(Q,Z,F,YA,_,k,J,QA>>4,QA&15,this.opts);Z+=EA;break;case 65535:Q[Z]!==255&&Z--;break;default:if(Q[Z-3]==255&&Q[Z-2]>=192&&Q[Z-2]<=254){Z-=3;break}else if(q===224||q==225){if(lA!==-1)throw new Error(`first unknown JPEG marker at offset ${lA.toString(16)}, second unknown JPEG marker ${q.toString(16)} at offset ${(Z-1).toString(16)}`);lA=Z-1;const O=w();if(Q[Z+O-2]===255){Z+=O-2;break}}throw new Error("unknown JPEG marker "+q.toString(16))}q=w()}if(sA.length!=1)throw new Error("only single frame JPEGs supported");for(var iA=0;iA<sA.length;iA++){var HA=sA[iA].components;for(var hA in HA)HA[hA].quantizationTable=oA[HA[hA].quantizationIdx],delete HA[hA].quantizationIdx}this.width=F.samplesPerLine,this.height=F.scanLines,this.jfif=H,this.adobe=X,this.components=[];for(var iA=0;iA<F.componentsOrder.length;iA++){var rA=F.components[F.componentsOrder[iA]];this.components.push({lines:h(F,rA),scaleX:rA.h/F.maxH,scaleY:rA.v/F.maxV})}},getData:function(Q,u){var Z=this.width/Q,w=this.height/u,R,S,H,X,F,_,oA,sA,x,IA,q=0,lA,iA,hA,T,v,CA,bA,WA,dA,XA,yA,JA=Q*u*this.components.length;G(JA);var mA=new Uint8Array(JA);switch(this.components.length){case 1:for(R=this.components[0],IA=0;IA<u;IA++)for(F=R.lines[0|IA*R.scaleY*w],x=0;x<Q;x++)lA=F[0|x*R.scaleX*Z],mA[q++]=lA;break;case 2:for(R=this.components[0],S=this.components[1],IA=0;IA<u;IA++)for(F=R.lines[0|IA*R.scaleY*w],_=S.lines[0|IA*S.scaleY*w],x=0;x<Q;x++)lA=F[0|x*R.scaleX*Z],mA[q++]=lA,lA=_[0|x*S.scaleX*Z],mA[q++]=lA;break;case 3:for(yA=!0,this.adobe&&this.adobe.transformCode?yA=!0:typeof this.opts.colorTransform!="undefined"&&(yA=!!this.opts.colorTransform),R=this.components[0],S=this.components[1],H=this.components[2],IA=0;IA<u;IA++)for(F=R.lines[0|IA*R.scaleY*w],_=S.lines[0|IA*S.scaleY*w],oA=H.lines[0|IA*H.scaleY*w],x=0;x<Q;x++)yA?(lA=F[0|x*R.scaleX*Z],iA=_[0|x*S.scaleX*Z],hA=oA[0|x*H.scaleX*Z],WA=E(lA+1.402*(hA-128)),dA=E(lA-.3441363*(iA-128)-.71413636*(hA-128)),XA=E(lA+1.772*(iA-128))):(WA=F[0|x*R.scaleX*Z],dA=_[0|x*S.scaleX*Z],XA=oA[0|x*H.scaleX*Z]),mA[q++]=WA,mA[q++]=dA,mA[q++]=XA;break;case 4:if(!this.adobe)throw new Error("Unsupported color mode (4 components)");for(yA=!1,this.adobe&&this.adobe.transformCode?yA=!0:typeof this.opts.colorTransform!="undefined"&&(yA=!!this.opts.colorTransform),R=this.components[0],S=this.components[1],H=this.components[2],X=this.components[3],IA=0;IA<u;IA++)for(F=R.lines[0|IA*R.scaleY*w],_=S.lines[0|IA*S.scaleY*w],oA=H.lines[0|IA*H.scaleY*w],sA=X.lines[0|IA*X.scaleY*w],x=0;x<Q;x++)yA?(lA=F[0|x*R.scaleX*Z],iA=_[0|x*S.scaleX*Z],hA=oA[0|x*H.scaleX*Z],T=sA[0|x*X.scaleX*Z],v=255-E(lA+1.402*(hA-128)),CA=255-E(lA-.3441363*(iA-128)-.71413636*(hA-128)),bA=255-E(lA+1.772*(iA-128))):(v=F[0|x*R.scaleX*Z],CA=_[0|x*S.scaleX*Z],bA=oA[0|x*H.scaleX*Z],T=sA[0|x*X.scaleX*Z]),mA[q++]=255-v,mA[q++]=255-CA,mA[q++]=255-bA,mA[q++]=255-T;break;default:throw new Error("Unsupported color mode")}return mA},copyToImageData:function(Q,u){var Z=Q.width,w=Q.height,R=Q.data,S=this.getData(Z,w),H=0,X=0,F,_,oA,sA,x,IA,q,lA,iA;switch(this.components.length){case 1:for(_=0;_<w;_++)for(F=0;F<Z;F++)oA=S[H++],R[X++]=oA,R[X++]=oA,R[X++]=oA,u&&(R[X++]=255);break;case 3:for(_=0;_<w;_++)for(F=0;F<Z;F++)q=S[H++],lA=S[H++],iA=S[H++],R[X++]=q,R[X++]=lA,R[X++]=iA,u&&(R[X++]=255);break;case 4:for(_=0;_<w;_++)for(F=0;F<Z;F++)x=S[H++],IA=S[H++],oA=S[H++],sA=S[H++],q=255-E(x*(1-sA/255)+sA),lA=255-E(IA*(1-sA/255)+sA),iA=255-E(oA*(1-sA/255)+sA),R[X++]=q,R[X++]=lA,R[X++]=iA,u&&(R[X++]=255);break;default:throw new Error("Unsupported color mode")}}};var b=0,m=0;function G(y=0){var Q=b+y;if(Q>m){var u=Math.ceil((Q-m)/1024/1024);throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${u}MB`)}b=Q}return l.resetMaxMemoryUsage=function(y){b=0,m=y},l.getBytesAllocated=function(){return b},l.requestMemoryAllocation=G,l}();t.exports=g;function g(I,C={}){var e={colorTransform:void 0,useTArray:!1,formatAsRGBA:!0,tolerantDecoding:!0,maxResolutionInMP:100,maxMemoryUsageInMB:512},i=ci(ci({},e),C),s=new Uint8Array(I),o=new A;o.opts=i,A.resetMaxMemoryUsage(i.maxMemoryUsageInMB*1024*1024),o.parse(s);var a=i.formatAsRGBA?4:3,n=o.width*o.height*a;try{A.requestMemoryAllocation(n);var B={width:o.width,height:o.height,exifBuffer:o.exifBuffer,data:i.useTArray?new Uint8Array(n):Buffer.alloc(n)};o.comments.length>0&&(B.comments=o.comments)}catch(d){throw d instanceof RangeError?new Error("Could not allocate enough memory for the image. Required: "+n):d}return o.copyToImageData(B,i.formatAsRGBA),B}})(oa);var Dc=sa.exports,vc=oa.exports,Mc={encode:Dc,decode:vc};(function(t){if(t.TextEncoder&&t.TextDecoder)return!1;function A(I="utf-8"){if(I!=="utf-8")throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${I}') is invalid.`)}Object.defineProperty(A.prototype,"encoding",{value:"utf-8"}),A.prototype.encode=function(I,C={stream:!1}){if(C.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let e=0;const i=I.length;let s=0,o=Math.max(32,i+(i>>1)+7),a=new Uint8Array(o>>3<<3);for(;e<i;){let n=I.charCodeAt(e++);if(n>=55296&&n<=56319){if(e<i){const B=I.charCodeAt(e);(B&64512)===56320&&(++e,n=((n&1023)<<10)+(B&1023)+65536)}if(n>=55296&&n<=56319)continue}if(s+4>a.length){o+=8,o*=1+e/I.length*2,o=o>>3<<3;const B=new Uint8Array(o);B.set(a),a=B}if((n&4294967168)===0){a[s++]=n;continue}else if((n&4294965248)===0)a[s++]=n>>6&31|192;else if((n&4294901760)===0)a[s++]=n>>12&15|224,a[s++]=n>>6&63|128;else if((n&4292870144)===0)a[s++]=n>>18&7|240,a[s++]=n>>12&63|128,a[s++]=n>>6&63|128;else continue;a[s++]=n&63|128}return a.slice(0,s)};function g(I="utf-8",C={fatal:!1}){if(I!=="utf-8")throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${I}') is invalid.`);if(C.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(g.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(g.prototype,"fatal",{value:!1}),Object.defineProperty(g.prototype,"ignoreBOM",{value:!1}),g.prototype.decode=function(I,C={stream:!1}){if(C.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const e=new Uint8Array(I);let i=0;const s=e.length,o=[];for(;i<s;){const a=e[i++];if(a===0)break;if((a&128)===0)o.push(a);else if((a&224)===192){const n=e[i++]&63;o.push((a&31)<<6|n)}else if((a&240)===224){const n=e[i++]&63,B=e[i++]&63;o.push((a&31)<<12|n<<6|B)}else if((a&248)===240){const n=e[i++]&63,B=e[i++]&63,d=e[i++]&63;let l=(a&7)<<18|n<<12|B<<6|d;l>65535&&(l-=65536,o.push(l>>>10&1023|55296),l=56320|l&1023),o.push(l)}}return String.fromCharCode.apply(null,o)},t.TextEncoder=A,t.TextDecoder=g})(typeof window!="undefined"?window:typeof self!="undefined"?self:globalThis);const Lc=new TextDecoder("utf-8");function Uc(t){return Lc.decode(t)}const kc=new TextEncoder;function xc(t){return kc.encode(t)}const Tc=1024*8;class Yt{constructor(A=Tc,g={}){let I=!1;typeof A=="number"?A=new ArrayBuffer(A):(I=!0,this.lastWrittenByte=A.byteLength);const C=g.offset?g.offset>>>0:0,e=A.byteLength-C;let i=C;(ArrayBuffer.isView(A)||A instanceof Yt)&&(A.byteLength!==A.buffer.byteLength&&(i=A.byteOffset+C),A=A.buffer),I?this.lastWrittenByte=e:this.lastWrittenByte=0,this.buffer=A,this.length=e,this.byteLength=e,this.byteOffset=i,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,i,e),this._mark=0,this._marks=[]}available(A=1){return this.offset+A<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(A=1){return this.offset+=A,this}seek(A){return this.offset=A,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const A=this._marks.pop();if(A===void 0)throw new Error("Mark stack empty");return this.seek(A),this}rewind(){return this.offset=0,this}ensureAvailable(A=1){if(!this.available(A)){const I=(this.offset+A)*2,C=new Uint8Array(I);C.set(new Uint8Array(this.buffer)),this.buffer=C.buffer,this.length=this.byteLength=I,this._data=new DataView(this.buffer)}return this}readBoolean(){return this.readUint8()!==0}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(A=1){const g=new Uint8Array(A);for(let I=0;I<A;I++)g[I]=this.readByte();return g}readInt16(){const A=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,A}readUint16(){const A=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,A}readInt32(){const A=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,A}readUint32(){const A=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,A}readFloat32(){const A=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,A}readFloat64(){const A=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,A}readBigInt64(){const A=this._data.getBigInt64(this.offset,this.littleEndian);return this.offset+=8,A}readBigUint64(){const A=this._data.getBigUint64(this.offset,this.littleEndian);return this.offset+=8,A}readChar(){return String.fromCharCode(this.readInt8())}readChars(A=1){let g="";for(let I=0;I<A;I++)g+=this.readChar();return g}readUtf8(A=1){return Uc(this.readBytes(A))}writeBoolean(A){return this.writeUint8(A?255:0),this}writeInt8(A){return this.ensureAvailable(1),this._data.setInt8(this.offset++,A),this._updateLastWrittenByte(),this}writeUint8(A){return this.ensureAvailable(1),this._data.setUint8(this.offset++,A),this._updateLastWrittenByte(),this}writeByte(A){return this.writeUint8(A)}writeBytes(A){this.ensureAvailable(A.length);for(let g=0;g<A.length;g++)this._data.setUint8(this.offset++,A[g]);return this._updateLastWrittenByte(),this}writeInt16(A){return this.ensureAvailable(2),this._data.setInt16(this.offset,A,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(A){return this.ensureAvailable(2),this._data.setUint16(this.offset,A,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(A){return this.ensureAvailable(4),this._data.setInt32(this.offset,A,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(A){return this.ensureAvailable(4),this._data.setUint32(this.offset,A,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(A){return this.ensureAvailable(4),this._data.setFloat32(this.offset,A,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(A){return this.ensureAvailable(8),this._data.setFloat64(this.offset,A,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeBigInt64(A){return this.ensureAvailable(8),this._data.setBigInt64(this.offset,A,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeBigUint64(A){return this.ensureAvailable(8),this._data.setBigUint64(this.offset,A,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(A){return this.writeUint8(A.charCodeAt(0))}writeChars(A){for(let g=0;g<A.length;g++)this.writeUint8(A.charCodeAt(g));return this}writeUtf8(A){return this.writeBytes(xc(A))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}/*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */const zc=4,Fs=0,Xs=1,_c=2;function jI(t){let A=t.length;for(;--A>=0;)t[A]=0}const Pc=0,aa=1,Oc=2,jc=3,qc=258,Kt=29,jC=256,pC=jC+1+Kt,MI=30,Nt=19,na=2*pC+1,lI=15,fi=16,$c=7,Jt=256,Ba=16,la=17,da=18,qi=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),ue=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),Ah=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),ra=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),gh=512,Kg=new Array((pC+2)*2);jI(Kg);const cC=new Array(MI*2);jI(cC);const FC=new Array(gh);jI(FC);const XC=new Array(qc-jc+1);jI(XC);const Dt=new Array(Kt);jI(Dt);const Fe=new Array(MI);jI(Fe);function wi(t,A,g,I,C){this.static_tree=t,this.extra_bits=A,this.extra_base=g,this.elems=I,this.max_length=C,this.has_stree=t&&t.length}let ca,ha,ma;function Vi(t,A){this.dyn_tree=t,this.max_code=0,this.stat_desc=A}const Ga=t=>t<256?FC[t]:FC[256+(t>>>7)],HC=(t,A)=>{t.pending_buf[t.pending++]=A&255,t.pending_buf[t.pending++]=A>>>8&255},ng=(t,A,g)=>{t.bi_valid>fi-g?(t.bi_buf|=A<<t.bi_valid&65535,HC(t,t.bi_buf),t.bi_buf=A>>fi-t.bi_valid,t.bi_valid+=g-fi):(t.bi_buf|=A<<t.bi_valid&65535,t.bi_valid+=g)},Vg=(t,A,g)=>{ng(t,g[A*2],g[A*2+1])},Ea=(t,A)=>{let g=0;do g|=t&1,t>>>=1,g<<=1;while(--A>0);return g>>>1},Ih=t=>{t.bi_valid===16?(HC(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=t.bi_buf&255,t.bi_buf>>=8,t.bi_valid-=8)},Ch=(t,A)=>{const g=A.dyn_tree,I=A.max_code,C=A.stat_desc.static_tree,e=A.stat_desc.has_stree,i=A.stat_desc.extra_bits,s=A.stat_desc.extra_base,o=A.stat_desc.max_length;let a,n,B,d,l,r,c=0;for(d=0;d<=lI;d++)t.bl_count[d]=0;for(g[t.heap[t.heap_max]*2+1]=0,a=t.heap_max+1;a<na;a++)n=t.heap[a],d=g[g[n*2+1]*2+1]+1,d>o&&(d=o,c++),g[n*2+1]=d,!(n>I)&&(t.bl_count[d]++,l=0,n>=s&&(l=i[n-s]),r=g[n*2],t.opt_len+=r*(d+l),e&&(t.static_len+=r*(C[n*2+1]+l)));if(c!==0){do{for(d=o-1;t.bl_count[d]===0;)d--;t.bl_count[d]--,t.bl_count[d+1]+=2,t.bl_count[o]--,c-=2}while(c>0);for(d=o;d!==0;d--)for(n=t.bl_count[d];n!==0;)B=t.heap[--a],!(B>I)&&(g[B*2+1]!==d&&(t.opt_len+=(d-g[B*2+1])*g[B*2],g[B*2+1]=d),n--)}},Qa=(t,A,g)=>{const I=new Array(lI+1);let C=0,e,i;for(e=1;e<=lI;e++)I[e]=C=C+g[e-1]<<1;for(i=0;i<=A;i++){let s=t[i*2+1];s!==0&&(t[i*2]=Ea(I[s]++,s))}},eh=()=>{let t,A,g,I,C;const e=new Array(lI+1);for(g=0,I=0;I<Kt-1;I++)for(Dt[I]=g,t=0;t<1<<qi[I];t++)XC[g++]=I;for(XC[g-1]=I,C=0,I=0;I<16;I++)for(Fe[I]=C,t=0;t<1<<ue[I];t++)FC[C++]=I;for(C>>=7;I<MI;I++)for(Fe[I]=C<<7,t=0;t<1<<ue[I]-7;t++)FC[256+C++]=I;for(A=0;A<=lI;A++)e[A]=0;for(t=0;t<=143;)Kg[t*2+1]=8,t++,e[8]++;for(;t<=255;)Kg[t*2+1]=9,t++,e[9]++;for(;t<=279;)Kg[t*2+1]=7,t++,e[7]++;for(;t<=287;)Kg[t*2+1]=8,t++,e[8]++;for(Qa(Kg,pC+1,e),t=0;t<MI;t++)cC[t*2+1]=5,cC[t*2]=Ea(t,5);ca=new wi(Kg,qi,jC+1,pC,lI),ha=new wi(cC,ue,0,MI,lI),ma=new wi(new Array(0),Ah,0,Nt,$c)},ua=t=>{let A;for(A=0;A<pC;A++)t.dyn_ltree[A*2]=0;for(A=0;A<MI;A++)t.dyn_dtree[A*2]=0;for(A=0;A<Nt;A++)t.bl_tree[A*2]=0;t.dyn_ltree[Jt*2]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0},ba=t=>{t.bi_valid>8?HC(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},ih=(t,A,g,I)=>{ba(t),I&&(HC(t,g),HC(t,~g)),t.pending_buf.set(t.window.subarray(A,A+g),t.pending),t.pending+=g},Hs=(t,A,g,I)=>{const C=A*2,e=g*2;return t[C]<t[e]||t[C]===t[e]&&I[A]<=I[g]},Si=(t,A,g)=>{const I=t.heap[g];let C=g<<1;for(;C<=t.heap_len&&(C<t.heap_len&&Hs(A,t.heap[C+1],t.heap[C],t.depth)&&C++,!Hs(A,I,t.heap[C],t.depth));)t.heap[g]=t.heap[C],g=C,C<<=1;t.heap[g]=I},Ws=(t,A,g)=>{let I,C,e=0,i,s;if(t.last_lit!==0)do I=t.pending_buf[t.d_buf+e*2]<<8|t.pending_buf[t.d_buf+e*2+1],C=t.pending_buf[t.l_buf+e],e++,I===0?Vg(t,C,A):(i=XC[C],Vg(t,i+jC+1,A),s=qi[i],s!==0&&(C-=Dt[i],ng(t,C,s)),I--,i=Ga(I),Vg(t,i,g),s=ue[i],s!==0&&(I-=Fe[i],ng(t,I,s)));while(e<t.last_lit);Vg(t,Jt,A)},$i=(t,A)=>{const g=A.dyn_tree,I=A.stat_desc.static_tree,C=A.stat_desc.has_stree,e=A.stat_desc.elems;let i,s,o=-1,a;for(t.heap_len=0,t.heap_max=na,i=0;i<e;i++)g[i*2]!==0?(t.heap[++t.heap_len]=o=i,t.depth[i]=0):g[i*2+1]=0;for(;t.heap_len<2;)a=t.heap[++t.heap_len]=o<2?++o:0,g[a*2]=1,t.depth[a]=0,t.opt_len--,C&&(t.static_len-=I[a*2+1]);for(A.max_code=o,i=t.heap_len>>1;i>=1;i--)Si(t,g,i);a=e;do i=t.heap[1],t.heap[1]=t.heap[t.heap_len--],Si(t,g,1),s=t.heap[1],t.heap[--t.heap_max]=i,t.heap[--t.heap_max]=s,g[a*2]=g[i*2]+g[s*2],t.depth[a]=(t.depth[i]>=t.depth[s]?t.depth[i]:t.depth[s])+1,g[i*2+1]=g[s*2+1]=a,t.heap[1]=a++,Si(t,g,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],Ch(t,A),Qa(g,o,t.bl_count)},Ys=(t,A,g)=>{let I,C=-1,e,i=A[0*2+1],s=0,o=7,a=4;for(i===0&&(o=138,a=3),A[(g+1)*2+1]=65535,I=0;I<=g;I++)e=i,i=A[(I+1)*2+1],!(++s<o&&e===i)&&(s<a?t.bl_tree[e*2]+=s:e!==0?(e!==C&&t.bl_tree[e*2]++,t.bl_tree[Ba*2]++):s<=10?t.bl_tree[la*2]++:t.bl_tree[da*2]++,s=0,C=e,i===0?(o=138,a=3):e===i?(o=6,a=3):(o=7,a=4))},Ks=(t,A,g)=>{let I,C=-1,e,i=A[0*2+1],s=0,o=7,a=4;for(i===0&&(o=138,a=3),I=0;I<=g;I++)if(e=i,i=A[(I+1)*2+1],!(++s<o&&e===i)){if(s<a)do Vg(t,e,t.bl_tree);while(--s!==0);else e!==0?(e!==C&&(Vg(t,e,t.bl_tree),s--),Vg(t,Ba,t.bl_tree),ng(t,s-3,2)):s<=10?(Vg(t,la,t.bl_tree),ng(t,s-3,3)):(Vg(t,da,t.bl_tree),ng(t,s-11,7));s=0,C=e,i===0?(o=138,a=3):e===i?(o=6,a=3):(o=7,a=4)}},th=t=>{let A;for(Ys(t,t.dyn_ltree,t.l_desc.max_code),Ys(t,t.dyn_dtree,t.d_desc.max_code),$i(t,t.bl_desc),A=Nt-1;A>=3&&t.bl_tree[ra[A]*2+1]===0;A--);return t.opt_len+=3*(A+1)+5+5+4,A},sh=(t,A,g,I)=>{let C;for(ng(t,A-257,5),ng(t,g-1,5),ng(t,I-4,4),C=0;C<I;C++)ng(t,t.bl_tree[ra[C]*2+1],3);Ks(t,t.dyn_ltree,A-1),Ks(t,t.dyn_dtree,g-1)},oh=t=>{let A=4093624447,g;for(g=0;g<=31;g++,A>>>=1)if(A&1&&t.dyn_ltree[g*2]!==0)return Fs;if(t.dyn_ltree[9*2]!==0||t.dyn_ltree[10*2]!==0||t.dyn_ltree[13*2]!==0)return Xs;for(g=32;g<jC;g++)if(t.dyn_ltree[g*2]!==0)return Xs;return Fs};let Ns=!1;const ah=t=>{Ns||(eh(),Ns=!0),t.l_desc=new Vi(t.dyn_ltree,ca),t.d_desc=new Vi(t.dyn_dtree,ha),t.bl_desc=new Vi(t.bl_tree,ma),t.bi_buf=0,t.bi_valid=0,ua(t)},ya=(t,A,g,I)=>{ng(t,(Pc<<1)+(I?1:0),3),ih(t,A,g,!0)},nh=t=>{ng(t,aa<<1,3),Vg(t,Jt,Kg),Ih(t)},Bh=(t,A,g,I)=>{let C,e,i=0;t.level>0?(t.strm.data_type===_c&&(t.strm.data_type=oh(t)),$i(t,t.l_desc),$i(t,t.d_desc),i=th(t),C=t.opt_len+3+7>>>3,e=t.static_len+3+7>>>3,e<=C&&(C=e)):C=e=g+5,g+4<=C&&A!==-1?ya(t,A,g,I):t.strategy===zc||e===C?(ng(t,(aa<<1)+(I?1:0),3),Ws(t,Kg,cC)):(ng(t,(Oc<<1)+(I?1:0),3),sh(t,t.l_desc.max_code+1,t.d_desc.max_code+1,i+1),Ws(t,t.dyn_ltree,t.dyn_dtree)),ua(t),I&&ba(t)},lh=(t,A,g)=>(t.pending_buf[t.d_buf+t.last_lit*2]=A>>>8&255,t.pending_buf[t.d_buf+t.last_lit*2+1]=A&255,t.pending_buf[t.l_buf+t.last_lit]=g&255,t.last_lit++,A===0?t.dyn_ltree[g*2]++:(t.matches++,A--,t.dyn_ltree[(XC[g]+jC+1)*2]++,t.dyn_dtree[Ga(A)*2]++),t.last_lit===t.lit_bufsize-1);var dh=ah,rh=ya,ch=Bh,hh=lh,mh=nh,Gh={_tr_init:dh,_tr_stored_block:rh,_tr_flush_block:ch,_tr_tally:hh,_tr_align:mh};const Eh=(t,A,g,I)=>{let C=t&65535|0,e=t>>>16&65535|0,i=0;for(;g!==0;){i=g>2e3?2e3:g,g-=i;do C=C+A[I++]|0,e=e+C|0;while(--i);C%=65521,e%=65521}return C|e<<16|0};var WC=Eh;const Qh=()=>{let t,A=[];for(var g=0;g<256;g++){t=g;for(var I=0;I<8;I++)t=t&1?3988292384^t>>>1:t>>>1;A[g]=t}return A},uh=new Uint32Array(Qh()),bh=(t,A,g,I)=>{const C=uh,e=I+g;t^=-1;for(let i=I;i<e;i++)t=t>>>8^C[(t^A[i])&255];return t^-1};var Ag=bh,kI={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},qC={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:yh,_tr_stored_block:Zh,_tr_flush_block:Rh,_tr_tally:Og,_tr_align:fh}=Gh,{Z_NO_FLUSH:SI,Z_PARTIAL_FLUSH:wh,Z_FULL_FLUSH:Vh,Z_FINISH:jg,Z_BLOCK:Js,Z_OK:Sg,Z_STREAM_END:Ds,Z_STREAM_ERROR:Eg,Z_DATA_ERROR:Sh,Z_BUF_ERROR:pi,Z_DEFAULT_COMPRESSION:ph,Z_FILTERED:Fh,Z_HUFFMAN_ONLY:de,Z_RLE:Xh,Z_FIXED:Hh,Z_DEFAULT_STRATEGY:Wh,Z_UNKNOWN:Yh,Z_DEFLATED:si}=qC,Kh=9,Nh=15,Jh=8,Dh=29,vh=256,At=vh+1+Dh,Mh=30,Lh=19,Uh=2*At+1,kh=15,uA=3,Tg=258,Rg=Tg+uA+1,xh=32,oi=42,gt=69,be=73,ye=91,Ze=103,dI=113,dC=666,$A=1,$C=2,EI=3,qI=4,Th=3,zg=(t,A)=>(t.msg=kI[A],A),vs=t=>(t<<1)-(t>4?9:0),Lg=t=>{let A=t.length;for(;--A>=0;)t[A]=0};let zh=(t,A,g)=>(A<<t.hash_shift^g)&t.hash_mask,qg=zh;const vg=t=>{const A=t.state;let g=A.pending;g>t.avail_out&&(g=t.avail_out),g!==0&&(t.output.set(A.pending_buf.subarray(A.pending_out,A.pending_out+g),t.next_out),t.next_out+=g,A.pending_out+=g,t.total_out+=g,t.avail_out-=g,A.pending-=g,A.pending===0&&(A.pending_out=0))},Cg=(t,A)=>{Rh(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,A),t.block_start=t.strstart,vg(t.strm)},pA=(t,A)=>{t.pending_buf[t.pending++]=A},nC=(t,A)=>{t.pending_buf[t.pending++]=A>>>8&255,t.pending_buf[t.pending++]=A&255},_h=(t,A,g,I)=>{let C=t.avail_in;return C>I&&(C=I),C===0?0:(t.avail_in-=C,A.set(t.input.subarray(t.next_in,t.next_in+C),g),t.state.wrap===1?t.adler=WC(t.adler,A,C,g):t.state.wrap===2&&(t.adler=Ag(t.adler,A,C,g)),t.next_in+=C,t.total_in+=C,C)},Za=(t,A)=>{let g=t.max_chain_length,I=t.strstart,C,e,i=t.prev_length,s=t.nice_match;const o=t.strstart>t.w_size-Rg?t.strstart-(t.w_size-Rg):0,a=t.window,n=t.w_mask,B=t.prev,d=t.strstart+Tg;let l=a[I+i-1],r=a[I+i];t.prev_length>=t.good_match&&(g>>=2),s>t.lookahead&&(s=t.lookahead);do if(C=A,!(a[C+i]!==r||a[C+i-1]!==l||a[C]!==a[I]||a[++C]!==a[I+1])){I+=2,C++;do;while(a[++I]===a[++C]&&a[++I]===a[++C]&&a[++I]===a[++C]&&a[++I]===a[++C]&&a[++I]===a[++C]&&a[++I]===a[++C]&&a[++I]===a[++C]&&a[++I]===a[++C]&&I<d);if(e=Tg-(d-I),I=d-Tg,e>i){if(t.match_start=A,i=e,e>=s)break;l=a[I+i-1],r=a[I+i]}}while((A=B[A&n])>o&&--g!==0);return i<=t.lookahead?i:t.lookahead},QI=t=>{const A=t.w_size;let g,I,C,e,i;do{if(e=t.window_size-t.lookahead-t.strstart,t.strstart>=A+(A-Rg)){t.window.set(t.window.subarray(A,A+A),0),t.match_start-=A,t.strstart-=A,t.block_start-=A,I=t.hash_size,g=I;do C=t.head[--g],t.head[g]=C>=A?C-A:0;while(--I);I=A,g=I;do C=t.prev[--g],t.prev[g]=C>=A?C-A:0;while(--I);e+=A}if(t.strm.avail_in===0)break;if(I=_h(t.strm,t.window,t.strstart+t.lookahead,e),t.lookahead+=I,t.lookahead+t.insert>=uA)for(i=t.strstart-t.insert,t.ins_h=t.window[i],t.ins_h=qg(t,t.ins_h,t.window[i+1]);t.insert&&(t.ins_h=qg(t,t.ins_h,t.window[i+uA-1]),t.prev[i&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=i,i++,t.insert--,!(t.lookahead+t.insert<uA)););}while(t.lookahead<Rg&&t.strm.avail_in!==0)},Ph=(t,A)=>{let g=65535;for(g>t.pending_buf_size-5&&(g=t.pending_buf_size-5);;){if(t.lookahead<=1){if(QI(t),t.lookahead===0&&A===SI)return $A;if(t.lookahead===0)break}t.strstart+=t.lookahead,t.lookahead=0;const I=t.block_start+g;if((t.strstart===0||t.strstart>=I)&&(t.lookahead=t.strstart-I,t.strstart=I,Cg(t,!1),t.strm.avail_out===0)||t.strstart-t.block_start>=t.w_size-Rg&&(Cg(t,!1),t.strm.avail_out===0))return $A}return t.insert=0,A===jg?(Cg(t,!0),t.strm.avail_out===0?EI:qI):(t.strstart>t.block_start&&(Cg(t,!1),t.strm.avail_out===0),$A)},Fi=(t,A)=>{let g,I;for(;;){if(t.lookahead<Rg){if(QI(t),t.lookahead<Rg&&A===SI)return $A;if(t.lookahead===0)break}if(g=0,t.lookahead>=uA&&(t.ins_h=qg(t,t.ins_h,t.window[t.strstart+uA-1]),g=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),g!==0&&t.strstart-g<=t.w_size-Rg&&(t.match_length=Za(t,g)),t.match_length>=uA)if(I=Og(t,t.strstart-t.match_start,t.match_length-uA),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=uA){t.match_length--;do t.strstart++,t.ins_h=qg(t,t.ins_h,t.window[t.strstart+uA-1]),g=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(--t.match_length!==0);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=qg(t,t.ins_h,t.window[t.strstart+1]);else I=Og(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(I&&(Cg(t,!1),t.strm.avail_out===0))return $A}return t.insert=t.strstart<uA-1?t.strstart:uA-1,A===jg?(Cg(t,!0),t.strm.avail_out===0?EI:qI):t.last_lit&&(Cg(t,!1),t.strm.avail_out===0)?$A:$C},KI=(t,A)=>{let g,I,C;for(;;){if(t.lookahead<Rg){if(QI(t),t.lookahead<Rg&&A===SI)return $A;if(t.lookahead===0)break}if(g=0,t.lookahead>=uA&&(t.ins_h=qg(t,t.ins_h,t.window[t.strstart+uA-1]),g=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=uA-1,g!==0&&t.prev_length<t.max_lazy_match&&t.strstart-g<=t.w_size-Rg&&(t.match_length=Za(t,g),t.match_length<=5&&(t.strategy===Fh||t.match_length===uA&&t.strstart-t.match_start>4096)&&(t.match_length=uA-1)),t.prev_length>=uA&&t.match_length<=t.prev_length){C=t.strstart+t.lookahead-uA,I=Og(t,t.strstart-1-t.prev_match,t.prev_length-uA),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=C&&(t.ins_h=qg(t,t.ins_h,t.window[t.strstart+uA-1]),g=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(--t.prev_length!==0);if(t.match_available=0,t.match_length=uA-1,t.strstart++,I&&(Cg(t,!1),t.strm.avail_out===0))return $A}else if(t.match_available){if(I=Og(t,0,t.window[t.strstart-1]),I&&Cg(t,!1),t.strstart++,t.lookahead--,t.strm.avail_out===0)return $A}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(I=Og(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<uA-1?t.strstart:uA-1,A===jg?(Cg(t,!0),t.strm.avail_out===0?EI:qI):t.last_lit&&(Cg(t,!1),t.strm.avail_out===0)?$A:$C},Oh=(t,A)=>{let g,I,C,e;const i=t.window;for(;;){if(t.lookahead<=Tg){if(QI(t),t.lookahead<=Tg&&A===SI)return $A;if(t.lookahead===0)break}if(t.match_length=0,t.lookahead>=uA&&t.strstart>0&&(C=t.strstart-1,I=i[C],I===i[++C]&&I===i[++C]&&I===i[++C])){e=t.strstart+Tg;do;while(I===i[++C]&&I===i[++C]&&I===i[++C]&&I===i[++C]&&I===i[++C]&&I===i[++C]&&I===i[++C]&&I===i[++C]&&C<e);t.match_length=Tg-(e-C),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=uA?(g=Og(t,1,t.match_length-uA),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(g=Og(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),g&&(Cg(t,!1),t.strm.avail_out===0))return $A}return t.insert=0,A===jg?(Cg(t,!0),t.strm.avail_out===0?EI:qI):t.last_lit&&(Cg(t,!1),t.strm.avail_out===0)?$A:$C},jh=(t,A)=>{let g;for(;;){if(t.lookahead===0&&(QI(t),t.lookahead===0)){if(A===SI)return $A;break}if(t.match_length=0,g=Og(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,g&&(Cg(t,!1),t.strm.avail_out===0))return $A}return t.insert=0,A===jg?(Cg(t,!0),t.strm.avail_out===0?EI:qI):t.last_lit&&(Cg(t,!1),t.strm.avail_out===0)?$A:$C};function fg(t,A,g,I,C){this.good_length=t,this.max_lazy=A,this.nice_length=g,this.max_chain=I,this.func=C}const rC=[new fg(0,0,0,0,Ph),new fg(4,4,8,4,Fi),new fg(4,5,16,8,Fi),new fg(4,6,32,32,Fi),new fg(4,4,16,16,KI),new fg(8,16,32,32,KI),new fg(8,16,128,128,KI),new fg(8,32,128,256,KI),new fg(32,128,258,1024,KI),new fg(32,258,258,4096,KI)],qh=t=>{t.window_size=2*t.w_size,Lg(t.head),t.max_lazy_match=rC[t.level].max_lazy,t.good_match=rC[t.level].good_length,t.nice_match=rC[t.level].nice_length,t.max_chain_length=rC[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=uA-1,t.match_available=0,t.ins_h=0};function $h(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=si,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(Uh*2),this.dyn_dtree=new Uint16Array((2*Mh+1)*2),this.bl_tree=new Uint16Array((2*Lh+1)*2),Lg(this.dyn_ltree),Lg(this.dyn_dtree),Lg(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(kh+1),this.heap=new Uint16Array(2*At+1),Lg(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*At+1),Lg(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Ra=t=>{if(!t||!t.state)return zg(t,Eg);t.total_in=t.total_out=0,t.data_type=Yh;const A=t.state;return A.pending=0,A.pending_out=0,A.wrap<0&&(A.wrap=-A.wrap),A.status=A.wrap?oi:dI,t.adler=A.wrap===2?0:1,A.last_flush=SI,yh(A),Sg},fa=t=>{const A=Ra(t);return A===Sg&&qh(t.state),A},Am=(t,A)=>!t||!t.state||t.state.wrap!==2?Eg:(t.state.gzhead=A,Sg),wa=(t,A,g,I,C,e)=>{if(!t)return Eg;let i=1;if(A===ph&&(A=6),I<0?(i=0,I=-I):I>15&&(i=2,I-=16),C<1||C>Kh||g!==si||I<8||I>15||A<0||A>9||e<0||e>Hh)return zg(t,Eg);I===8&&(I=9);const s=new $h;return t.state=s,s.strm=t,s.wrap=i,s.gzhead=null,s.w_bits=I,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=C+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+uA-1)/uA),s.window=new Uint8Array(s.w_size*2),s.head=new Uint16Array(s.hash_size),s.prev=new Uint16Array(s.w_size),s.lit_bufsize=1<<C+6,s.pending_buf_size=s.lit_bufsize*4,s.pending_buf=new Uint8Array(s.pending_buf_size),s.d_buf=1*s.lit_bufsize,s.l_buf=(1+2)*s.lit_bufsize,s.level=A,s.strategy=e,s.method=g,fa(t)},gm=(t,A)=>wa(t,A,si,Nh,Jh,Wh),Im=(t,A)=>{let g,I;if(!t||!t.state||A>Js||A<0)return t?zg(t,Eg):Eg;const C=t.state;if(!t.output||!t.input&&t.avail_in!==0||C.status===dC&&A!==jg)return zg(t,t.avail_out===0?pi:Eg);C.strm=t;const e=C.last_flush;if(C.last_flush=A,C.status===oi)if(C.wrap===2)t.adler=0,pA(C,31),pA(C,139),pA(C,8),C.gzhead?(pA(C,(C.gzhead.text?1:0)+(C.gzhead.hcrc?2:0)+(C.gzhead.extra?4:0)+(C.gzhead.name?8:0)+(C.gzhead.comment?16:0)),pA(C,C.gzhead.time&255),pA(C,C.gzhead.time>>8&255),pA(C,C.gzhead.time>>16&255),pA(C,C.gzhead.time>>24&255),pA(C,C.level===9?2:C.strategy>=de||C.level<2?4:0),pA(C,C.gzhead.os&255),C.gzhead.extra&&C.gzhead.extra.length&&(pA(C,C.gzhead.extra.length&255),pA(C,C.gzhead.extra.length>>8&255)),C.gzhead.hcrc&&(t.adler=Ag(t.adler,C.pending_buf,C.pending,0)),C.gzindex=0,C.status=gt):(pA(C,0),pA(C,0),pA(C,0),pA(C,0),pA(C,0),pA(C,C.level===9?2:C.strategy>=de||C.level<2?4:0),pA(C,Th),C.status=dI);else{let i=si+(C.w_bits-8<<4)<<8,s=-1;C.strategy>=de||C.level<2?s=0:C.level<6?s=1:C.level===6?s=2:s=3,i|=s<<6,C.strstart!==0&&(i|=xh),i+=31-i%31,C.status=dI,nC(C,i),C.strstart!==0&&(nC(C,t.adler>>>16),nC(C,t.adler&65535)),t.adler=1}if(C.status===gt)if(C.gzhead.extra){for(g=C.pending;C.gzindex<(C.gzhead.extra.length&65535)&&!(C.pending===C.pending_buf_size&&(C.gzhead.hcrc&&C.pending>g&&(t.adler=Ag(t.adler,C.pending_buf,C.pending-g,g)),vg(t),g=C.pending,C.pending===C.pending_buf_size));)pA(C,C.gzhead.extra[C.gzindex]&255),C.gzindex++;C.gzhead.hcrc&&C.pending>g&&(t.adler=Ag(t.adler,C.pending_buf,C.pending-g,g)),C.gzindex===C.gzhead.extra.length&&(C.gzindex=0,C.status=be)}else C.status=be;if(C.status===be)if(C.gzhead.name){g=C.pending;do{if(C.pending===C.pending_buf_size&&(C.gzhead.hcrc&&C.pending>g&&(t.adler=Ag(t.adler,C.pending_buf,C.pending-g,g)),vg(t),g=C.pending,C.pending===C.pending_buf_size)){I=1;break}C.gzindex<C.gzhead.name.length?I=C.gzhead.name.charCodeAt(C.gzindex++)&255:I=0,pA(C,I)}while(I!==0);C.gzhead.hcrc&&C.pending>g&&(t.adler=Ag(t.adler,C.pending_buf,C.pending-g,g)),I===0&&(C.gzindex=0,C.status=ye)}else C.status=ye;if(C.status===ye)if(C.gzhead.comment){g=C.pending;do{if(C.pending===C.pending_buf_size&&(C.gzhead.hcrc&&C.pending>g&&(t.adler=Ag(t.adler,C.pending_buf,C.pending-g,g)),vg(t),g=C.pending,C.pending===C.pending_buf_size)){I=1;break}C.gzindex<C.gzhead.comment.length?I=C.gzhead.comment.charCodeAt(C.gzindex++)&255:I=0,pA(C,I)}while(I!==0);C.gzhead.hcrc&&C.pending>g&&(t.adler=Ag(t.adler,C.pending_buf,C.pending-g,g)),I===0&&(C.status=Ze)}else C.status=Ze;if(C.status===Ze&&(C.gzhead.hcrc?(C.pending+2>C.pending_buf_size&&vg(t),C.pending+2<=C.pending_buf_size&&(pA(C,t.adler&255),pA(C,t.adler>>8&255),t.adler=0,C.status=dI)):C.status=dI),C.pending!==0){if(vg(t),t.avail_out===0)return C.last_flush=-1,Sg}else if(t.avail_in===0&&vs(A)<=vs(e)&&A!==jg)return zg(t,pi);if(C.status===dC&&t.avail_in!==0)return zg(t,pi);if(t.avail_in!==0||C.lookahead!==0||A!==SI&&C.status!==dC){let i=C.strategy===de?jh(C,A):C.strategy===Xh?Oh(C,A):rC[C.level].func(C,A);if((i===EI||i===qI)&&(C.status=dC),i===$A||i===EI)return t.avail_out===0&&(C.last_flush=-1),Sg;if(i===$C&&(A===wh?fh(C):A!==Js&&(Zh(C,0,0,!1),A===Vh&&(Lg(C.head),C.lookahead===0&&(C.strstart=0,C.block_start=0,C.insert=0))),vg(t),t.avail_out===0))return C.last_flush=-1,Sg}return A!==jg?Sg:C.wrap<=0?Ds:(C.wrap===2?(pA(C,t.adler&255),pA(C,t.adler>>8&255),pA(C,t.adler>>16&255),pA(C,t.adler>>24&255),pA(C,t.total_in&255),pA(C,t.total_in>>8&255),pA(C,t.total_in>>16&255),pA(C,t.total_in>>24&255)):(nC(C,t.adler>>>16),nC(C,t.adler&65535)),vg(t),C.wrap>0&&(C.wrap=-C.wrap),C.pending!==0?Sg:Ds)},Cm=t=>{if(!t||!t.state)return Eg;const A=t.state.status;return A!==oi&&A!==gt&&A!==be&&A!==ye&&A!==Ze&&A!==dI&&A!==dC?zg(t,Eg):(t.state=null,A===dI?zg(t,Sh):Sg)},em=(t,A)=>{let g=A.length;if(!t||!t.state)return Eg;const I=t.state,C=I.wrap;if(C===2||C===1&&I.status!==oi||I.lookahead)return Eg;if(C===1&&(t.adler=WC(t.adler,A,g,0)),I.wrap=0,g>=I.w_size){C===0&&(Lg(I.head),I.strstart=0,I.block_start=0,I.insert=0);let o=new Uint8Array(I.w_size);o.set(A.subarray(g-I.w_size,g),0),A=o,g=I.w_size}const e=t.avail_in,i=t.next_in,s=t.input;for(t.avail_in=g,t.next_in=0,t.input=A,QI(I);I.lookahead>=uA;){let o=I.strstart,a=I.lookahead-(uA-1);do I.ins_h=qg(I,I.ins_h,I.window[o+uA-1]),I.prev[o&I.w_mask]=I.head[I.ins_h],I.head[I.ins_h]=o,o++;while(--a);I.strstart=o,I.lookahead=uA-1,QI(I)}return I.strstart+=I.lookahead,I.block_start=I.strstart,I.insert=I.lookahead,I.lookahead=0,I.match_length=I.prev_length=uA-1,I.match_available=0,t.next_in=i,t.input=s,t.avail_in=e,I.wrap=C,Sg};var im=gm,tm=wa,sm=fa,om=Ra,am=Am,nm=Im,Bm=Cm,lm=em,dm="pako deflate (from Nodeca project)",hC={deflateInit:im,deflateInit2:tm,deflateReset:sm,deflateResetKeep:om,deflateSetHeader:am,deflate:nm,deflateEnd:Bm,deflateSetDictionary:lm,deflateInfo:dm};const rm=(t,A)=>Object.prototype.hasOwnProperty.call(t,A);var cm=function(t){const A=Array.prototype.slice.call(arguments,1);for(;A.length;){const g=A.shift();if(!!g){if(typeof g!="object")throw new TypeError(g+"must be non-object");for(const I in g)rm(g,I)&&(t[I]=g[I])}}return t},hm=t=>{let A=0;for(let I=0,C=t.length;I<C;I++)A+=t[I].length;const g=new Uint8Array(A);for(let I=0,C=0,e=t.length;I<e;I++){let i=t[I];g.set(i,C),C+=i.length}return g},ai={assign:cm,flattenChunks:hm};let Va=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{Va=!1}const YC=new Uint8Array(256);for(let t=0;t<256;t++)YC[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;YC[254]=YC[254]=1;var mm=t=>{if(typeof TextEncoder=="function"&&TextEncoder.prototype.encode)return new TextEncoder().encode(t);let A,g,I,C,e,i=t.length,s=0;for(C=0;C<i;C++)g=t.charCodeAt(C),(g&64512)===55296&&C+1<i&&(I=t.charCodeAt(C+1),(I&64512)===56320&&(g=65536+(g-55296<<10)+(I-56320),C++)),s+=g<128?1:g<2048?2:g<65536?3:4;for(A=new Uint8Array(s),e=0,C=0;e<s;C++)g=t.charCodeAt(C),(g&64512)===55296&&C+1<i&&(I=t.charCodeAt(C+1),(I&64512)===56320&&(g=65536+(g-55296<<10)+(I-56320),C++)),g<128?A[e++]=g:g<2048?(A[e++]=192|g>>>6,A[e++]=128|g&63):g<65536?(A[e++]=224|g>>>12,A[e++]=128|g>>>6&63,A[e++]=128|g&63):(A[e++]=240|g>>>18,A[e++]=128|g>>>12&63,A[e++]=128|g>>>6&63,A[e++]=128|g&63);return A};const Gm=(t,A)=>{if(A<65534&&t.subarray&&Va)return String.fromCharCode.apply(null,t.length===A?t:t.subarray(0,A));let g="";for(let I=0;I<A;I++)g+=String.fromCharCode(t[I]);return g};var Em=(t,A)=>{const g=A||t.length;if(typeof TextDecoder=="function"&&TextDecoder.prototype.decode)return new TextDecoder().decode(t.subarray(0,A));let I,C;const e=new Array(g*2);for(C=0,I=0;I<g;){let i=t[I++];if(i<128){e[C++]=i;continue}let s=YC[i];if(s>4){e[C++]=65533,I+=s-1;continue}for(i&=s===2?31:s===3?15:7;s>1&&I<g;)i=i<<6|t[I++]&63,s--;if(s>1){e[C++]=65533;continue}i<65536?e[C++]=i:(i-=65536,e[C++]=55296|i>>10&1023,e[C++]=56320|i&1023)}return Gm(e,C)},Qm=(t,A)=>{A=A||t.length,A>t.length&&(A=t.length);let g=A-1;for(;g>=0&&(t[g]&192)===128;)g--;return g<0||g===0?A:g+YC[t[g]]>A?g:A},KC={string2buf:mm,buf2string:Em,utf8border:Qm};function um(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Sa=um;const pa=Object.prototype.toString,{Z_NO_FLUSH:bm,Z_SYNC_FLUSH:ym,Z_FULL_FLUSH:Zm,Z_FINISH:Rm,Z_OK:Xe,Z_STREAM_END:fm,Z_DEFAULT_COMPRESSION:wm,Z_DEFAULT_STRATEGY:Vm,Z_DEFLATED:Sm}=qC;function vt(t){this.options=ai.assign({level:wm,method:Sm,chunkSize:16384,windowBits:15,memLevel:8,strategy:Vm},t||{});let A=this.options;A.raw&&A.windowBits>0?A.windowBits=-A.windowBits:A.gzip&&A.windowBits>0&&A.windowBits<16&&(A.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Sa,this.strm.avail_out=0;let g=hC.deflateInit2(this.strm,A.level,A.method,A.windowBits,A.memLevel,A.strategy);if(g!==Xe)throw new Error(kI[g]);if(A.header&&hC.deflateSetHeader(this.strm,A.header),A.dictionary){let I;if(typeof A.dictionary=="string"?I=KC.string2buf(A.dictionary):pa.call(A.dictionary)==="[object ArrayBuffer]"?I=new Uint8Array(A.dictionary):I=A.dictionary,g=hC.deflateSetDictionary(this.strm,I),g!==Xe)throw new Error(kI[g]);this._dict_set=!0}}vt.prototype.push=function(t,A){const g=this.strm,I=this.options.chunkSize;let C,e;if(this.ended)return!1;for(A===~~A?e=A:e=A===!0?Rm:bm,typeof t=="string"?g.input=KC.string2buf(t):pa.call(t)==="[object ArrayBuffer]"?g.input=new Uint8Array(t):g.input=t,g.next_in=0,g.avail_in=g.input.length;;){if(g.avail_out===0&&(g.output=new Uint8Array(I),g.next_out=0,g.avail_out=I),(e===ym||e===Zm)&&g.avail_out<=6){this.onData(g.output.subarray(0,g.next_out)),g.avail_out=0;continue}if(C=hC.deflate(g,e),C===fm)return g.next_out>0&&this.onData(g.output.subarray(0,g.next_out)),C=hC.deflateEnd(this.strm),this.onEnd(C),this.ended=!0,C===Xe;if(g.avail_out===0){this.onData(g.output);continue}if(e>0&&g.next_out>0){this.onData(g.output.subarray(0,g.next_out)),g.avail_out=0;continue}if(g.avail_in===0)break}return!0};vt.prototype.onData=function(t){this.chunks.push(t)};vt.prototype.onEnd=function(t){t===Xe&&(this.result=ai.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};const re=30,pm=12;var Fm=function(A,g){let I,C,e,i,s,o,a,n,B,d,l,r,c,h,E,b,m,G,y,Q,u,Z,w,R;const S=A.state;I=A.next_in,w=A.input,C=I+(A.avail_in-5),e=A.next_out,R=A.output,i=e-(g-A.avail_out),s=e+(A.avail_out-257),o=S.dmax,a=S.wsize,n=S.whave,B=S.wnext,d=S.window,l=S.hold,r=S.bits,c=S.lencode,h=S.distcode,E=(1<<S.lenbits)-1,b=(1<<S.distbits)-1;A:do{r<15&&(l+=w[I++]<<r,r+=8,l+=w[I++]<<r,r+=8),m=c[l&E];g:for(;;){if(G=m>>>24,l>>>=G,r-=G,G=m>>>16&255,G===0)R[e++]=m&65535;else if(G&16){y=m&65535,G&=15,G&&(r<G&&(l+=w[I++]<<r,r+=8),y+=l&(1<<G)-1,l>>>=G,r-=G),r<15&&(l+=w[I++]<<r,r+=8,l+=w[I++]<<r,r+=8),m=h[l&b];I:for(;;){if(G=m>>>24,l>>>=G,r-=G,G=m>>>16&255,G&16){if(Q=m&65535,G&=15,r<G&&(l+=w[I++]<<r,r+=8,r<G&&(l+=w[I++]<<r,r+=8)),Q+=l&(1<<G)-1,Q>o){A.msg="invalid distance too far back",S.mode=re;break A}if(l>>>=G,r-=G,G=e-i,Q>G){if(G=Q-G,G>n&&S.sane){A.msg="invalid distance too far back",S.mode=re;break A}if(u=0,Z=d,B===0){if(u+=a-G,G<y){y-=G;do R[e++]=d[u++];while(--G);u=e-Q,Z=R}}else if(B<G){if(u+=a+B-G,G-=B,G<y){y-=G;do R[e++]=d[u++];while(--G);if(u=0,B<y){G=B,y-=G;do R[e++]=d[u++];while(--G);u=e-Q,Z=R}}}else if(u+=B-G,G<y){y-=G;do R[e++]=d[u++];while(--G);u=e-Q,Z=R}for(;y>2;)R[e++]=Z[u++],R[e++]=Z[u++],R[e++]=Z[u++],y-=3;y&&(R[e++]=Z[u++],y>1&&(R[e++]=Z[u++]))}else{u=e-Q;do R[e++]=R[u++],R[e++]=R[u++],R[e++]=R[u++],y-=3;while(y>2);y&&(R[e++]=R[u++],y>1&&(R[e++]=R[u++]))}}else if((G&64)===0){m=h[(m&65535)+(l&(1<<G)-1)];continue I}else{A.msg="invalid distance code",S.mode=re;break A}break}}else if((G&64)===0){m=c[(m&65535)+(l&(1<<G)-1)];continue g}else if(G&32){S.mode=pm;break A}else{A.msg="invalid literal/length code",S.mode=re;break A}break}}while(I<C&&e<s);y=r>>3,I-=y,r-=y<<3,l&=(1<<r)-1,A.next_in=I,A.next_out=e,A.avail_in=I<C?5+(C-I):5-(I-C),A.avail_out=e<s?257+(s-e):257-(e-s),S.hold=l,S.bits=r};const NI=15,Ms=852,Ls=592,Us=0,Xi=1,ks=2,Xm=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),Hm=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Wm=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Ym=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]),Km=(t,A,g,I,C,e,i,s)=>{const o=s.bits;let a=0,n=0,B=0,d=0,l=0,r=0,c=0,h=0,E=0,b=0,m,G,y,Q,u,Z=null,w=0,R;const S=new Uint16Array(NI+1),H=new Uint16Array(NI+1);let X=null,F=0,_,oA,sA;for(a=0;a<=NI;a++)S[a]=0;for(n=0;n<I;n++)S[A[g+n]]++;for(l=o,d=NI;d>=1&&S[d]===0;d--);if(l>d&&(l=d),d===0)return C[e++]=1<<24|64<<16|0,C[e++]=1<<24|64<<16|0,s.bits=1,0;for(B=1;B<d&&S[B]===0;B++);for(l<B&&(l=B),h=1,a=1;a<=NI;a++)if(h<<=1,h-=S[a],h<0)return-1;if(h>0&&(t===Us||d!==1))return-1;for(H[1]=0,a=1;a<NI;a++)H[a+1]=H[a]+S[a];for(n=0;n<I;n++)A[g+n]!==0&&(i[H[A[g+n]]++]=n);if(t===Us?(Z=X=i,R=19):t===Xi?(Z=Xm,w-=257,X=Hm,F-=257,R=256):(Z=Wm,X=Ym,R=-1),b=0,n=0,a=B,u=e,r=l,c=0,y=-1,E=1<<l,Q=E-1,t===Xi&&E>Ms||t===ks&&E>Ls)return 1;for(;;){_=a-c,i[n]<R?(oA=0,sA=i[n]):i[n]>R?(oA=X[F+i[n]],sA=Z[w+i[n]]):(oA=32+64,sA=0),m=1<<a-c,G=1<<r,B=G;do G-=m,C[u+(b>>c)+G]=_<<24|oA<<16|sA|0;while(G!==0);for(m=1<<a-1;b&m;)m>>=1;if(m!==0?(b&=m-1,b+=m):b=0,n++,--S[a]===0){if(a===d)break;a=A[g+i[n]]}if(a>l&&(b&Q)!==y){for(c===0&&(c=l),u+=B,r=a-c,h=1<<r;r+c<d&&(h-=S[r+c],!(h<=0));)r++,h<<=1;if(E+=1<<r,t===Xi&&E>Ms||t===ks&&E>Ls)return 1;y=b&Q,C[y]=l<<24|r<<16|u-e|0}}return b!==0&&(C[u+b]=a-c<<24|64<<16|0),s.bits=l,0};var mC=Km;const Nm=0,Fa=1,Xa=2,{Z_FINISH:xs,Z_BLOCK:Jm,Z_TREES:ce,Z_OK:uI,Z_STREAM_END:Dm,Z_NEED_DICT:vm,Z_STREAM_ERROR:Qg,Z_DATA_ERROR:Ha,Z_MEM_ERROR:Wa,Z_BUF_ERROR:Mm,Z_DEFLATED:Ts}=qC,Ya=1,zs=2,_s=3,Ps=4,Os=5,js=6,qs=7,$s=8,Ao=9,go=10,He=11,Yg=12,Hi=13,Io=14,Wi=15,Co=16,eo=17,io=18,to=19,he=20,me=21,so=22,oo=23,ao=24,no=25,Bo=26,Yi=27,lo=28,ro=29,kA=30,Ka=31,Lm=32,Um=852,km=592,xm=15,Tm=xm,co=t=>(t>>>24&255)+(t>>>8&65280)+((t&65280)<<8)+((t&255)<<24);function zm(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Na=t=>{if(!t||!t.state)return Qg;const A=t.state;return t.total_in=t.total_out=A.total=0,t.msg="",A.wrap&&(t.adler=A.wrap&1),A.mode=Ya,A.last=0,A.havedict=0,A.dmax=32768,A.head=null,A.hold=0,A.bits=0,A.lencode=A.lendyn=new Int32Array(Um),A.distcode=A.distdyn=new Int32Array(km),A.sane=1,A.back=-1,uI},Ja=t=>{if(!t||!t.state)return Qg;const A=t.state;return A.wsize=0,A.whave=0,A.wnext=0,Na(t)},Da=(t,A)=>{let g;if(!t||!t.state)return Qg;const I=t.state;return A<0?(g=0,A=-A):(g=(A>>4)+1,A<48&&(A&=15)),A&&(A<8||A>15)?Qg:(I.window!==null&&I.wbits!==A&&(I.window=null),I.wrap=g,I.wbits=A,Ja(t))},va=(t,A)=>{if(!t)return Qg;const g=new zm;t.state=g,g.window=null;const I=Da(t,A);return I!==uI&&(t.state=null),I},_m=t=>va(t,Tm);let ho=!0,Ki,Ni;const Pm=t=>{if(ho){Ki=new Int32Array(512),Ni=new Int32Array(32);let A=0;for(;A<144;)t.lens[A++]=8;for(;A<256;)t.lens[A++]=9;for(;A<280;)t.lens[A++]=7;for(;A<288;)t.lens[A++]=8;for(mC(Fa,t.lens,0,288,Ki,0,t.work,{bits:9}),A=0;A<32;)t.lens[A++]=5;mC(Xa,t.lens,0,32,Ni,0,t.work,{bits:5}),ho=!1}t.lencode=Ki,t.lenbits=9,t.distcode=Ni,t.distbits=5},Ma=(t,A,g,I)=>{let C;const e=t.state;return e.window===null&&(e.wsize=1<<e.wbits,e.wnext=0,e.whave=0,e.window=new Uint8Array(e.wsize)),I>=e.wsize?(e.window.set(A.subarray(g-e.wsize,g),0),e.wnext=0,e.whave=e.wsize):(C=e.wsize-e.wnext,C>I&&(C=I),e.window.set(A.subarray(g-I,g-I+C),e.wnext),I-=C,I?(e.window.set(A.subarray(g-I,g),0),e.wnext=I,e.whave=e.wsize):(e.wnext+=C,e.wnext===e.wsize&&(e.wnext=0),e.whave<e.wsize&&(e.whave+=C))),0},Om=(t,A)=>{let g,I,C,e,i,s,o,a,n,B,d,l,r,c,h=0,E,b,m,G,y,Q,u,Z;const w=new Uint8Array(4);let R,S;const H=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!t||!t.state||!t.output||!t.input&&t.avail_in!==0)return Qg;g=t.state,g.mode===Yg&&(g.mode=Hi),i=t.next_out,C=t.output,o=t.avail_out,e=t.next_in,I=t.input,s=t.avail_in,a=g.hold,n=g.bits,B=s,d=o,Z=uI;A:for(;;)switch(g.mode){case Ya:if(g.wrap===0){g.mode=Hi;break}for(;n<16;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if(g.wrap&2&&a===35615){g.check=0,w[0]=a&255,w[1]=a>>>8&255,g.check=Ag(g.check,w,2,0),a=0,n=0,g.mode=zs;break}if(g.flags=0,g.head&&(g.head.done=!1),!(g.wrap&1)||(((a&255)<<8)+(a>>8))%31){t.msg="incorrect header check",g.mode=kA;break}if((a&15)!==Ts){t.msg="unknown compression method",g.mode=kA;break}if(a>>>=4,n-=4,u=(a&15)+8,g.wbits===0)g.wbits=u;else if(u>g.wbits){t.msg="invalid window size",g.mode=kA;break}g.dmax=1<<g.wbits,t.adler=g.check=1,g.mode=a&512?go:Yg,a=0,n=0;break;case zs:for(;n<16;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if(g.flags=a,(g.flags&255)!==Ts){t.msg="unknown compression method",g.mode=kA;break}if(g.flags&57344){t.msg="unknown header flags set",g.mode=kA;break}g.head&&(g.head.text=a>>8&1),g.flags&512&&(w[0]=a&255,w[1]=a>>>8&255,g.check=Ag(g.check,w,2,0)),a=0,n=0,g.mode=_s;case _s:for(;n<32;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}g.head&&(g.head.time=a),g.flags&512&&(w[0]=a&255,w[1]=a>>>8&255,w[2]=a>>>16&255,w[3]=a>>>24&255,g.check=Ag(g.check,w,4,0)),a=0,n=0,g.mode=Ps;case Ps:for(;n<16;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}g.head&&(g.head.xflags=a&255,g.head.os=a>>8),g.flags&512&&(w[0]=a&255,w[1]=a>>>8&255,g.check=Ag(g.check,w,2,0)),a=0,n=0,g.mode=Os;case Os:if(g.flags&1024){for(;n<16;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}g.length=a,g.head&&(g.head.extra_len=a),g.flags&512&&(w[0]=a&255,w[1]=a>>>8&255,g.check=Ag(g.check,w,2,0)),a=0,n=0}else g.head&&(g.head.extra=null);g.mode=js;case js:if(g.flags&1024&&(l=g.length,l>s&&(l=s),l&&(g.head&&(u=g.head.extra_len-g.length,g.head.extra||(g.head.extra=new Uint8Array(g.head.extra_len)),g.head.extra.set(I.subarray(e,e+l),u)),g.flags&512&&(g.check=Ag(g.check,I,l,e)),s-=l,e+=l,g.length-=l),g.length))break A;g.length=0,g.mode=qs;case qs:if(g.flags&2048){if(s===0)break A;l=0;do u=I[e+l++],g.head&&u&&g.length<65536&&(g.head.name+=String.fromCharCode(u));while(u&&l<s);if(g.flags&512&&(g.check=Ag(g.check,I,l,e)),s-=l,e+=l,u)break A}else g.head&&(g.head.name=null);g.length=0,g.mode=$s;case $s:if(g.flags&4096){if(s===0)break A;l=0;do u=I[e+l++],g.head&&u&&g.length<65536&&(g.head.comment+=String.fromCharCode(u));while(u&&l<s);if(g.flags&512&&(g.check=Ag(g.check,I,l,e)),s-=l,e+=l,u)break A}else g.head&&(g.head.comment=null);g.mode=Ao;case Ao:if(g.flags&512){for(;n<16;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if(a!==(g.check&65535)){t.msg="header crc mismatch",g.mode=kA;break}a=0,n=0}g.head&&(g.head.hcrc=g.flags>>9&1,g.head.done=!0),t.adler=g.check=0,g.mode=Yg;break;case go:for(;n<32;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}t.adler=g.check=co(a),a=0,n=0,g.mode=He;case He:if(g.havedict===0)return t.next_out=i,t.avail_out=o,t.next_in=e,t.avail_in=s,g.hold=a,g.bits=n,vm;t.adler=g.check=1,g.mode=Yg;case Yg:if(A===Jm||A===ce)break A;case Hi:if(g.last){a>>>=n&7,n-=n&7,g.mode=Yi;break}for(;n<3;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}switch(g.last=a&1,a>>>=1,n-=1,a&3){case 0:g.mode=Io;break;case 1:if(Pm(g),g.mode=he,A===ce){a>>>=2,n-=2;break A}break;case 2:g.mode=eo;break;case 3:t.msg="invalid block type",g.mode=kA}a>>>=2,n-=2;break;case Io:for(a>>>=n&7,n-=n&7;n<32;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if((a&65535)!==(a>>>16^65535)){t.msg="invalid stored block lengths",g.mode=kA;break}if(g.length=a&65535,a=0,n=0,g.mode=Wi,A===ce)break A;case Wi:g.mode=Co;case Co:if(l=g.length,l){if(l>s&&(l=s),l>o&&(l=o),l===0)break A;C.set(I.subarray(e,e+l),i),s-=l,e+=l,o-=l,i+=l,g.length-=l;break}g.mode=Yg;break;case eo:for(;n<14;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if(g.nlen=(a&31)+257,a>>>=5,n-=5,g.ndist=(a&31)+1,a>>>=5,n-=5,g.ncode=(a&15)+4,a>>>=4,n-=4,g.nlen>286||g.ndist>30){t.msg="too many length or distance symbols",g.mode=kA;break}g.have=0,g.mode=io;case io:for(;g.have<g.ncode;){for(;n<3;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}g.lens[H[g.have++]]=a&7,a>>>=3,n-=3}for(;g.have<19;)g.lens[H[g.have++]]=0;if(g.lencode=g.lendyn,g.lenbits=7,R={bits:g.lenbits},Z=mC(Nm,g.lens,0,19,g.lencode,0,g.work,R),g.lenbits=R.bits,Z){t.msg="invalid code lengths set",g.mode=kA;break}g.have=0,g.mode=to;case to:for(;g.have<g.nlen+g.ndist;){for(;h=g.lencode[a&(1<<g.lenbits)-1],E=h>>>24,b=h>>>16&255,m=h&65535,!(E<=n);){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if(m<16)a>>>=E,n-=E,g.lens[g.have++]=m;else{if(m===16){for(S=E+2;n<S;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if(a>>>=E,n-=E,g.have===0){t.msg="invalid bit length repeat",g.mode=kA;break}u=g.lens[g.have-1],l=3+(a&3),a>>>=2,n-=2}else if(m===17){for(S=E+3;n<S;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}a>>>=E,n-=E,u=0,l=3+(a&7),a>>>=3,n-=3}else{for(S=E+7;n<S;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}a>>>=E,n-=E,u=0,l=11+(a&127),a>>>=7,n-=7}if(g.have+l>g.nlen+g.ndist){t.msg="invalid bit length repeat",g.mode=kA;break}for(;l--;)g.lens[g.have++]=u}}if(g.mode===kA)break;if(g.lens[256]===0){t.msg="invalid code -- missing end-of-block",g.mode=kA;break}if(g.lenbits=9,R={bits:g.lenbits},Z=mC(Fa,g.lens,0,g.nlen,g.lencode,0,g.work,R),g.lenbits=R.bits,Z){t.msg="invalid literal/lengths set",g.mode=kA;break}if(g.distbits=6,g.distcode=g.distdyn,R={bits:g.distbits},Z=mC(Xa,g.lens,g.nlen,g.ndist,g.distcode,0,g.work,R),g.distbits=R.bits,Z){t.msg="invalid distances set",g.mode=kA;break}if(g.mode=he,A===ce)break A;case he:g.mode=me;case me:if(s>=6&&o>=258){t.next_out=i,t.avail_out=o,t.next_in=e,t.avail_in=s,g.hold=a,g.bits=n,Fm(t,d),i=t.next_out,C=t.output,o=t.avail_out,e=t.next_in,I=t.input,s=t.avail_in,a=g.hold,n=g.bits,g.mode===Yg&&(g.back=-1);break}for(g.back=0;h=g.lencode[a&(1<<g.lenbits)-1],E=h>>>24,b=h>>>16&255,m=h&65535,!(E<=n);){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if(b&&(b&240)===0){for(G=E,y=b,Q=m;h=g.lencode[Q+((a&(1<<G+y)-1)>>G)],E=h>>>24,b=h>>>16&255,m=h&65535,!(G+E<=n);){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}a>>>=G,n-=G,g.back+=G}if(a>>>=E,n-=E,g.back+=E,g.length=m,b===0){g.mode=Bo;break}if(b&32){g.back=-1,g.mode=Yg;break}if(b&64){t.msg="invalid literal/length code",g.mode=kA;break}g.extra=b&15,g.mode=so;case so:if(g.extra){for(S=g.extra;n<S;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}g.length+=a&(1<<g.extra)-1,a>>>=g.extra,n-=g.extra,g.back+=g.extra}g.was=g.length,g.mode=oo;case oo:for(;h=g.distcode[a&(1<<g.distbits)-1],E=h>>>24,b=h>>>16&255,m=h&65535,!(E<=n);){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if((b&240)===0){for(G=E,y=b,Q=m;h=g.distcode[Q+((a&(1<<G+y)-1)>>G)],E=h>>>24,b=h>>>16&255,m=h&65535,!(G+E<=n);){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}a>>>=G,n-=G,g.back+=G}if(a>>>=E,n-=E,g.back+=E,b&64){t.msg="invalid distance code",g.mode=kA;break}g.offset=m,g.extra=b&15,g.mode=ao;case ao:if(g.extra){for(S=g.extra;n<S;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}g.offset+=a&(1<<g.extra)-1,a>>>=g.extra,n-=g.extra,g.back+=g.extra}if(g.offset>g.dmax){t.msg="invalid distance too far back",g.mode=kA;break}g.mode=no;case no:if(o===0)break A;if(l=d-o,g.offset>l){if(l=g.offset-l,l>g.whave&&g.sane){t.msg="invalid distance too far back",g.mode=kA;break}l>g.wnext?(l-=g.wnext,r=g.wsize-l):r=g.wnext-l,l>g.length&&(l=g.length),c=g.window}else c=C,r=i-g.offset,l=g.length;l>o&&(l=o),o-=l,g.length-=l;do C[i++]=c[r++];while(--l);g.length===0&&(g.mode=me);break;case Bo:if(o===0)break A;C[i++]=g.length,o--,g.mode=me;break;case Yi:if(g.wrap){for(;n<32;){if(s===0)break A;s--,a|=I[e++]<<n,n+=8}if(d-=o,t.total_out+=d,g.total+=d,d&&(t.adler=g.check=g.flags?Ag(g.check,C,d,i-d):WC(g.check,C,d,i-d)),d=o,(g.flags?a:co(a))!==g.check){t.msg="incorrect data check",g.mode=kA;break}a=0,n=0}g.mode=lo;case lo:if(g.wrap&&g.flags){for(;n<32;){if(s===0)break A;s--,a+=I[e++]<<n,n+=8}if(a!==(g.total&4294967295)){t.msg="incorrect length check",g.mode=kA;break}a=0,n=0}g.mode=ro;case ro:Z=Dm;break A;case kA:Z=Ha;break A;case Ka:return Wa;case Lm:default:return Qg}return t.next_out=i,t.avail_out=o,t.next_in=e,t.avail_in=s,g.hold=a,g.bits=n,(g.wsize||d!==t.avail_out&&g.mode<kA&&(g.mode<Yi||A!==xs))&&Ma(t,t.output,t.next_out,d-t.avail_out),B-=t.avail_in,d-=t.avail_out,t.total_in+=B,t.total_out+=d,g.total+=d,g.wrap&&d&&(t.adler=g.check=g.flags?Ag(g.check,C,d,t.next_out-d):WC(g.check,C,d,t.next_out-d)),t.data_type=g.bits+(g.last?64:0)+(g.mode===Yg?128:0)+(g.mode===he||g.mode===Wi?256:0),(B===0&&d===0||A===xs)&&Z===uI&&(Z=Mm),Z},jm=t=>{if(!t||!t.state)return Qg;let A=t.state;return A.window&&(A.window=null),t.state=null,uI},qm=(t,A)=>{if(!t||!t.state)return Qg;const g=t.state;return(g.wrap&2)===0?Qg:(g.head=A,A.done=!1,uI)},$m=(t,A)=>{const g=A.length;let I,C,e;return!t||!t.state||(I=t.state,I.wrap!==0&&I.mode!==He)?Qg:I.mode===He&&(C=1,C=WC(C,A,g,0),C!==I.check)?Ha:(e=Ma(t,A,g,g),e?(I.mode=Ka,Wa):(I.havedict=1,uI))};var AG=Ja,gG=Da,IG=Na,CG=_m,eG=va,iG=Om,tG=jm,sG=qm,oG=$m,aG="pako inflate (from Nodeca project)",Ng={inflateReset:AG,inflateReset2:gG,inflateResetKeep:IG,inflateInit:CG,inflateInit2:eG,inflate:iG,inflateEnd:tG,inflateGetHeader:sG,inflateSetDictionary:oG,inflateInfo:aG};function nG(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var BG=nG;const La=Object.prototype.toString,{Z_NO_FLUSH:lG,Z_FINISH:dG,Z_OK:NC,Z_STREAM_END:Ji,Z_NEED_DICT:Di,Z_STREAM_ERROR:rG,Z_DATA_ERROR:mo,Z_MEM_ERROR:cG}=qC;function Ae(t){this.options=ai.assign({chunkSize:1024*64,windowBits:15,to:""},t||{});const A=this.options;A.raw&&A.windowBits>=0&&A.windowBits<16&&(A.windowBits=-A.windowBits,A.windowBits===0&&(A.windowBits=-15)),A.windowBits>=0&&A.windowBits<16&&!(t&&t.windowBits)&&(A.windowBits+=32),A.windowBits>15&&A.windowBits<48&&(A.windowBits&15)===0&&(A.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Sa,this.strm.avail_out=0;let g=Ng.inflateInit2(this.strm,A.windowBits);if(g!==NC)throw new Error(kI[g]);if(this.header=new BG,Ng.inflateGetHeader(this.strm,this.header),A.dictionary&&(typeof A.dictionary=="string"?A.dictionary=KC.string2buf(A.dictionary):La.call(A.dictionary)==="[object ArrayBuffer]"&&(A.dictionary=new Uint8Array(A.dictionary)),A.raw&&(g=Ng.inflateSetDictionary(this.strm,A.dictionary),g!==NC)))throw new Error(kI[g])}Ae.prototype.push=function(t,A){const g=this.strm,I=this.options.chunkSize,C=this.options.dictionary;let e,i,s;if(this.ended)return!1;for(A===~~A?i=A:i=A===!0?dG:lG,La.call(t)==="[object ArrayBuffer]"?g.input=new Uint8Array(t):g.input=t,g.next_in=0,g.avail_in=g.input.length;;){for(g.avail_out===0&&(g.output=new Uint8Array(I),g.next_out=0,g.avail_out=I),e=Ng.inflate(g,i),e===Di&&C&&(e=Ng.inflateSetDictionary(g,C),e===NC?e=Ng.inflate(g,i):e===mo&&(e=Di));g.avail_in>0&&e===Ji&&g.state.wrap>0&&t[g.next_in]!==0;)Ng.inflateReset(g),e=Ng.inflate(g,i);switch(e){case rG:case mo:case Di:case cG:return this.onEnd(e),this.ended=!0,!1}if(s=g.avail_out,g.next_out&&(g.avail_out===0||e===Ji))if(this.options.to==="string"){let o=KC.utf8border(g.output,g.next_out),a=g.next_out-o,n=KC.buf2string(g.output,o);g.next_out=a,g.avail_out=I-a,a&&g.output.set(g.output.subarray(o,o+a),0),this.onData(n)}else this.onData(g.output.length===g.next_out?g.output:g.output.subarray(0,g.next_out));if(!(e===NC&&s===0)){if(e===Ji)return e=Ng.inflateEnd(this.strm),this.onEnd(e),this.ended=!0,!0;if(g.avail_in===0)break}}return!0};Ae.prototype.onData=function(t){this.chunks.push(t)};Ae.prototype.onEnd=function(t){t===NC&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=ai.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};function Mt(t,A){const g=new Ae(A);if(g.push(t),g.err)throw g.msg||kI[g.err];return g.result}function hG(t,A){return A=A||{},A.raw=!0,Mt(t,A)}var mG=Ae,GG=Mt,EG=hG,QG=Mt,uG=qC,bG={Inflate:mG,inflate:GG,inflateRaw:EG,ungzip:QG,constants:uG};const{Inflate:yG,inflate:ZG,inflateRaw:f0,ungzip:w0}=bG;var RG=yG,fG=ZG;const vi=[137,80,78,71,13,10,26,10],Ua=[];for(let t=0;t<256;t++){let A=t;for(let g=0;g<8;g++)A&1?A=3988292384^A>>>1:A=A>>>1;Ua[t]=A}const Go=4294967295;function wG(t,A,g){let I=t;for(let C=0;C<g;C++)I=Ua[(I^A[C])&255]^I>>>8;return I}function VG(t,A){return(wG(Go,t,A)^Go)>>>0}var aI;(function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.GREYSCALE=0]="GREYSCALE",t[t.TRUECOLOUR=2]="TRUECOLOUR",t[t.INDEXED_COLOUR=3]="INDEXED_COLOUR",t[t.GREYSCALE_ALPHA=4]="GREYSCALE_ALPHA",t[t.TRUECOLOUR_ALPHA=6]="TRUECOLOUR_ALPHA"})(aI||(aI={}));var GC;(function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.DEFLATE=0]="DEFLATE"})(GC||(GC={}));var We;(function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.ADAPTIVE=0]="ADAPTIVE"})(We||(We={}));var Ye;(function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.NO_INTERLACE=0]="NO_INTERLACE",t[t.ADAM7=1]="ADAM7"})(Ye||(Ye={}));const SG=new Uint8Array(0),Eo="\0",pG=new Uint16Array([255]),FG=new Uint8Array(pG.buffer),XG=FG[0]===255;class HG extends Yt{constructor(A,g={}){super(A);const{checkCrc:I=!1}=g;this._checkCrc=I,this._inflator=new RG,this._png={width:-1,height:-1,channels:-1,data:new Uint8Array(0),depth:1,text:{}},this._end=!1,this._hasPalette=!1,this._palette=[],this._compressionMethod=GC.UNKNOWN,this._filterMethod=We.UNKNOWN,this._interlaceMethod=Ye.UNKNOWN,this._colorType=-1,this.setBigEndian()}decode(){for(this.decodeSignature();!this._end;)this.decodeChunk();return this.decodeImage(),this._png}decodeSignature(){for(let A=0;A<vi.length;A++)if(this.readUint8()!==vi[A])throw new Error(`wrong PNG signature. Byte at ${A} should be ${vi[A]}.`)}decodeChunk(){const A=this.readUint32(),g=this.readChars(4),I=this.offset;switch(g){case"IHDR":this.decodeIHDR();break;case"PLTE":this.decodePLTE(A);break;case"IDAT":this.decodeIDAT(A);break;case"IEND":this._end=!0;break;case"tRNS":this.decodetRNS(A);break;case"iCCP":this.decodeiCCP(A);break;case"tEXt":this.decodetEXt(A);break;case"pHYs":this.decodepHYs();break;default:this.skip(A);break}if(this.offset-I!==A)throw new Error(`Length mismatch while decoding chunk ${g}`);if(this._checkCrc){const C=this.readUint32(),e=A+4,i=VG(new Uint8Array(this.buffer,this.byteOffset+this.offset-e-4,e),e);if(i!==C)throw new Error(`CRC mismatch for chunk ${g}. Expected ${C}, found ${i}`)}else this.skip(4)}decodeIHDR(){const A=this._png;A.width=this.readUint32(),A.height=this.readUint32(),A.depth=MG(this.readUint8());const g=this.readUint8();this._colorType=g;let I;switch(g){case aI.GREYSCALE:I=1;break;case aI.TRUECOLOUR:I=3;break;case aI.INDEXED_COLOUR:I=1;break;case aI.GREYSCALE_ALPHA:I=2;break;case aI.TRUECOLOUR_ALPHA:I=4;break;default:throw new Error(`Unknown color type: ${g}`)}if(this._png.channels=I,this._compressionMethod=this.readUint8(),this._compressionMethod!==GC.DEFLATE)throw new Error(`Unsupported compression method: ${this._compressionMethod}`);this._filterMethod=this.readUint8(),this._interlaceMethod=this.readUint8()}decodePLTE(A){if(A%3!==0)throw new RangeError(`PLTE field length must be a multiple of 3. Got ${A}`);const g=A/3;this._hasPalette=!0;const I=[];this._palette=I;for(let C=0;C<g;C++)I.push([this.readUint8(),this.readUint8(),this.readUint8()])}decodeIDAT(A){this._inflator.push(new Uint8Array(this.buffer,this.offset+this.byteOffset,A)),this.skip(A)}decodetRNS(A){if(this._colorType===3){if(A>this._palette.length)throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${A} vs ${this._palette.length})`);let g=0;for(;g<A;g++){const I=this.readByte();this._palette[g].push(I)}for(;g<this._palette.length;g++)this._palette[g].push(255)}}decodeiCCP(A){let g="",I;for(;(I=this.readChar())!==Eo;)g+=I;const C=this.readUint8();if(C!==GC.DEFLATE)throw new Error(`Unsupported iCCP compression method: ${C}`);const e=this.readBytes(A-g.length-2);this._png.iccEmbeddedProfile={name:g,profile:fG(e)}}decodetEXt(A){let g="",I;for(;(I=this.readChar())!==Eo;)g+=I;this._png.text[g]=this.readChars(A-g.length-1)}decodepHYs(){const A=this.readUint32(),g=this.readUint32(),I=this.readByte();this._png.resolution={x:A,y:g,unit:I}}decodeImage(){if(this._inflator.err)throw new Error(`Error while decompressing the data: ${this._inflator.err}`);const A=this._inflator.result;if(this._filterMethod!==We.ADAPTIVE)throw new Error(`Filter method ${this._filterMethod} not supported`);if(this._interlaceMethod===Ye.NO_INTERLACE)this.decodeInterlaceNull(A);else throw new Error(`Interlace method ${this._interlaceMethod} not supported`)}decodeInterlaceNull(A){const g=this._png.height,I=this._png.channels*this._png.depth/8,C=this._png.width*I,e=new Uint8Array(this._png.height*C);let i=SG,s=0,o,a;for(let n=0;n<g;n++){switch(o=A.subarray(s+1,s+1+C),a=e.subarray(n*C,(n+1)*C),A[s]){case 0:WG(o,a,C);break;case 1:YG(o,a,C,I);break;case 2:KG(o,a,i,C);break;case 3:NG(o,a,i,C,I);break;case 4:JG(o,a,i,C,I);break;default:throw new Error(`Unsupported filter: ${A[s]}`)}i=a,s+=C+1}if(this._hasPalette&&(this._png.palette=this._palette),this._png.depth===16){const n=new Uint16Array(e.buffer);if(XG)for(let B=0;B<n.length;B++)n[B]=vG(n[B]);this._png.data=n}else this._png.data=e}}function WG(t,A,g){for(let I=0;I<g;I++)A[I]=t[I]}function YG(t,A,g,I){let C=0;for(;C<I;C++)A[C]=t[C];for(;C<g;C++)A[C]=t[C]+A[C-I]&255}function KG(t,A,g,I){let C=0;if(g.length===0)for(;C<I;C++)A[C]=t[C];else for(;C<I;C++)A[C]=t[C]+g[C]&255}function NG(t,A,g,I,C){let e=0;if(g.length===0){for(;e<C;e++)A[e]=t[e];for(;e<I;e++)A[e]=t[e]+(A[e-C]>>1)&255}else{for(;e<C;e++)A[e]=t[e]+(g[e]>>1)&255;for(;e<I;e++)A[e]=t[e]+(A[e-C]+g[e]>>1)&255}}function JG(t,A,g,I,C){let e=0;if(g.length===0){for(;e<C;e++)A[e]=t[e];for(;e<I;e++)A[e]=t[e]+A[e-C]&255}else{for(;e<C;e++)A[e]=t[e]+g[e]&255;for(;e<I;e++)A[e]=t[e]+DG(A[e-C],g[e],g[e-C])&255}}function DG(t,A,g){const I=t+A-g,C=Math.abs(I-t),e=Math.abs(I-A),i=Math.abs(I-g);return C<=e&&C<=i?t:e<=i?A:g}function vG(t){return(t&255)<<8|t>>8&255}function MG(t){if(t!==1&&t!==2&&t!==4&&t!==8&&t!==16)throw new Error(`invalid bit depth: ${t}`);return t}var Qo;(function(t){t[t.UNKNOWN=0]="UNKNOWN",t[t.METRE=1]="METRE"})(Qo||(Qo={}));function LG(t,A){return new HG(t,A).decode()}var UG={name:"@zeainc/gltf-loader",libraryName:"GLTFLoader",author:"Philip Taylor",description:"A plugin to load GLTF files in Zea Engine.",version:"4.0.7",license:"MIT",main:"dist/index.cjs.js",module:"dist/index.esm.js",browser:"dist/index.umd.js",files:["dist/"],keywords:["WebGL","ES6","Zea","GLTF","Draco"],repository:{type:"git",url:"https://github.com/ZeaInc/gltf-loader"},scripts:{build:"rollup -c","build:watch":"rollup -w -c",dev:"npm-run-all --parallel build:watch start:watch",dist:"yarn publish --access=public",generate:"plop",prepare:"yarn run build",release:"standard-version",start:"es-dev-server","start:watch":"es-dev-server --app-index testing-e2e/index.html --open --watch","test:e2e":"percy exec cypress run --browser chrome --headless","test:e2e:watch":"percy exec cypress open"},devDependencies:{"@percy/cypress":"^2.3.2","@rollup/plugin-json":"^4.1.0","@zeainc/zea-engine":"^4",cypress:"^5.4.0","es-dev-server":"^1.57.8",eslint:"^6.5.1","eslint-config-google":"^0.14.0","eslint-config-prettier":"^6.3.0","eslint-plugin-prettier":"^3.1.1","npm-run-all":"^4.1.5",plop:"^2.7.4",prettier:"^2.1.1",rollup:"^2.2.0","rollup-plugin-terser":"^5.3.0","rollup-plugin-web-worker-loader":"^0.9.0","standard-version":"^9.0.0",yargs:"12.0.2"},dependencies:{"fast-png":"^6.1.0","jpeg-js":"^0.4.3"}};const eA={BYTE:5120,UNSIGNED_BYTE:5121,SHORT:5122,UNSIGNED_SHORT:5123,INT:5124,UNSIGNED_INT:5125,FLOAT:5126};function ka(t,A,g){let I=new glMatrix.ARRAY_TYPE(g);for(let C=0;C<g;++C)I[C]=t[A+C];return I}function ni(t,A,g){for(const I of Object.keys(t)){const C=t[I];if(C!=null&&typeof a_string!="string"&&(C.initGl!==void 0&&C.initGl(A,g),Array.isArray(C)))for(const e of C)e!=null&&e.initGl!==void 0&&e.initGl(A,g)}}function qA(t,A){if(t===void 0)return[];const g=[];for(const I of t)g.push(xa(I,A));return g}function xa(t,A){const g=new A;return g.fromJson(t),g}function JC(t,A,g=[]){for(let I of Object.keys(t))(!g||g.find(function(C){return C==I})===void 0)&&A[I]!==void 0&&(t[I.replace("^@","")]=A[I])}function Mi(t,A,g){return Math.min(Math.max(t,A),g)}function kG(t){return function(A){const g=A.toLowerCase().split(".");if(g.length!=1)return g[g.length-1]}(t)=="glb"}function Ta(t){return t.substring(0,t.lastIndexOf("/")+1)}class jA{constructor(){this.extensions=void 0,this.extras=void 0}fromJson(A){JC(this,A)}initGl(A,g){ni(this,A,g)}}class Ke extends jA{constructor(){super(),this.bufferView=void 0,this.byteOffset=0,this.componentType=void 0,this.normalized=!1,this.count=void 0,this.type=void 0,this.max=void 0,this.min=void 0,this.sparse=void 0,this.name=void 0,this.glBuffer=void 0,this.typedView=void 0,this.filteredView=void 0,this.normalizedFilteredView=void 0,this.normalizedTypedView=void 0}getTypedView(A){if(this.typedView!==void 0)return this.typedView;if(this.bufferView!==void 0){const g=A.bufferViews[this.bufferView],I=A.buffers[g.buffer],C=this.byteOffset+g.byteOffset,e=this.getComponentSize(this.componentType);let i=this.getComponentCount(this.type),s=0;switch(g.byteStride!==0?e!==0?s=g.byteStride/e*(this.count-1)+i:console.warn("Invalid component type in accessor '"+(this.name?this.name:"")+"'"):s=this.count*i,s*e>I.buffer.byteLength-C&&(s=(I.buffer.byteLength-C)/e,console.warn("Count in accessor '"+(this.name?this.name:"")+"' is too large.")),this.componentType){case eA.BYTE:this.typedView=new Int8Array(I.buffer,C,s);break;case eA.UNSIGNED_BYTE:this.typedView=new Uint8Array(I.buffer,C,s);break;case eA.SHORT:this.typedView=new Int16Array(I.buffer,C,s);break;case eA.UNSIGNED_SHORT:this.typedView=new Uint16Array(I.buffer,C,s);break;case eA.UNSIGNED_INT:this.typedView=new Uint32Array(I.buffer,C,s);break;case eA.FLOAT:this.typedView=new Float32Array(I.buffer,C,s)}}return this.typedView===void 0?console.warn("Failed to convert buffer view to typed view!: "+this.bufferView):this.sparse!==void 0&&this.applySparse(A,this.typedView),this.typedView}getNormalizedTypedView(A){if(this.normalizedTypedView!==void 0)return this.normalizedTypedView;const g=this.getTypedView(A);return this.normalizedTypedView=this.normalized?Ke.dequantize(g,this.componentType):g,this.normalizedTypedView}getDeinterlacedView(A){if(this.filteredView!==void 0)return this.filteredView;if(this.bufferView!==void 0){const g=A.bufferViews[this.bufferView],I=A.buffers[g.buffer],C=this.byteOffset+g.byteOffset,e=this.getComponentSize(this.componentType),i=this.getComponentCount(this.type),s=this.count*i;let o=g.byteStride!==0?g.byteStride:i*e;const a=I.buffer.byteLength-C;let n=new DataView(I.buffer,C,Math.min(a,this.count*o)),B=n.getFloat32.bind(n);switch(this.componentType){case eA.BYTE:this.filteredView=new Int8Array(s),B=n.getInt8.bind(n);break;case eA.UNSIGNED_BYTE:this.filteredView=new Uint8Array(s),B=n.getUint8.bind(n);break;case eA.SHORT:this.filteredView=new Int16Array(s),B=n.getInt16.bind(n);break;case eA.UNSIGNED_SHORT:this.filteredView=new Uint16Array(s),B=n.getUint16.bind(n);break;case eA.UNSIGNED_INT:this.filteredView=new Uint32Array(s),B=n.getUint32.bind(n);break;case eA.FLOAT:this.filteredView=new Float32Array(s),B=n.getFloat32.bind(n)}for(let d=0;d<s;++d){let l=Math.floor(d/i)*o+d%i*e;this.filteredView[d]=B(l,!0)}}return this.filteredView===void 0?console.warn("Failed to convert buffer view to filtered view!: "+this.bufferView):this.sparse!==void 0&&this.applySparse(A,this.filteredView),this.filteredView}getNormalizedDeinterlacedView(A){if(this.normalizedFilteredView!==void 0)return this.normalizedFilteredView;const g=this.getDeinterlacedView(A);return this.normalizedFilteredView=this.normalized?Ke.dequantize(g,this.componentType):g,this.normalizedFilteredView}applySparse(A,g){const I=A.bufferViews[this.sparse.indices.bufferView],C=A.buffers[I.buffer],e=this.sparse.indices.byteOffset+I.byteOffset,i=this.getComponentSize(this.sparse.indices.componentType);let s=1;I.byteStride!==0&&(s=I.byteStride/i);const o=this.sparse.count*s;let a;switch(this.sparse.indices.componentType){case eA.UNSIGNED_BYTE:a=new Uint8Array(C.buffer,e,o);break;case eA.UNSIGNED_SHORT:a=new Uint16Array(C.buffer,e,o);break;case eA.UNSIGNED_INT:a=new Uint32Array(C.buffer,e,o)}const n=A.bufferViews[this.sparse.values.bufferView],B=A.buffers[n.buffer],d=this.sparse.values.byteOffset+n.byteOffset,l=this.getComponentSize(this.componentType);let r=this.getComponentCount(this.type);n.byteStride!==0&&(r=n.byteStride/l);const c=this.sparse.count*r;let h;switch(this.componentType){case eA.BYTE:h=new Int8Array(B.buffer,d,c);break;case eA.UNSIGNED_BYTE:h=new Uint8Array(B.buffer,d,c);break;case eA.SHORT:h=new Int16Array(B.buffer,d,c);break;case eA.UNSIGNED_SHORT:h=new Uint16Array(B.buffer,d,c);break;case eA.UNSIGNED_INT:h=new Uint32Array(B.buffer,d,c);break;case eA.FLOAT:h=new Float32Array(B.buffer,d,c)}for(let E=0;E<this.sparse.count;++E)for(let b=0;b<r;++b)g[a[E]*r+b]=h[E*r+b]}static dequantize(A,g){switch(g){case eA.BYTE:return new Float32Array(A).map(I=>Math.max(I/127,-1));case eA.UNSIGNED_BYTE:return new Float32Array(A).map(I=>I/255);case eA.SHORT:return new Float32Array(A).map(I=>Math.max(I/32767,-1));case eA.UNSIGNED_SHORT:return new Float32Array(A).map(I=>I/65535);default:return A}}getComponentCount(A){return xG.get(A)}getComponentSize(A){switch(A){case eA.BYTE:case eA.UNSIGNED_BYTE:return 1;case eA.SHORT:case eA.UNSIGNED_SHORT:return 2;case eA.UNSIGNED_INT:case eA.FLOAT:return 4;default:return 0}}destroy(){this.glBuffer!==void 0&&WebGl.context.deleteBuffer(this.glBuffer),this.glBuffer=void 0}}const xG=new Map([["SCALAR",1],["VEC2",2],["VEC3",3],["VEC4",4],["MAT2",4],["MAT3",9],["MAT4",16]]);class za extends jA{constructor(){super(),this.uri=void 0,this.byteLength=void 0,this.name=void 0,this.buffer=void 0}load(A,g){if(this.buffer!==void 0)return void console.error("buffer has already been loaded");const I=this;return new Promise(function(C){I.setBufferFromFiles(g,C)||I.setBufferFromUri(A,C)||(console.error("Was not able to resolve buffer with uri '%s'",I.uri),C())})}setBufferFromUri(A,g){if(this.uri===void 0)return!1;const I=this;return this.uri.startsWith("data:application")?AA.loadFile("binary",this.uri).then(function(C){I.buffer=C,g()}):AA.loadFile("binary",Ta(A.path)+this.uri).then(function(C){I.buffer=C,g()}),!0}setBufferFromFiles(A,g){if(this.uri===void 0||A===void 0)return!1;const I=A.find(function(i){if(i.name===this.uri||i.fullPath===this.uri)return!0},this);if(I===void 0)return!1;const C=this,e=new FileReader;return e.onloadend=function(i){C.buffer=i.target.result,g()},e.readAsArrayBuffer(I),!0}}class _a extends jA{constructor(){super(),this.buffer=void 0,this.byteOffset=0,this.byteLength=void 0,this.byteStride=0,this.target=void 0,this.name=void 0}}class Lt extends jA{constructor(A="perspective",g=.01,I=1/0,C=45*Math.PI/180,e,i=1,s=1,o,a){super(),this.type=A,this.znear=g,this.zfar=I,this.yfov=C,this.xmag=i,this.ymag=s,this.aspectRatio=e,this.name=o,this.node=a}initGl(A,g){super.initGl(A,g);let I;for(let C=0;C<A.nodes.length;C++)if(I=A.nodes[C].camera,I!==void 0&&A.cameras[I]===this){this.node=C;break}this.node===void 0&&I!==void 0&&console.error("Invalid node for camera "+I)}fromJson(A){this.name=name,A.perspective!==void 0?(this.type="perspective",JC(this,A.perspective)):A.orthographic!==void 0&&(this.type="orthographic",JC(this,A.orthographic))}sortPrimitivesByDepth(A,g){for(const I of g){const C=mat4.create();mat4.multiply(C,this.getViewMatrix(A),I.node.worldTransform);const e=vec3.transformMat4(vec3.create(),vec3.clone(I.primitive.centroid),C);I.depth=e[2]}return g.filter(I=>I.depth<=0).sort((I,C)=>I.depth-C.depth)}getProjectionMatrix(){const A=mat4.create();return this.type==="perspective"?mat4.perspective(A,this.yfov,this.aspectRatio,this.znear,this.zfar):this.type==="orthographic"&&(A[0]=1/this.xmag,A[5]=1/this.ymag,A[10]=2/(this.znear-this.zfar),A[14]=(this.zfar+this.znear)/(this.znear-this.zfar)),A}getViewMatrix(A){const g=mat4.create(),I=this.getPosition(A),C=this.getTarget(A);return mat4.lookAt(g,I,C,vec3.fromValues(0,1,0)),g}getTarget(A){const g=vec3.create(),I=this.getPosition(A),C=this.getLookDirection(A);return vec3.add(g,C,I),g}getPosition(A){const g=vec3.create(),I=this.getNode(A);return mat4.getTranslation(g,I.worldTransform),g}getLookDirection(A){const g=vec3.create(),I=this.getRotation(A);return vec3.transformQuat(g,vec3.fromValues(0,0,-1),I),g}getRotation(A){const g=quat.create(),I=this.getNode(A);return mat4.getRotation(g,I.worldTransform),g}clone(){return new Lt(this.type,this.znear,this.zfar,this.yfov,this.aspectRatio,this.xmag,this.ymag,this.name,this.node)}getNode(A){return A.nodes[this.node]}getTransformMatrix(A){const g=this.getNode(A);return g!==void 0&&g.worldTransform!==void 0?g.worldTransform:mat4.create()}getDescription(A){const g={type:this.type};this.name!==void 0&&(g.name=this.name),this.type==="perspective"?(g.perspective={},this.aspectRatio!==void 0&&(g.perspective.aspectRatio=this.aspectRatio),g.perspective.yfov=this.yfov,this.zfar!=1/0&&(g.perspective.zfar=this.zfar),g.perspective.znear=this.znear):this.type==="orthographic"&&(g.orthographic={},g.orthographic.xmag=this.xmag,g.orthographic.ymag=this.ymag,g.orthographic.zfar=this.zfar,g.orthographic.znear=this.znear);const I=this.getTransformMatrix(A),C={camera:0,matrix:[I[0],I[1],I[2],I[3],I[4],I[5],I[6],I[7],I[8],I[9],I[10],I[11],I[12],I[13],I[14],I[15]]};return this.nodeIndex!==void 0&&A.nodes[this.nodeIndex].name!==void 0&&(C.name=A.nodes[this.nodeIndex].name),{asset:{generator:"gltf-sample-viewer",version:"2.0"},cameras:[g],nodes:[C]}}}class Pa{static async readAsArrayBuffer(A){return new Promise((g,I)=>{const C=new FileReader;C.onload=()=>g(C.result),C.onerror=I,C.readAsArrayBuffer(A)})}static async readAsText(A){return new Promise((g,I)=>{const C=new FileReader;C.onload=()=>g(C.result),C.onerror=I,C.readAsText(A)})}static async readAsDataURL(A){return new Promise((g,I)=>{const C=new FileReader;C.onload=()=>g(C.result),C.onerror=I,C.readAsDataURL(A)})}}const BC="image/jpeg",Ge="image/png",uo="image/ktx2",TG="image/texture";class EC extends jA{constructor(A,g=eA.TEXTURE_2D,I=0,C,e,i=BC,s){super(),this.uri=A,this.bufferView=C,this.mimeType=i,this.image=s,this.name=e,this.type=g,this.miplevel=I}fromJson(A){super.fromJson(A)}resolveRelativePath(A){(typeof this.uri=="string"||this.uri instanceof String)&&(this.uri.startsWith("./")&&(this.uri=this.uri.substr(2)),this.uri=A+this.uri)}async load(A,g){this.image===void 0?await this.setImageFromBufferView(A)||await this.setImageFromFiles(g,A)||await this.setImageFromUri(A)||console.error("Was not able to resolve image with uri '%s'",this.uri):this.mimeType!==TG&&console.error("image has already been loaded")}static loadHTMLImage(A){return new Promise((g,I)=>{const C=new II(this.name);C.load(A).then(()=>{g(C)},()=>{I()})})}async setImageFromUri(A){return this.uri!==void 0&&(typeof Image=="undefined"||this.mimeType!==BC&&this.mimeType!==Ge?(console.error("Unsupported image type "+this.mimeType),!1):(this.zeaImage=await EC.loadHTMLImage(this.uri).catch(g=>{console.error(g)}),!0))}async setImageFromBufferView(A){const g=A.bufferViews[this.bufferView];if(g===void 0)return!1;const I=A.buffers[g.buffer].buffer,C=new Uint8Array(I,g.byteOffset,g.byteLength);if(this.mimeType===uo)A.ktxDecoder!==void 0?this.image=await A.ktxDecoder.loadKtxFromBuffer(C):console.warn("Loading of ktx images failed: KtxDecoder not initalized");else if(typeof Image=="undefined"||this.mimeType!==BC&&this.mimeType!==Ge)if(this.mimeType===BC)this.image=Mc.decode(C,{useTArray:!0});else{if(this.mimeType!==Ge)return console.error("Unsupported image type "+this.mimeType),!1;this.image=LG(C)}else{const e=new Blob([C],{type:this.mimeType}),i=URL.createObjectURL(e);this.image=await EC.loadHTMLImage(i).catch(()=>{console.error("Could not load image from buffer view")})}return!0}async setImageFromFiles(A,g){if(this.uri===void 0||A===void 0)return!1;let I=A.find(function(C){const e=this.uri.split("\\").pop().split("/").pop();if(C.name===e)return!0},this);if(I===void 0)return!1;if(this.mimeType===uo)if(g.ktxDecoder!==void 0){const C=new Uint8Array(await I.arrayBuffer());this.image=await g.ktxDecoder.loadKtxFromBuffer(C)}else console.warn("Loading of ktx images failed: KtxDecoder not initalized");else{if(typeof Image=="undefined"||this.mimeType!==BC&&this.mimeType!==Ge)return console.error("Unsupported image type "+this.mimeType),!1;{const C=await Pa.readAsDataURL(I).catch(()=>{console.error("Could not load image with FileReader")});this.image=await EC.loadHTMLImage(C).catch(()=>{console.error("Could not create image from FileReader image data")})}}return!0}}class zG extends jA{constructor(A="directional",g=[1,1,1],I=1,C=0,e=Math.PI/4,i=-1,s,o){super(),this.type=A,this.color=g,this.intensity=I,this.innerConeAngle=C,this.outerConeAngle=e,this.range=i,this.name=s,this.node=o,this.direction=void 0}initGl(A,g){super.initGl(A,g);for(let I=0;I<A.nodes.length;I++){const C=A.nodes[I].extensions;if(C===void 0)continue;const e=C.KHR_lights_punctual;if(e===void 0)continue;const i=e.light;if(A.lights[i]===this){this.node=I;break}}}fromJson(A){super.fromJson(A),A.spot!==void 0&&JC(this,A.spot)}toUniform(A){const g=new OG;if(this.node!==void 0){const i=A.nodes[this.node].worldTransform;var I=vec3.fromValues(1,1,1);mat4.getScaling(I,i);const s=mat4.create();for(const a of[0,1,2])s[a]=i[a]/I[0],s[a+4]=i[a+4]/I[1],s[a+8]=i[a+8]/I[2];var C=quat.create();mat4.getRotation(C,s),quat.normalize(C,C);const o=vec3.fromValues(0,0,-1);vec3.transformQuat(g.direction,o,C);var e=vec3.fromValues(0,0,0);mat4.getTranslation(e,i),g.position=e}switch(this.direction!==void 0&&(g.direction=this.direction),g.range=this.range,g.color=this.color,g.intensity=this.intensity,g.innerConeCos=Math.cos(this.innerConeAngle),g.outerConeCos=Math.cos(this.outerConeAngle),this.type){case"spot":g.type=PG;break;case"point":g.type=_G;break;case"directional":default:g.type=Oa}return g}}const Oa=0,_G=1,PG=2;class OG extends class{}{constructor(){super();const A=vec3.fromValues(-.7399,-.6428,-.1983);this.direction=A,this.range=-1,this.color=[1,1,1],this.intensity=1,this.position=[0,0,0],this.innerConeCos=0,this.outerConeCos=Math.PI/4,this.type=Oa,this.padding1=0,this.padding2=0}}class jG extends jA{constructor(){super(),this.rotation=[0,0,0,1],this.brightnessFactor=1,this.brightnessOffset=0,this.specularEnvironmentTexture=void 0,this.diffuseEnvironmentTexture=void 0,this.sheenEnvironmentTexture=void 0,this.levelCount=1}fromJson(A){super.fromJson(A),A.extensions!==void 0&&this.fromJsonExtensions(A.extensions)}fromJsonExtensions(A){A.KHR_materials_sheen!==void 0&&(this.sheenEnvironmentTexture=A.KHR_materials_sheen.sheenEnvironmentTexture)}initGl(A,g){if(this.diffuseEnvironmentTexture!==void 0&&(A.textures[this.diffuseEnvironmentTexture].type=eA.TEXTURE_CUBE_MAP),this.specularEnvironmentTexture!==void 0){const I=A.textures[this.specularEnvironmentTexture];I.type=eA.TEXTURE_CUBE_MAP;const C=A.images[I.source];this.levelCount=C.image.levelCount}if(this.sheenEnvironmentTexture!==void 0){const I=A.textures[this.sheenEnvironmentTexture];I.type=eA.TEXTURE_CUBE_MAP;const C=A.images[I.source];this.levelCount!==C.image.levelCount&&console.error("Specular and sheen do not have same level count")}}}class qG extends jA{constructor(A,g,I=eA.TEXTURE_2D){super(),this.sampler=A,this.source=g,this.glTexture=void 0,this.type=I,this.initialized=!1,this.mipLevelCount=0}initGl(A,g){this.sampler===void 0&&(this.sampler=A.samplers.length-1),ni(this,A,g)}fromJson(A){super.fromJson(A),A.extensions!==void 0&&A.extensions.KHR_texture_basisu!==void 0&&A.extensions.KHR_texture_basisu.source!==void 0&&(this.source=A.extensions.KHR_texture_basisu.source)}destroy(){}}class tg{constructor(A,g=0,I=!0,C="",e=!0){this.index=A,this.texCoord=g,this.linear=I,this.samplerName=C,this.strength=1,this.scale=1,this.generateMips=e,this.extensions=void 0}initGl(A,g){ni(this,A,g)}fromJson(A){JC(this,A)}}class Ne extends jA{constructor(){super(),this.name=void 0,this.pbrMetallicRoughness=void 0,this.normalTexture=void 0,this.occlusionTexture=void 0,this.emissiveTexture=void 0,this.emissiveFactor=[0,0,0],this.alphaMode="OPAQUE",this.alphaCutoff=.5,this.doubleSided=!1,this.hasClearcoat=!1,this.hasSheen=!1,this.hasTransmission=!1,this.hasIOR=!1,this.hasVolume=!1,this.type="unlit",this.textures=[],this.properties=new Map,this.defines=[]}static createDefault(){const A=new Ne;A.type="MR",A.name="Default Material",A.defines.push("MATERIAL_METALLICROUGHNESS 1");const g=new cA(1,1,1,1);return A.properties.set("u_BaseColorFactor",g),A.properties.set("u_MetallicFactor",1),A.properties.set("u_RoughnessFactor",1),A}getShaderIdentifier(){switch(this.type){default:case"SG":case"MR":return"pbr.frag"}}getDefines(A){const g=Array.from(this.defines);return this.hasClearcoat&&A.enabledExtensions.KHR_materials_clearcoat&&g.push("MATERIAL_CLEARCOAT 1"),this.hasSheen&&A.enabledExtensions.KHR_materials_sheen&&g.push("MATERIAL_SHEEN 1"),this.hasTransmission&&A.enabledExtensions.KHR_materials_transmission&&g.push("MATERIAL_TRANSMISSION 1"),this.hasVolume&&A.enabledExtensions.KHR_materials_volume&&g.push("MATERIAL_VOLUME 1"),this.hasIOR&&A.enabledExtensions.KHR_materials_ior&&g.push("MATERIAL_IOR 1"),this.hasSpecular&&A.enabledExtensions.KHR_materials_specular&&g.push("MATERIAL_SPECULAR 1"),g}getProperties(){return this.properties}getTextures(){return this.textures}parseTextureInfoExtensions(A,g){if(A.extensions!==void 0&&A.extensions.KHR_texture_transform!==void 0){const I=A.extensions.KHR_texture_transform;I.texCoord!==void 0&&(A.texCoord=I.texCoord);let C=new sg,e=new sg,i=new sg;if(I.rotation!==void 0){const o=Math.sin(I.rotation),a=Math.cos(I.rotation);C=new sg([a,o,0,-o,a,0,0,0,1])}I.scale!==void 0&&(e=new sg([I.scale[0],0,0,0,I.scale[1],0,0,0,1])),I.offset!==void 0&&(i=new sg([1,0,I.offset[0],0,1,I.offset[1],0,0,1]));const s=C.multiply(e);s.multiplyInPlace(i),this.defines.push("HAS_"+g.toUpperCase()+"_UV_TRANSFORM 1"),this.properties.set("u_"+g+"UVTransform",s)}}initGl(A,g){this.zeaMaterial=new wA(this.name,"StandardSurfaceShader");const I=(C,e)=>{const i=A.textures[C.index],s=A.samplers[i.sampler],o=A.images[i.source];o.zeaImage.wrapS=s.wrapS,o.zeaImage.wrapT=s.wrapT,e.setImage(o.zeaImage)};if(this.normalTexture!==void 0&&I(this.normalTexture,this.zeaMaterial.getParameter("Normal")),this.occlusionTexture!==void 0&&I(this.occlusionTexture,this.zeaMaterial.getParameter("AmbientOcclusion")),this.properties.set("u_EmissiveFactor",this.emissiveFactor),this.emissiveTexture!==void 0&&I(this.emissiveTexture,this.zeaMaterial.getParameter("EmissiveStrength")),this.baseColorTexture!==void 0&&I(this.baseColorTexture,this.zeaMaterial.getParameter("BaseColor")),this.metallicRoughnessTexture!==void 0&&I(this.metallicRoughnessTexture,this.zeaMaterial.getParameter("Metallic")),this.diffuseTexture!==void 0&&I(this.diffuseTexture,this.zeaMaterial.getParameter("BaseColor")),this.specularGlossinessTexture!==void 0&&I(this.specularGlossinessTexture,this.zeaMaterial.getParameter("Reflectance")),this.alphaMode==="MASK"?(this.defines.push("ALPHAMODE_MASK 1"),this.properties.set("u_AlphaCutoff",this.alphaCutoff)):this.alphaMode==="OPAQUE"&&this.defines.push("ALPHAMODE_OPAQUE 1"),this.pbrMetallicRoughness!==void 0&&this.type!=="SG"){this.defines.push("MATERIAL_METALLICROUGHNESS 1");let C=new W(1,1,1,1),e=1,i=1;this.pbrMetallicRoughness.baseColorFactor!==void 0&&C.set(...this.pbrMetallicRoughness.baseColorFactor),this.pbrMetallicRoughness.metallicFactor!==void 0&&(e=this.pbrMetallicRoughness.metallicFactor),this.pbrMetallicRoughness.roughnessFactor!==void 0&&(i=this.pbrMetallicRoughness.roughnessFactor),this.properties.set("u_BaseColorFactor",C),this.properties.set("u_MetallicFactor",e),this.properties.set("u_RoughnessFactor",i),this.zeaMaterial.getParameter("BaseColor").setValue(C),this.zeaMaterial.getParameter("Metallic").setValue(e),this.zeaMaterial.getParameter("Roughness").setValue(i)}if(this.extensions!==void 0&&(this.extensions.KHR_materials_unlit!==void 0&&this.defines.push("MATERIAL_UNLIT 1"),this.extensions.KHR_materials_pbrSpecularGlossiness!==void 0)){this.defines.push("MATERIAL_SPECULARGLOSSINESS 1");let C=new W(1,1,1,1),e=new f(1,1,1),i=1;this.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor!==void 0&&(C=this.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor),this.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor!==void 0&&(e=this.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor),this.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor!==void 0&&(i=this.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor),this.properties.set("u_DiffuseFactor",C),this.properties.set("u_SpecularFactor",e),this.properties.set("u_GlossinessFactor",i)}ni(this,A,g)}fromJson(A){if(super.fromJson(A),A.emissiveFactor!==void 0&&(this.emissiveFactor=A.emissiveFactor),A.normalTexture!==void 0){const g=new tg;g.fromJson(A.normalTexture),this.normalTexture=g}if(A.occlusionTexture!==void 0){const g=new tg;g.fromJson(A.occlusionTexture),this.occlusionTexture=g}if(A.emissiveTexture!==void 0){const g=new tg(void 0,0,!1);g.fromJson(A.emissiveTexture),this.emissiveTexture=g}A.extensions!==void 0&&this.fromJsonMaterialExtensions(A.extensions),A.pbrMetallicRoughness!==void 0&&this.type!=="SG"&&(this.type="MR",this.fromJsonMetallicRoughness(A.pbrMetallicRoughness))}fromJsonMaterialExtensions(A){A.KHR_materials_pbrSpecularGlossiness!==void 0&&(this.type="SG",this.fromJsonSpecularGlossiness(A.KHR_materials_pbrSpecularGlossiness)),A.KHR_materials_unlit!==void 0&&(this.type="unlit"),A.KHR_materials_clearcoat!==void 0&&this.fromJsonClearcoat(A.KHR_materials_clearcoat),A.KHR_materials_sheen!==void 0&&this.fromJsonSheen(A.KHR_materials_sheen),A.KHR_materials_transmission!==void 0&&this.fromJsonTransmission(A.KHR_materials_transmission),A.KHR_materials_specular!==void 0&&this.fromJsonSpecular(A.KHR_materials_specular),A.KHR_materials_volume!==void 0&&this.fromJsonVolume(A.KHR_materials_volume)}fromJsonMetallicRoughness(A){if(A.baseColorTexture!==void 0){const g=new tg(void 0,0,!1);g.fromJson(A.baseColorTexture),this.baseColorTexture=g}if(A.metallicRoughnessTexture!==void 0){const g=new tg;g.fromJson(A.metallicRoughnessTexture),this.metallicRoughnessTexture=g}}fromJsonSpecularGlossiness(A){if(A.diffuseTexture!==void 0){const g=new tg(void 0,0,!1);g.fromJson(A.diffuseTexture),this.diffuseTexture=g}if(A.specularGlossinessTexture!==void 0){const g=new tg(void 0,0,!1);g.fromJson(A.specularGlossinessTexture),this.specularGlossinessTexture=g}}fromJsonClearcoat(A){if(A.clearcoatTexture!==void 0){const g=new tg;g.fromJson(A.clearcoatTexture),this.clearcoatTexture=g}if(A.clearcoatRoughnessTexture!==void 0){const g=new tg;g.fromJson(A.clearcoatRoughnessTexture),this.clearcoatRoughnessTexture=g}if(A.clearcoatNormalTexture!==void 0){const g=new tg;g.fromJson(A.clearcoatNormalTexture),this.clearcoatNormalTexture=g}}fromJsonSheen(A){if(A.sheenColorTexture!==void 0){const g=new tg(void 0,0,!1);g.fromJson(A.sheenColorTexture),this.sheenColorTexture=g}if(A.sheenRoughnessTexture!==void 0){const g=new tg;g.fromJson(A.sheenRoughnessTexture),this.sheenRoughnessTexture=g}}fromJsonTransmission(A){if(A.transmissionTexture!==void 0){const g=new tg;g.fromJson(A.transmissionTexture),this.transmissionTexture=g}}fromJsonSpecular(A){if(A.specularTexture!==void 0){const g=new tg;g.fromJson(A.specularTexture),this.specularTexture=g}if(A.specularTexture!==void 0){const g=new tg;g.fromJson(A.specularTexture),this.specularTexture=g}}fromJsonVolume(A){if(A.thicknessTexture!==void 0){const g=new tg;g.fromJson(A.thicknessTexture),this.thicknessTexture=g}}}class Jg{constructor(A){if(!Jg.instance&&A===void 0){if(DracoDecoderModule===void 0)return void console.error("Failed to initalize DracoDecoder: draco library undefined");A=DracoDecoderModule}return Jg.instance||(Jg.instance=this,this.module=null,this.initializingPromise=new Promise(g=>{let I={};I.onModuleLoaded=C=>{this.module=C,g()},A(I)})),Jg.instance}async ready(){await this.initializingPromise,Object.freeze(Jg.instance)}}class $G extends jA{constructor(){super(),this.attributes=[],this.targets=[],this.indices=void 0,this.material=void 0,this.mode="TRIANGLES",this.glAttributes=[],this.defines=[],this.skip=!0,this.hasWeights=!1,this.hasJoints=!1,this.hasNormals=!1,this.hasTangents=!1,this.hasTexcoord=!1,this.hasColor=!1,this.centroid=void 0}initGl(A,g){if(this.material===void 0&&(this.material=A.materials.length-1),this.extensions!==void 0&&this.extensions.KHR_draco_mesh_compression!==void 0){const o=new Jg;if(o!==void 0&&Object.isFrozen(o)){let a=this.decodeDracoBufferToIntermediate(this.extensions.KHR_draco_mesh_compression,A);this.copyDataFromDecodedGeometry(A,a,this.attributes)}else console.warn("Failed to load draco compressed mesh: DracoDecoder not initialized")}for(const o of Object.keys(this.attributes)){const a=this.attributes[o];switch(o){case"POSITION":this.skip=!1,this.glAttributes.push({attribute:o,name:"a_Position",accessor:a});break;case"NORMAL":this.hasNormals=!0,this.defines.push("HAS_NORMALS 1"),this.glAttributes.push({attribute:o,name:"a_Normal",accessor:a});break;case"TANGENT":this.hasTangents=!0,this.defines.push("HAS_TANGENTS 1"),this.glAttributes.push({attribute:o,name:"a_Tangent",accessor:a});break;case"TEXCOORD_0":this.hasTexcoord=!0,this.defines.push("HAS_UV_SET1 1"),this.glAttributes.push({attribute:o,name:"a_UV1",accessor:a});break;case"TEXCOORD_1":this.hasTexcoord=!0,this.defines.push("HAS_UV_SET2 1"),this.glAttributes.push({attribute:o,name:"a_UV2",accessor:a});break;case"COLOR_0":this.hasColor=!0;const n=A.accessors[a];this.defines.push("HAS_VERTEX_COLOR_"+n.type+" 1"),this.glAttributes.push({attribute:o,name:"a_Color",accessor:a});break;case"JOINTS_0":this.hasJoints=!0,this.defines.push("HAS_JOINT_SET1 1"),this.glAttributes.push({attribute:o,name:"a_Joint1",accessor:a});break;case"WEIGHTS_0":this.hasWeights=!0,this.defines.push("HAS_WEIGHT_SET1 1"),this.glAttributes.push({attribute:o,name:"a_Weight1",accessor:a});break;case"JOINTS_1":this.hasJoints=!0,this.defines.push("HAS_JOINT_SET2 1"),this.glAttributes.push({attribute:o,name:"a_Joint2",accessor:a});break;case"WEIGHTS_1":this.hasWeights=!0,this.defines.push("HAS_WEIGHT_SET2 1"),this.glAttributes.push({attribute:o,name:"a_Weight2",accessor:a});break;default:console.log("Unknown attribute: "+o)}}const I=A.materials[this.material];let C=I.zeaMaterial;const e=A.accessors[this.attributes.POSITION],i={geomBuffers:{numVertices:e.count,attrBuffers:{}},bbox:new gg(new f(...e.min),new f(...e.max))};if(this.indices!==void 0){const o=A.accessors[this.indices].getTypedView(A);i.geomBuffers.indices=o}for(const o of Object.keys(this.attributes)){const a=this.attributes[o],n=A.accessors[a],B=A.bufferViews[n.bufferView],d=n.getComponentSize(n.componentType),l=n.getComponentCount(n.type);let r;switch(r=B.byteStride==0||B.byteStride==d*l?n.getTypedView(A):n.getDeinterlacedView(A),o){case"POSITION":i.geomBuffers.attrBuffers.positions={dataType:"Vec3",normalized:!1,values:r};break;case"NORMAL":i.geomBuffers.attrBuffers.normals={dataType:"Vec3",normalized:!0,values:r};break;case"TEXCOORD_0":i.geomBuffers.attrBuffers.texCoords={dataType:"Vec2",normalized:!1,values:r};break;case"COLOR_0":let c=!0;for(let h=1;h<r.length/l;h++)for(let E=0;E<l;E++)r[E]!=r[h*l+E]&&(c=!1);if(c){const h=`Material [R=${r[0]}, G=${r[1]}, B=${r[2]}]`;if(A.materialsMap[h])C=A.materialsMap[h];else{const E=new W;d==1?E.set(r[0]/256,r[1]/256,r[2]/256,l==4?r[3]/256:1):d==4&&E.set(r[0],r[1],r[2],l==4?r[3]:1),C=C.clone(),C.getParameter("BaseColor").setValue(E),A.materialsMap[h]=C}}else i.geomBuffers.attrBuffers.vertexColors={dataType:"Color",normalized:!1,values:r}}}let s;switch(this.mode){case"POINTS":case 0:{i.name="GLTFPoints",s=new ZI(i);const o=C.getParameter("BaseColor").getValue(),a=`PointsMaterial [${o.r.toFixed(2)}, ${o.g.toFixed(2)}, ${o.b.toFixed(2)}]`;A.materialsMap[a]?C=A.materialsMap[a]:(C=C.clone(),C.setShaderName("PointsShader"),A.materialsMap[a]=C);break}case"LINES":case 1:{i.name="GLTFLines",s=new pg(i);const o=C.getParameter("BaseColor").getValue(),a=`LinesMaterial [R=${o.r.toFixed(2)}, G=${o.g.toFixed(2)}, B=${o.b.toFixed(2)}]`;A.materialsMap[a]?C=A.materialsMap[a]:(C=C.clone(),C.setShaderName("LinesShader"),A.materialsMap[a]=C);break}case"LINE_LOOP":case 2:{if(i.name="GLTFLineLoop",i.geomBuffers.indices==null){const n=new Uint32Array(2*i.geomBuffers.numVertices);for(let B=0;B<i.geomBuffers.numVertices;B++)n[2*B]=B,n[2*B+1]=(B+1)%n.length;i.geomBuffers.indices=n}else{const n=i.geomBuffers.indices,B=new Uint32Array(2*n.length);B[0]=n[0],B[1]=n[1];let d=1;for(let l=2;l<=n.length;l++)B[2*d]=n[l-1],B[2*d+1]=n[l%n.length],d++;B[0]==1209&&console.log(i.name,i.geomBuffers.indices.toString()),i.geomBuffers.indices=B}s=new pg(i);const o=C.getParameter("BaseColor").getValue(),a=`LinesMaterial [R=${o.r.toFixed(2)}, G=${o.g.toFixed(2)}, B=${o.b.toFixed(2)}]`;A.materialsMap[a]?C=A.materialsMap[a]:(C=C.clone(),C.setShaderName("LinesShader"),A.materialsMap[a]=C);break}case"LINE_STRIP":case 3:{if(i.name="GLTFLineStrip",i.geomBuffers.indices==null){const n=new Uint32Array(2*(i.geomBuffers.numVertices-1));for(let B=0;B<i.geomBuffers.numVertices-1;B++)n[2*B]=B,n[2*B+1]=B+1;i.geomBuffers.indices=n}else{const n=i.geomBuffers.indices,B=new Uint32Array(2*(n.length-1));B[0]=n[0],B[1]=n[1];let d=1;for(let l=2;l<n.length;l++)B[2*d]=n[l-1],B[2*d+1]=n[l],d++;B[0]==1209&&console.log(i.name,i.geomBuffers.indices.toString()),i.geomBuffers.indices=B}s=new pg(i);const o=C.getParameter("BaseColor").getValue(),a=`LinesMaterial [R=${o.r.toFixed(2)}, G=${o.g.toFixed(2)}, B=${o.b.toFixed(2)}]`;A.materialsMap[a]?C=A.materialsMap[a]:(C=C.clone(),C.setShaderName("LinesShader"),A.materialsMap[a]=C);break}case"TRIANGLES":case 4:if(i.name="GLTFMesh",i.geomBuffers.indices==null){const o=new Uint32Array(i.geomBuffers.numVertices);for(let a=0;a<i.geomBuffers.numVertices;a++)o[a]=a;i.geomBuffers.indices=o}s=new _g(i);break;case"TRIANGLE_STRIP":case 5:if(i.name="GLTFMesh",i.geomBuffers.indices==null){const o=new Uint32Array(3*i.geomBuffers.numVertices-2);o[0]=0,o[1]=1,o[2]=2;for(let a=3;a<o.length;a+=3)o[a-2]=o[a-1],o[a-1]=o[a-2],o[a]=a;i.geomBuffers.indices=o}else{const o=i.geomBuffers.indices,a=o.length-2,n=new Uint32Array(3*a);n[0]=o[0],n[1]=o[1],n[2]=o[2];let B=1;for(let d=3;d<o.length;d++)n[3*B]=o[d-2],n[3*B+1]=o[d-1],n[3*B+2]=o[d],B++;i.geomBuffers.indices=n}s=new _g(i);break;case"TRIANGLE_FAN":case 6:if(i.name="GLTFMesh",i.geomBuffers.indices==null){const o=new Uint32Array(3*i.geomBuffers.numVertices-2);o[0]=0,o[1]=1,o[2]=2;for(let a=3;a<o.length;a+=3)o[a-2]=o[0],o[a-1]=o[a-1],o[a]=a;i.geomBuffers.indices=o}else{const o=i.geomBuffers.indices,a=o.length-2,n=new Uint32Array(3*a);n[0]=o[0],n[1]=o[1],n[2]=o[2];let B=1;for(let d=3;d<o.length;d++)n[3*B]=o[0],n[3*B+1]=o[d-1],n[3*B+2]=o[d],B++;i.geomBuffers.indices=n}s=new _g(i)}if(s){if(I.alphaMode=="OPAQUE"){const a=C.getParameter("BaseColor").getValue();a.a=1,C.getParameter("BaseColor").setValue(a)}const o=new gA(i.name,s,C);g.addChild(o,!1)}}computeCentroid(A,g){const I=A.accessors[this.attributes.POSITION].getTypedView(A);if(this.indices!==void 0){const C=A.accessors[this.indices].getTypedView(A),e=new Float32Array(3);for(let s=0;s<C.length;s++){const o=3*C[s];e[0]+=I[o],e[1]+=I[o+1],e[2]+=I[o+2]}const i=new Float32Array([e[0]/C.length,e[1]/C.length,e[2]/C.length]);this.centroid=i}else{const C=new Float32Array(3);for(let s=0;s<I.length;s+=3)C[0]+=I[s],C[1]+=I[s+1],C[2]+=I[s+2];const e=I.length/3,i=new Float32Array([C[0]/e,C[1]/e,C[2]/e]);this.centroid=i}}getShaderIdentifier(){return"primitive.vert"}getDefines(){return this.defines}fromJson(A){super.fromJson(A),A.extensions!==void 0&&this.fromJsonPrimitiveExtensions(A.extensions)}fromJsonPrimitiveExtensions(A){A.KHR_materials_variants!==void 0&&this.fromJsonVariants(A.KHR_materials_variants)}fromJsonVariants(A){A.mappings!==void 0&&(this.mappings=A.mappings)}copyDataFromDecodedGeometry(A,g,I){let C=g.index.array;if(this.loadBufferIntoGltf(C,A,this.indices,34963,"index buffer view"),g.attributes.POSITION!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.POSITION.array,g.attributes.POSITION.componentType);this.loadBufferIntoGltf(e,A,I.POSITION,34962,"position buffer view")}if(g.attributes.NORMAL!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.NORMAL.array,g.attributes.NORMAL.componentType);this.loadBufferIntoGltf(e,A,I.NORMAL,34962,"normal buffer view")}if(g.attributes.TEXCOORD_0!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.TEXCOORD_0.array,g.attributes.TEXCOORD_0.componentType);this.loadBufferIntoGltf(e,A,I.TEXCOORD_0,34962,"TEXCOORD_0 buffer view")}if(g.attributes.TEXCOORD_1!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.TEXCOORD_1.array,g.attributes.TEXCOORD_1.componentType);this.loadBufferIntoGltf(e,A,I.TEXCOORD_1,34962,"TEXCOORD_1 buffer view")}if(g.attributes.TANGENT!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.TANGENT.array,g.attributes.TANGENT.componentType);this.loadBufferIntoGltf(e,A,I.TANGENT,34962,"Tangent buffer view")}if(g.attributes.COLOR_0!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.COLOR_0.array,g.attributes.COLOR_0.componentType);this.loadBufferIntoGltf(e,A,I.COLOR_0,34962,"color buffer view")}if(g.attributes.JOINTS_0!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.JOINTS_0.array,g.attributes.JOINTS_0.componentType);this.loadBufferIntoGltf(e,A,I.JOINTS_0,34963,"JOINTS_0 buffer view")}if(g.attributes.WEIGHTS_0!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.WEIGHTS_0.array,g.attributes.WEIGHTS_0.componentType);this.loadBufferIntoGltf(e,A,I.WEIGHTS_0,34963,"WEIGHTS_0 buffer view")}if(g.attributes.JOINTS_1!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.JOINTS_1.array,g.attributes.JOINTS_1.componentType);this.loadBufferIntoGltf(e,A,I.JOINTS_1,34963,"JOINTS_1 buffer view")}if(g.attributes.WEIGHTS_1!==void 0){let e=this.loadArrayIntoArrayBuffer(g.attributes.WEIGHTS_1.array,g.attributes.WEIGHTS_1.componentType);this.loadBufferIntoGltf(e,A,I.WEIGHTS_1,34963,"WEIGHTS_1 buffer view")}}loadBufferIntoGltf(A,g,I,C,e){const i=new za;i.byteLength=A.byteLength,i.buffer=A,g.buffers.push(i);const s=new _a;s.buffer=g.buffers.length-1,s.byteLength=A.byteLength,e!==void 0&&(s.name=e),s.target=C,g.bufferViews.push(s),g.accessors[I].byteOffset=0,g.accessors[I].bufferView=g.bufferViews.length-1}loadArrayIntoArrayBuffer(A,g){let I;switch(g){case"Int8Array":I=new ArrayBuffer(A.length),new Int8Array(I).set(A);break;case"Uint8Array":I=new ArrayBuffer(A.length),new Uint8Array(I).set(A);break;case"Int16Array":I=new ArrayBuffer(2*A.length),new Int16Array(I).set(A);break;case"Uint16Array":I=new ArrayBuffer(2*A.length),new Uint16Array(I).set(A);break;case"Int32Array":I=new ArrayBuffer(4*A.length),new Int32Array(I).set(A);break;case"Uint32Array":I=new ArrayBuffer(4*A.length),new Uint32Array(I).set(A);break;default:case"Float32Array":I=new ArrayBuffer(4*A.length),new Float32Array(I).set(A)}return I}decodeDracoBufferToIntermediate(A,g){let I=A.bufferView;const C=g.bufferViews[I],e=g.buffers[C.buffer],i=new Int8Array(e.buffer).slice(C.byteOffset,C.byteOffset+C.byteLength);let s=new Jg().module,o=new s.Decoder,a=new s.DecoderBuffer;a.Init(i,C.byteLength);let n=this.decodeGeometry(s,o,a,A.attributes,g);return s.destroy(a),n}getDracoArrayTypeFromComponentType(A){switch(A){case eA.BYTE:return"Int8Array";case eA.UNSIGNED_BYTE:return"Uint8Array";case eA.SHORT:return"Int16Array";case eA.UNSIGNED_SHORT:return"Uint16Array";case eA.INT:return"Int32Array";case eA.UNSIGNED_INT:return"Uint32Array";case eA.FLOAT:default:return"Float32Array"}}decodeGeometry(A,g,I,C,e){let i,s,o=g.GetEncodedGeometryType(I);if(o!==A.TRIANGULAR_MESH)throw new Error("DRACOLoader: Unexpected geometry type.");if(i=new A.Mesh,s=g.DecodeBufferToMesh(I,i),!s.ok()||i.ptr===0)throw new Error("DRACOLoader: Decoding failed: "+s.error_msg());let a={index:null,attributes:{}},n=i.num_points();for(let d in C){let l,r=eA.BYTE;for(const[h,E]of Object.entries(this.attributes))if(h===d){r=e.accessors[E].componentType,l=e.accessors[E].count;break}if(n!==l)throw new Error(`DRACOLoader: Accessor vertex count ${l} does not match draco decoder vertex count  ${n}`);r=this.getDracoArrayTypeFromComponentType(r);let c=g.GetAttributeByUniqueId(i,C[d]);var B=this.decodeAttribute(A,g,i,d,c,r);a.attributes[B.name]=B}if(o===A.TRIANGULAR_MESH){let d=3*i.num_faces(),l=4*d,r=A._malloc(l);g.GetTrianglesUInt32Array(i,l,r);let c=new Uint32Array(A.HEAPU32.buffer,r,d).slice();A._free(r),a.index={array:c,itemSize:1}}return A.destroy(i),a}decodeAttribute(A,g,I,C,e,i){let s,o,a,n=e.num_components(),B=I.num_points()*n;switch(i){case"Float32Array":a=4*B,s=A._malloc(a),g.GetAttributeDataArrayForAllPoints(I,e,A.DT_FLOAT32,a,s),o=new Float32Array(A.HEAPF32.buffer,s,B).slice(),A._free(s);break;case"Int8Array":s=A._malloc(B),g.GetAttributeDataArrayForAllPoints(I,e,A.DT_INT8,B,s),o=new Int8Array(A.HEAP8.buffer,s,B).slice(),A._free(s);break;case"Int16Array":a=2*B,s=A._malloc(a),g.GetAttributeDataArrayForAllPoints(I,e,A.DT_INT16,a,s),o=new Int16Array(A.HEAP16.buffer,s,B).slice(),A._free(s);break;case"Int32Array":a=4*B,s=A._malloc(a),g.GetAttributeDataArrayForAllPoints(I,e,A.DT_INT32,a,s),o=new Int32Array(A.HEAP32.buffer,s,B).slice(),A._free(s);break;case"Uint8Array":s=A._malloc(B),g.GetAttributeDataArrayForAllPoints(I,e,A.DT_UINT8,B,s),o=new Uint8Array(A.HEAPU8.buffer,s,B).slice(),A._free(s);break;case"Uint16Array":a=2*B,s=A._malloc(a),g.GetAttributeDataArrayForAllPoints(I,e,A.DT_UINT16,a,s),o=new Uint16Array(A.HEAPU16.buffer,s,B).slice(),A._free(s);break;case"Uint32Array":a=4*B,s=A._malloc(a),g.GetAttributeDataArrayForAllPoints(I,e,A.DT_UINT32,a,s),o=new Uint32Array(A.HEAPU32.buffer,s,B).slice(),A._free(s);break;default:throw new Error("DRACOLoader: Unexpected attribute type.")}return{name:C,array:o,itemSize:n,componentType:i}}}class A0 extends jA{constructor(){super(),this.primitives=[],this.name=void 0,this.weights=[],this.weightsAnimated=void 0}fromJson(A){super.fromJson(A),A.name!==void 0&&(this.name=A.name),this.primitives=qA(A.primitives,$G),A.weights!==void 0&&(this.weights=A.weights)}getWeightsAnimated(){return this.weightsAnimated!==void 0?this.weightsAnimated:this.weights}initGl(A,g){this.primitives.forEach(I=>{I.initGl(A,g)})}}class g0 extends jA{constructor(){super(),this.camera=void 0,this.children=[],this.matrix=void 0,this.rotation=[0,0,0,1],this.scale=[1,1,1],this.translation=[0,0,0],this.name=void 0,this.mesh=void 0,this.skin=void 0,this.light=void 0,this.changed=!0,this.animationRotation=void 0,this.animationTranslation=void 0,this.animationScale=void 0}fromJson(A){super.fromJson(A)}initGl(A,g){let I;if(this.extras){if(window.zeaCad){const{CADBody:e}=zeaCad;I=new e(this.name)}else I=new L(this.name);for(let e in this.extras){const i=this.extras[e];typeof i=="string"?I.addParameter(new Zg(e,i)):typeof i=="boolean"?I.addParameter(new RA(e,i)):typeof i=="number"?I.addParameter(new Y(e,i)):typeof i=="object"&&I.addParameter(new zA(e,i,"json"))}I.extras=this.extras}else I=new L(this.name);const C=new D;if(this.matrix!==void 0){const e=new NA(Float32Array.from(this.matrix));C.setFromMat4(e)}else this.scale!==void 0&&C.sc.set(...this.scale),this.rotation!==void 0&&C.ori.set(...this.rotation),this.translation!==void 0&&C.tr.set(...this.translation);I.getParameter("LocalXfo").setValue(C),this.children.forEach(e=>{A.nodes[e].initGl(A,I)}),this.mesh!=null&&A.meshes[this.mesh].initGl(A,I),g.addChild(I,!1),AA.incrementWorkDone(1)}applyMatrix(A){this.matrix=A,mat4.getScaling(this.scale,this.matrix);const g=mat4.create();for(const I of[0,1,2])g[I]=this.matrix[I]/this.scale[0],g[I+4]=this.matrix[I+4]/this.scale[1],g[I+8]=this.matrix[I+8]/this.scale[2];mat4.getRotation(this.rotation,g),quat.normalize(this.rotation,this.rotation),mat4.getTranslation(this.translation,this.matrix),this.changed=!0}applyTranslationAnimation(A){this.animationTranslation=A,this.changed=!0}applyRotationAnimation(A){this.animationRotation=A,this.changed=!0}applyScaleAnimation(A){this.animationScale=A,this.changed=!0}resetTransform(){this.rotation=[0,0,0,1],this.scale=[1,1,1],this.translation=[0,0,0],this.changed=!0}getLocalTransform(){if(this.transform===void 0||this.changed){this.transform=mat4.create();const A=this.animationTranslation!==void 0?this.animationTranslation:this.translation,g=this.animationRotation!==void 0?this.animationRotation:this.rotation,I=this.animationScale!==void 0?this.animationScale:this.scale;mat4.fromRotationTranslationScale(this.transform,g,A,I),this.changed=!1}return mat4.clone(this.transform)}}class Je extends jA{constructor(A="LINEAR",g="LINEAR_MIPMAP_LINEAR",I="REPEAT",C="REPEAT"){super(),this.magFilter=A,this.minFilter=g,this.wrapS=I,this.wrapT=C,this.name=void 0}static createDefault(){return new Je}}class I0 extends jA{constructor(A=[],g){super(),this.nodes=A,this.name=g,this.imageBasedLight=void 0}initGl(A,g){if(this.extensions!==void 0&&this.extensions.KHR_lights_image_based!==void 0){const I=this.extensions.KHR_lights_image_based.imageBasedLight;this.imageBasedLight=A.imageBasedLights[I]}this.nodes.forEach(I=>{A.nodes[I].initGl(A,g)})}gatherNodes(A){const g=[];function I(C){const e=A.nodes[C];g.push(e);for(const i of e.children)I(i)}for(const C of this.nodes)I(C);return g}includesNode(A,g){let I=[...this.nodes];for(;I.length>0;){const C=I.pop();if(C===g)return!0;I=I.concat(A.nodes[C].children)}return!1}}class C0 extends jA{constructor(){super(),this.copyright=void 0,this.generator=void 0,this.version=void 0,this.minVersion=void 0}}class e0 extends jA{constructor(){super(),this.target={node:void 0,path:void 0},this.sampler=void 0}}const i0="translation",ja="rotation",t0="scale",s0="weights";class o0 extends jA{constructor(){super(),this.input=void 0,this.interpolation=void 0,this.output=void 0}}const a0="LINEAR",bo="STEP",yo="CUBICSPLINE";class n0{constructor(){this.prevKey=0,this.prevT=0}slerpQuat(A,g,I){const C=quat.create(),e=quat.create();quat.normalize(C,A),quat.normalize(e,g);const i=quat.create();return quat.slerp(i,C,e,I),quat.normalize(i,i),i}step(A,g,I){const C=new glMatrix.ARRAY_TYPE(I);for(let e=0;e<I;++e)C[e]=g[A*I+e];return C}linear(A,g,I,C,e){const i=new glMatrix.ARRAY_TYPE(e);for(let s=0;s<e;++s)i[s]=I[A*e+s]*(1-C)+I[g*e+s]*C;return i}cubicSpline(A,g,I,C,e,i){const s=A*i*3,o=g*i*3,a=1*i,n=2*i,B=new glMatrix.ARRAY_TYPE(i),d=e**2,l=e**3;for(let r=0;r<i;++r){const c=I[s+r+a],h=C*I[o+r+0],E=C*I[s+r+n],b=I[o+r+a];B[r]=(2*l-3*d+1)*c+(l-2*d+e)*E+(-2*l+3*d)*b+(l-d)*h}return B}resetKey(){this.prevKey=0}interpolate(A,g,I,C,e,i){if(C===void 0)return;const s=A.accessors[I.input].getNormalizedDeinterlacedView(A),o=A.accessors[I.output].getNormalizedDeinterlacedView(A);if(o.length===e)return ka(o,0,e);C=Mi(C%=i,s[0],s[s.length-1]),this.prevT>C&&(this.prevKey=0),this.prevT=C;let a=null;for(let d=this.prevKey;d<s.length;++d)if(C<=s[d]){a=Mi(d,1,s.length-1);break}this.prevKey=Mi(a-1,0,a);const n=s[a]-s[this.prevKey],B=(C-s[this.prevKey])/n;if(g.target.path===ja){if(yo===I.interpolation){const d=this.cubicSpline(this.prevKey,a,o,n,B,4);return quat.normalize(d,d),d}if(I.interpolation===a0){const d=this.getQuat(o,this.prevKey),l=this.getQuat(o,a);return this.slerpQuat(d,l,B)}if(I.interpolation===bo)return this.getQuat(o,this.prevKey)}switch(I.interpolation){case bo:return this.step(this.prevKey,o,e);case yo:return this.cubicSpline(this.prevKey,a,o,n,B,e);default:return this.linear(this.prevKey,a,o,B,e)}}getQuat(A,g){const I=A[4*g],C=A[4*g+1],e=A[4*g+2],i=A[4*g+3];return quat.fromValues(I,C,e,i)}}class B0 extends jA{constructor(){super(),this.channels=[],this.samplers=[],this.name="",this.interpolators=[],this.maxTime=0,this.disjointAnimations=[]}fromJson(A){if(super.fromJson(A),this.channels=qA(A.channels,e0),this.samplers=qA(A.samplers,o0),this.name=A.name,this.channels!==void 0)for(let g=0;g<this.channels.length;++g)this.interpolators.push(new n0);else console.error("No channel data found for skin")}advance(A,g){if(this.channels!==void 0){if(this.maxTime==0)for(let I=0;I<this.channels.length;++I){const C=this.channels[I],e=this.samplers[C.sampler],i=A.accessors[e.input].getDeinterlacedView(A),s=i[i.length-1];s>this.maxTime&&(this.maxTime=s)}for(let I=0;I<this.interpolators.length;++I){const C=this.channels[I],e=this.samplers[C.sampler],i=this.interpolators[I],s=A.nodes[C.target.node];switch(C.target.path){case i0:s.applyTranslationAnimation(i.interpolate(A,C,e,g,3,this.maxTime));break;case ja:s.applyRotationAnimation(i.interpolate(A,C,e,g,4,this.maxTime));break;case t0:s.applyScaleAnimation(i.interpolate(A,C,e,g,3,this.maxTime));break;case s0:{const o=A.meshes[s.mesh];o.weightsAnimated=i.interpolate(A,C,e,g,o.weights.length,this.maxTime);break}}}}}}class l0 extends jA{constructor(){super(),this.name="",this.inverseBindMatrices=void 0,this.joints=[],this.skeleton=void 0,this.jointMatrices=[],this.jointNormalMatrices=[]}computeJoints(A,g){const I=A.accessors[this.inverseBindMatrices].getDeinterlacedView(A);this.jointMatrices=[],this.jointNormalMatrices=[];let C=0;for(const e of this.joints){const i=A.nodes[e];let s=mat4.create(),o=ka(I,16*C++,16);mat4.mul(s,i.worldTransform,o),mat4.mul(s,g.inverseWorldTransform,s),this.jointMatrices.push(s);let a=mat4.create();mat4.invert(a,s),mat4.transpose(a,a),this.jointNormalMatrices.push(a)}}}class d0 extends jA{constructor(){super(),this.name=void 0}fromJson(A){A.name!==void 0&&(this.name=A.name)}}class r0 extends jA{constructor(A){super(),this.asset=void 0,this.accessors=[],this.nodes=[],this.scene=void 0,this.scenes=[],this.cameras=[],this.lights=[],this.imageBasedLights=[],this.textures=[],this.images=[],this.samplers=[],this.meshes=[],this.buffers=[],this.bufferViews=[],this.materials=[],this.materialsMap={},this.animations=[],this.skins=[],this.path=A}initGl(A){const g=this;for(const I of this.images)I!=null&&I.initGl!==void 0&&I.initGl(g,A);for(const I of this.samplers)I!=null&&I.initGl!==void 0&&I.initGl(g,A);for(const I of this.textures)I!=null&&I.initGl!==void 0&&I.initGl(g,A);for(const I of this.materials)I!=null&&I.initGl!==void 0&&I.initGl(g,A);this.scenes[this.scene].initGl(this,A)}fromJson(A){super.fromJson(A),this.asset=xa(A.asset,C0),this.cameras=qA(A.cameras,Lt),this.accessors=qA(A.accessors,Ke),this.meshes=qA(A.meshes,A0),this.samplers=qA(A.samplers,Je),this.materials=qA(A.materials,Ne),this.buffers=qA(A.buffers,za),this.bufferViews=qA(A.bufferViews,_a),this.scenes=qA(A.scenes,I0),this.textures=qA(A.textures,qG),this.nodes=qA(A.nodes,g0),this.lights=qA(function(g){return g===void 0?[]:g.KHR_lights_punctual===void 0?[]:g.KHR_lights_punctual.lights}(A.extensions),zG),this.imageBasedLights=qA(function(g){return g===void 0?[]:g.KHR_lights_image_based===void 0?[]:g.KHR_lights_image_based.imageBasedLights}(A.extensions),jG),this.images=qA(A.images,EC),this.animations=qA(A.animations,B0),this.skins=qA(A.skins,l0),this.variants=qA(function(g){return g===void 0?[]:g.KHR_materials_variants===void 0?[]:g.KHR_materials_variants.variants}(A.extensions),d0),this.variants=function(g){for(let I=0;I<g.length;I++){const C=g[I].name;for(let e=I+1;e<g.length;e++)g[e].name==C&&(g[e].name+="0")}return g}(this.variants),this.materials.push(Ne.createDefault()),this.samplers.push(Je.createDefault()),A.scenes!==void 0&&(A.scene===void 0&&A.scenes.length>0?this.scene=0:this.scene=A.scene),this.computeDisjointAnimations()}computeDisjointAnimations(){for(let A=0;A<this.animations.length;A++){this.animations[A].disjointAnimations=[];for(let g=0;g<this.animations.length;g++){if(A==g)continue;let I=!0;for(const C of this.animations[A].channels)for(const e of this.animations[g].channels)if(C.target.node===e.target.node&&C.target.path===e.target.path){I=!1;break}I&&this.animations[A].disjointAnimations.push(g)}}}nonDisjointAnimations(A){const g=this.animations,I=[];for(let C=0;C<g.length;C++){let e=!0;for(const i of A)C!=i&&(g[i].disjointAnimations.includes(C)||(e=!1));e||I.push(C)}return I}}class c0{constructor(A){this.data=A,this.glbHeaderInts=3,this.glbChunkHeaderInts=2,this.glbMagic=1179937895,this.glbVersion=2,this.jsonChunkType=1313821514,this.binaryChunkType=5130562}extractGlbData(){if(this.getCheckedGlbInfo()===void 0)return;let A,g=[];const I=this.getAllChunkInfos();for(let C of I)C.type!=this.jsonChunkType||A?C.type==this.binaryChunkType&&g.push(this.getBufferFromChunk(C)):A=this.getJsonFromChunk(C);return{json:A,buffers:g}}getCheckedGlbInfo(){const A=new Uint32Array(this.data,0,this.glbHeaderInts),g=A[0],I=A[1],C=A[2];if(this.checkEquality(g,this.glbMagic,"glb magic")&&this.checkEquality(I,this.glbVersion,"glb header version")&&this.checkEquality(C,this.data.byteLength,"glb byte length"))return{magic:g,version:I,length:C}}getAllChunkInfos(){let A=[],g=4*this.glbHeaderInts;for(;g<this.data.byteLength;){const I=this.getChunkInfo(g);A.push(I),g+=I.length+4*this.glbChunkHeaderInts}return A}getChunkInfo(A){const g=new Uint32Array(this.data,A,this.glbChunkHeaderInts);return{start:A+4*this.glbChunkHeaderInts,length:g[0],type:g[1]}}getJsonFromChunk(A){const g=A.length,I=4*(this.glbHeaderInts+this.glbChunkHeaderInts),C=new Uint8Array(this.data,I,g),e=new TextDecoder("utf-8").decode(C);return JSON.parse(e)}getBufferFromChunk(A){return this.data.slice(A.start,A.start+A.length)}checkEquality(A,g,I){return A==g||(console.error("Found invalid/unsupported "+I+", expected: "+g+", but was: "+A),!1)}}class Mg{static async load(A,g,I){const C=Mg.getBuffers(I),e=Mg.getAdditionalFiles(I),i=Mg.loadBuffers(A,C,e);await i;const s=Mg.loadImages(A,e);return await Promise.all([i,s]).then(()=>{A.initGl(g)})}static unload(A){for(let g of A.images)g.image=void 0;A.images=[];for(let g of A.textures)g.destroy();A.textures=[];for(let g of A.accessors)g.destroy();A.accessors=[]}static getBuffers(A){return Mg.getTypedAppendix(A,ArrayBuffer)}static getAdditionalFiles(A){return typeof File!="undefined"?Mg.getTypedAppendix(A,File):void 0}static getTypedAppendix(A,g){if(A&&A.length>0&&A[0]instanceof g)return A}static loadBuffers(A,g,I){const C=[];if(g!==void 0&&g[0]!==void 0){g.length>1&&console.warn("Too many buffer chunks in GLB file. Only one or zero allowed"),A.buffers[0].buffer=g[0];for(let e=1;e<A.buffers.length;++e)C.push(A.buffers[e].load(A,I))}else for(const e of A.buffers)C.push(e.load(A,I));return Promise.all(C)}static loadImages(A,g){const I=[];for(let C of A.images)I.push(C.load(A,g));return Promise.all(I)}}async function Li(t){let A="",g=0;const I=t;let C;for(;!A.match(/\n\n[^\n]+\n/g);)A+=String.fromCharCode(I[g++]);if(C=A.match(/FORMAT=(.*)$/m),C.length<2)return;if(C=C[1],C!="32-bit_rle_rgbe")return console.warn("unknown format : "+C),this.onerror();let e=A.split(/\n/).reverse();if(e.length<2||(e=e[1].split(" "),e.length<4))return;const i=1*e[3],s=1*e[1],o=new Uint8Array(i*s*4);let a=0;for(let n=0;n<s;n++){const B=[];let d=I.slice(g,g+=4);if(d[0]==2&&d[1]==2&&d[2]==(i>>8&255)&&d[3]==(255&i)&&i>=8&&i<32768){for(let l=0;l<4;l++){let r=l*i;const c=(l+1)*i;let h,E;for(;r<c;)if(h=I.slice(g,g+=2),h[0]>128)for(E=h[0]-128;E-- >0;)B[r++]=h[1];else for(E=h[0]-1,B[r++]=h[1];E-- >0;)B[r++]=I[g++]}for(let l=0;l<i;l++)o[a++]=B[l+0*i],o[a++]=B[l+1*i],o[a++]=B[l+2*i],o[a++]=B[l+3*i]}else{g-=4;for(let l=0;l<i;l++)d=I.slice(g,g+=4),o[a++]=d[0],o[a++]=d[1],o[a++]=d[2],o[a++]=d[3]}}return{dataFloat:function(n){const B=n.byteLength>>2,d=new Float32Array(3*B);for(let l=0;l<B;l++){const r=Math.pow(2,n[4*l+3]-136);d[3*l]=n[4*l]*r,d[3*l+1]=n[4*l+1]*r,d[3*l+2]=n[4*l+2]*r}return d}(o),width:i,height:s}}class qa extends L{constructor(A){super(A),this.init()}init(A,g){this.initKtxLib(g),this.initDracoLib(A)}async load(A,g){await this.init();let I,C,e,i;if(g||(g=A),AA.incrementWorkload(1),typeof A=="string"){I=kG(g);let o=await AA.loadFile(I?"binary":"json",A);e=o,i=o}else console.error("Passed invalid type to loadGltf "+typeof gltfFile);if(I){const o=new c0(i).extractGlbData();e=o.json,C=o.buffers}const s=new r0(g);s.fromJson(e);for(const o of s.images)o.resolveRelativePath(Ta(s.path));return AA.incrementWorkload(s.nodes.length),await Mg.load(s,this,C),AA.incrementWorkDone(1),s}async loadEnvironment(A,g){let I;if(typeof A=="string"){let C=await AA.loadFile(A?"binary":"json",url);I=await Li(new Uint8Array(C.data))}else if(A instanceof ArrayBuffer)I=await Li(new Uint8Array(A));else if(typeof File!="undefined"&&A instanceof File){const C=await Pa.readAsArrayBuffer(A).catch(()=>{console.error("Could not load image with FileReader")});I=await Li(new Uint8Array(C))}else console.error("Passed invalid type to loadEnvironment "+typeof gltfFile);if(I!==void 0)return _loadEnvironmentFromPanorama(I,this.view,g)}initKtxLib(A){}async initDracoLib(A){const g=new Jg(A);g!==void 0&&await g.ready()}}p.register("GLTFAsset",qa),pe?pe.registerLib(UG):console.warn("The version of the Zea Engine that you're using doesn't support the libraries registry. Please upgrade to the latest Zea Engine version.");let Zo=!1;class h0 extends HTMLElement{constructor(){super();tI(this,"modal");tI(this,"content");tI(this,"loadFileCallback");const A=this.attachShadow({mode:"open"});this.modal=document.createElement("div"),this.modal.classList.add("modal"),A.appendChild(this.modal),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.modal.appendChild(this.content),this.content.innerHTML=`<div id="fileDropZone" class="fixed w-full flex h-screen">
    <input
      accept=".zcad, .gltf, .glb, gltf, .obj"
      multiple
      type="file"
      class="absolute inset-0 z-50 m-0 p-0 w-full h-full outline-none opacity-0"
      id="dropHotSpot"
    />
      <div
        class="border-2 border-gray-400 py-12 justify-center items-center p-4 m-auto rounded-lg w-3/12 h-1/3 bg-gray-200 bg-opacity-25 hover:bg-blue-200 hover:bg-opacity-25 text-black grid justify-items-center"
      >
        <div class="m-auto">
          <div class="flex flex-col space-y-2 items-center justify-center">
            <i class="fas fa-cloud-upload-alt fa-3x text-currentColor" />
            <p class="text-gray-700 text-center">Drag your gltf, obj or zcad files here or click in this area.</p>
          </div>
        </div>
      </div>
  </div>`;const g=a=>{Zo&&this.shadowRoot.getElementById("fileDropZone").classList.remove("pointer-events-none"),a.preventDefault()},I=a=>{a.preventDefault()},C=a=>{if(a.dataTransfer){for(var n=0;n<a.dataTransfer.items.length;n++)if(a.dataTransfer.items[n].kind==="file"){const B=a.dataTransfer.items[n].getAsFile();B&&i(B)}}a.preventDefault()},e=a=>{for(var n=0;n<a.target.files.length;n++){let B=a.target.files[n];i(B)}a.preventDefault()},i=a=>{const n=new FileReader;n.addEventListener("load",()=>{const B=n.result,d=a.name;this.loadFile(B,d)},!1),n.readAsDataURL(a)},s=this.shadowRoot.getElementById("dropHotSpot");s.addEventListener("change",e),s.addEventListener("drop",C),document.body.addEventListener("dragover",I),document.body.addEventListener("dragenter",g),document.body.addEventListener("drop",C);const o=document.createElement("style");o.appendChild(document.createTextNode(`
/* The Modal (background) */
.modal {
  display: block; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content/Box */
.modal-content {
  background-color: #eeeeee88;
  margin: 15% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
  max-width: 600px;
}

`)),A.appendChild(o),this.hide()}display(A){this.loadFileCallback=A,this.modal.style.setProperty("pointer-events","auto"),this.modal.style.setProperty("display","block")}hide(){this.modal.style.setProperty("pointer-events","none"),this.modal.style.setProperty("display","none")}loadFile(A,g){this.hide(),Zo=!0,this.loadFileCallback&&this.loadFileCallback(A,g)}}customElements.define("drop-zone",h0);const Ui="2d37e395cc590b4e127317494566f1aaf881f0ac1b5ff7d4180506fd682d68ea",m0=!0;async function G0(t){const A=new TextEncoder().encode(t),g=await crypto.subtle.digest("SHA-256",A);return Array.from(new Uint8Array(g)).map(e=>e.toString(16).padStart(2,"0")).join("")}class E0{async isAuthenticated(){const A=await this.getUserData();return A&&(A.hashedPassword===Ui||!m0)}async getUserData(){const{zeaUserData:A}=window.localStorage;return A&&JSON.parse(A)}async setUserData(A){{if(!A.password)throw new Error("Password not provided.");if(A.hashedPassword!==Ui&&(A.hashedPassword=await G0(A.password),A.password="".padEnd(6,"*")),A.hashedPassword!==Ui)throw new Error("Wrong password.")}window.localStorage.zeaUserData=JSON.stringify(A)}async signOut(){localStorage.removeItem("zeaUserData")}}const ki=new E0,Re=(t=3)=>Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,t),Q0=()=>`${Re(3)}-${Re(3)}-${Re(3)}`,u0=(t,A)=>{var g=new URL(window.location.href);g.searchParams.set(t,A),window.history.pushState({},"",g.href)};class b0 extends HTMLElement{constructor(){super();tI(this,"modal");tI(this,"content");tI(this,"onCloseCallback");const A=this.attachShadow({mode:"open"});this.modal=document.createElement("div"),this.modal.classList.add("modal"),A.appendChild(this.modal),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.modal.appendChild(this.content),this.content.innerHTML=`
        <div class="imgcontainer">
          <img src="./data/logo-zea.svg" alt="Avatar" class="avatar">
        </div>

        <div class="container">
          <label for="uname"><b>Username</b></label>
          <input id="uname" type="text" placeholder="Enter Username" name="uname" required>

          <label for="psw"><b>Password</b></label>
          <input id="psw" type="password" placeholder="Enter Password" name="psw" required>

          <label for="room"><b>Room ID</b></label>
          <input id="room" type="text" placeholder="Enter Room ID" name="room" required>


          <button type="submit" id="login">Login</button>
        </div>`;const g=this.shadowRoot.getElementById("uname");let I;I=this.shadowRoot.getElementById("psw"),I.addEventListener("input",()=>{I.style.border=""});let C;{C=this.shadowRoot.getElementById("room");const a=new URLSearchParams(window.location.search).get("roomId")||Q0();C.value=a}let e;ki.getUserData().then(o=>{e=o||{},o&&(I.value=o.password,g.value=o.firstName)});const i=this.shadowRoot.getElementById("login");i.onclick=async()=>{const o=Re();e.color=W.random().toHex(),e.firstName=g.value,e.id=o,e.lastName="",e.password=I.value,e.username=g.value,C.value&&u0("roomId",C.value);try{await ki.setUserData(e)}catch{I.style.border="2px solid #f00";return}this.close()};const s=document.createElement("style");s.appendChild(document.createTextNode(`
/* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content/Box */
.modal-content {
  background-color: #eeeeee;
  margin: 15% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 1px solid #888;
  width: 80%; /* Could be more or less, depending on screen size */
  max-width: 600px;
}


/* The Close Button */
.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

/* Full-width inputs */
input[type=text], input[type=password] {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  box-sizing: border-box;
}

/* Set a style for all buttons */
button {
  background-color: #f9ce03;
  color: black;
  padding: 14px 20px;
  margin: 8px 0;
  border: none;
  cursor: pointer;
  width: 100%;
}

/* Add a hover effect for buttons */
button:hover {
  opacity: 0.8;
}

/* Extra style for the cancel button (red) */
.cancelbtn {
  width: auto;
  padding: 10px 18px;
  background-color: #f44336;
}

/* Center the avatar image inside this container */
.imgcontainer {
  text-align: center;
  margin: 24px 0 12px 0;
}

/* Avatar image */
img.avatar {
  height: 40px;
}

/* Add padding to containers */
.container {
  padding: 16px;
}

/* The "Forgot password" text */
span.psw {
  float: right;
  padding-top: 16px;
}

/* Change styles for span and cancel button on extra small screens */
@media screen and (max-width: 300px) {
  span.psw {
    display: block;
    float: none;
  }
  .cancelbtn {
    width: 100%;
  }
}

`)),A.appendChild(s)}show(A){this.onCloseCallback=A,new URLSearchParams(window.location.search).has("roomId")&&ki.isAuthenticated().then(I=>{I&&this.close()}),this.modal.style.display="block"}close(){this.modal.style.display="none",this.onCloseCallback&&this.onCloseCallback()}}customElements.define("login-dialog",b0);function y0(){const t=new URLSearchParams(window.location.search),A=new vB;A.setupGrid(10,10);const g=t.has("xrMode")?t.get("xrMode"):"AR",I=new OI(document.getElementById("canvas"),{debugGeomIds:!1,enableFrustumCulling:!0,xrMode:g=="AR"?"AR":"VR"});I.outlineThickness=1.5,I.outlineSensitivity=5,I.highlightOutlineThickness=1.75,I.outlineColor=new W(0,0,0,.6),I.hiddenLineColor=new W(.2,.2,.2,0),I.setScene(A),I.getViewport().getCamera().setPositionAndTarget(new f(2,2,2),new f(0,0,.5));const C=new Qt;C.load("./data/StudioG.zenv"),A.setEnvMap(C);const e={scene:A,renderer:I},i=new W("#F9CE03");i.a=.1;const s=new hc(e,{selectionOutlineColor:i,branchSelectionOutlineColor:i});e.selectionManager=s;const o=document.getElementById("progress");let a=0;AA.on("progressIncremented",m=>{o.value=m.percent,m.percent>=100?a=setTimeout(()=>o.classList.add("hidden"),1e3):m.percent<100&&(a&&(clearTimeout(a),a=0),o.classList.remove("hidden"))});const n=document.getElementById("fps");if(n){let m=0;I.on("redrawOccurred",()=>{m++}),setInterval(()=>{n.textContent=`Fps: ${m*2}`,m=0},500)}const B=document.querySelector("#tree");B.setSelectionManager(s),B.setTreeItem(A.getRoot());const d=new W("#F9CE03");d.a=.1;const l=m=>{let G=m;for(;G&&!(G instanceof mI)&&!(G instanceof xg);)G=G.getOwner();return G?(G.getOwner()instanceof rI&&(G=G.getOwner()),G):m};I.getViewport().on("pointerDown",m=>{if(m.intersectionData){const G=l(m.intersectionData.geomItem);G&&console.log(G.getPath())}}),I.getViewport().on("pointerUp",m=>{if(m.button==0)if(m.intersectionData){const G=l(m.intersectionData.geomItem);if(G)if(!m.shiftKey)s.toggleItemSelection(G,!m.ctrlKey);else{const y=new Set;y.add(G),s.deselectItems(y)}}else s.clearSelection()}),document.addEventListener("keydown",m=>{m.key=="f"&&(I.frameAll(),m.stopPropagation())}),I.getXRViewport().then(m=>{n&&(n.style.bottom="70px");const G=document.getElementById("xr-button");G&&(G.textContent="Launch "+g,G.classList.remove("hidden"),m.on("presentingChanged",y=>{const{state:Q}=y;Q?G.textContent="Exit "+g:G.textContent="Launch "+g}),G.addEventListener("click",()=>{m.togglePresenting()})),document.addEventListener("keydown",y=>{y.key==" "&&m.togglePresenting()})}),t.has("profile")&&I.startContinuousDrawing();const r=()=>{let m=0,G=0,y=0,Q=0;A.getRoot().traverse(u=>{if(u instanceof Ci)m++;else if(u instanceof gA){G++;const Z=u.geomParam.value;Z instanceof lg?Q+=Z.getNumSegments():Z instanceof pg?Q+=Z.getNumLineSegments():Z instanceof yI?y+=Z.computeNumTriangles():Z instanceof _g?y+=Z.getNumTriangles():Z instanceof ZC&&(Q+=Z.getNumLineSegments(),y+=Z.getNumTriangles())}}),console.log(`parts:${m} geomItems:${G} lines:${Q} triangles:${y}`)},c=m=>{const G=new AI,y=new hI;if(y.camera=I.getViewport().getCamera(),G.load(m,y).then(()=>{I.frameAll()}),G.getGeometryLibrary().on("loaded",()=>{r()}),t.has("ytoz")){const Q=new D;Q.ori.setFromAxisAndAngle(new f(1,0,0),Math.PI*.5),G.globalXfoParam.value=Q}A.getRoot().addChild(G)},h=(m,G="")=>{const y=new qa(G);return y.load(m,G).then(()=>{r(),I.frameAll()}),A.getRoot().addChild(y),y},E=(m,G="")=>{const y=new MB(G);return y.load(m).then(()=>{r(),I.frameAll()}),A.getRoot().addChild(y),y},b=(m,G="")=>{if(G.endsWith("zcad"))return c(m);if(G.endsWith("gltf")||G.endsWith("glb"))return h(m,G);if(G.endsWith("obj"))return E(m,G);throw new Error("Unsupported file type:"+G)};t.has("zcad")?c(t.get("zcad")):t.has("gltf")?h(t.get("gltf")):t.has("obj")?E(t.get("obj")):document.getElementById("dropZone").display((G,y)=>{b(G,y)})}y0()});export default Z0();
